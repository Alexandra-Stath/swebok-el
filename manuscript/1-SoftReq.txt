{mainmatter}

# Απαιτήσεις λογισμικού {#softreq}

## Ακρωνύμια

|ATDD   |Acceptance Test Driven Development |
|BDD    |Behavior Driven Development |
|CIA    |Confidentiality, Integrity, and Availability |
|FSM    |Functional Size Measurement |
|INCOSE |International Council on Systems Engineering |
|JAD    |Joint Application Development |
|JRP    |Joint Requirements Planning |
|RUP    |Rational Unified Process |
|SME    |Subject Matter Expert |
|SysML  |Systems Modeling Language |
|TDD    |Test Driven Development |
|UML	|Unified Modeling Language |

## Εισαγωγή

Οι απαιτήσεις λογισμικού θα πρέπει να εξετάζονται από δύο οπτικές.
Η πρώτη είναι ως έκφραση των αναγκών και περιορισμών ενός προϊόντος ή έργου
λογισμικού που συντελούν στην επίλυση ενός προβλήματος στον πραγματικό κόσμο.
Δεύτερη είναι εκείνη των δραστηριοτήτων που είναι απαραίτητες για την
ανάπτυξη και τη διατήρηση των απαιτήσεων για ένα προϊόν λογισμικού και για το
έργο που το κατασκευάζει.
Και οι δύο αυτές οπτικές παρουσιάζονται σε αυτήν τη γνωστική περιοχή.

Εάν μια ομάδα δεν εκτελέσει καλά τον προσδιορισμό των απαιτήσεων, το έργο, το προϊόν
ή και τα δύο είναι πιθανό να υποστούν επιπλέον κόστη, καθυστερήσεις,
ακυρώσεις και ελαττώματα. Ένας λόγος είναι ότι κάθε απαίτηση προϊόντος λογισμικού
οδηγεί γενικά σε πολλές αποφάσεις σχεδιασμού.
Κάθε απόφαση σχεδίασης οδηγεί συνήθως σε πολλές αποφάσεις σε επίπεδο κώδικα.
Επίσης, κάθε απόφαση μπορεί να εμπεριέχει αρκετές δοκιμαστικές αποφάσεις.
Με άλλα λόγια, ο σωστός καθορισμός των απαιτήσεων είναι μια δουλειά υψηλού κινδύνου.
Αν δεν ανιχνευθούν και διορθωθούν έγκαιρα, απαιτήσεις που λείπουν,
έχουν παρερμηνευτεί ή είναι λανθασμένες μπορούν να προκαλέσουν εκθετικής φύσεως εργασίες
αναθεώρησης για να διορθωθούν.

Τα σχέδια λογισμικού στον πραγματικό κόσμο τείνουν να αντιμετωπίζουν δύο βασικά
προβλήματα που σχετίζονται με τις απαιτήσεις:
1. ατέλεια: υπάρχουν απαιτήσεις ενδιαφερόμενων μερών που δεν αποκαλύπτονται και
δεν επικοινωνούνται στους μηχανικούς λογισμικού.
2. ασάφεια: οι απαιτήσεις επικοινωνούνται με τρόπο που επιδέχεται
πολλαπλές ερμηνείες, με μόνο μια απο αυτές να είναι η σωστή.

Πέρα από τον προφανή, βραχυπρόθεσμο, ρόλο που έχουν οι απαιτήσεις στην αρχική κατασκευή
λογισμικού, παίζουν επίσης έναν λιγότερο αναγνωρισμένο, αλλά εξίσου σημαντικό
ρόλο στη μακροπρόθεσμη συντήρησή του. Όταν ένας μηχανικός λογισμικού λαμβάνει
λογισμικό χωρίς καμία υποστηρικτική τεκμηρίωση, έχει αρκετά μέσα για να καθορίσει
τι κάνει αυτός ο κώδικας, όπως να τον εκτελέσει, να τον περάσει από έναν αποσφαλματωτή,
να τον εκτελέσει χειροκίνητα, να τον αναλύσει στατικά, κλπ.
Η πρόκληση είναι να καθοριστεί τι ακριβώς είναι αυτός ο κώδικας προορισμένος να κάνει.
Αυτό που συνήθως αναφέρεται ως σφάλμα - αλλά καλύτερα αποκαλείται ελάττωμα - είναι
απλώς μια παρατηρήσιμη διαφορά μεταξύ αυτού που προορίζεται να κάνει το λογισμικό
και αυτού που πραγματικά κάνει. Ο ρόλος της τεκμηρίωσης των απαιτήσεων κατά τη
διάρκεια του κύκλου ζωής του λογισμικού είναι να καταγράψει και να επικοινωνήσει τις
προθέσεις στους μηχανικούς λογισμικού που συντηρούν τον κώδικα αλλά μπορεί
να μην είναι οι αρχικοί του συντάκτες.

Η γνωστική περιοχή των Απαιτήσεων Λογισμικού αφορά την ανάπτυξη των απαιτήσεων
λογισμικού και τη διαχείρισή τους κατά τη διάρκεια της ζωής του λογισμικού.
Αυτή η γνωστική περιοχή παρέχει κατανόηση ότι οι απαιτήσεις λογισμικού:

* δεν είναι απαραίτητα μια διακριτή δραστηριότητα στο μπροστινό άκρο του κύκλου ζωής
ανάπτυξης λογισμικού, αλλά μια διαδικασία που ξεκινά στην αρχή ενός έργου και συχνά
συνεχίζεται να επανεκτιμάται καθ' όλη τη διάρκεια της ζωής του λογισμικού.
* χρειάζεται να προσαρμόζονται στο περιβάλλον και στα πλαίσια του οργανισμού και του έργου.

Ο όρος «απαιτήσεις μηχανικής» χρησιμοποιείται ευρέως στο χώρο για
να υποδηλώσει τη συστηματική διαχείριση των απαιτήσεων.
Για λόγους συνέπειας, ο όρος «μηχανική» θα χρησιμοποιηθεί σε αυτό
το γνωστικό πεδίο αποκλειστικά για την τεχνολογία λογισμικού.

Το γνωστικό πεδίο των Απαιτήσεων Λογισμικού σχετίζεται στενά με τα γνωστικά πεδία
της Αρχιτεκτονικής Λογισμικού, του Σχεδιασμού Λογισμικού, της Κατασκευής Λογισμικού,
του Ελέγχου Λογισμικού και της Συντήρησης Λογισμικού. Σχετίζεται, ακόμα, με τον κλάδο
της μοντελοποίησης στο γνωστικό πεδίο των Μοντέλων και Μεθόδων Τεχνολογίας Λογισμικού,
καθώς ο καθορισμός απαιτήσεων υπό τη μορφή μοντέλων μπορεί να προσφέρει σημαντική αξία.

Σχετίζεται ακόμα, με το θέμα του Κύκλου Ζωής Λογισμικού που συμπεριλαμβάνεται
στο γνωστικό πεδίο των Διεργασιών Τεχνολογίας Λογισμικού, καθώς αυτό επικεντρώνεται
στο πως και το ποια δουλειά που σχετίζεται με τις απαιτήσεις, μπορεί και πρέπει
να γίνει, ενώ ο κύκλος ζωής του έργου καθορίζει το πότε θα γίνει αυτή η εργασία.
Για παράδειγμα, στον έναν κύκλο ζωής ενός έργου που ακολουθεί το μοντέλο του καταρράκτη,
όλη η εργασία των απαιτήσεων γίνεται ουσιαστικά σε μια διακριτή φάση απαιτήσεων και
αναμένεται να είναι ολοκληρωμένη σε σημαντικό βαθμό πριν οποιαδήποτε διεργασία
αρχιτεκτονικής, σχεδιασμού και κατασκευής προκύψει σε επόμενες φάσεις.
Σε μερικούς επαναλαμβανόμενους κύκλους ζωής, η αρχική, υψηλού επιπέδου εργασία
απαιτήσεων γίνεται κατά τη διάρκεια μιας φάσης έναρξης, και περαιτέρω λεπτομερείς
πληροφορίες δίνονται κατά τη διάρκεια μίας ή περισσότερων φάσεων επεξήγησης.
Σε έναν ευέλικτο (Agile) κύκλο ζωής, η εργασία πάνω στις απαιτήσεις γίνεται σταδιακά,
καθώς κατασκευάζεται κάθε επιπλέον στοιχείο λειτουργικότητας.

Τα τι και πως της εργασίας απαιτήσεων λογισμικού σε ένα έργο πρέπει να
καθορίζονται από τη φύση του κατασκευαζόμενου λογισμικού, όχι από
τον κύκλο ζωής κάτω από τον οποίο κατασκευάζεται.
Όσον αφορά την τεκμηρίωση των απαιτήσεων, καθώς αυτή απαθανατίζει και επικοινωνεί
την πρόθεση του λογισμικού, οι μεταγενέστεροι συντηρητές δεν πρέπει να μπορούν να
αναγνωρίσουν τον κύκλο ζωής που χρησιμοποιήθηκε στην προηγούμενη ανάπτυξη μόνο
από τη μορφή αυτών των απαιτήσεων.

Αυτή η Περιοχή Γνώσεων σχετίζεται επίσης, αλλά κάπως λιγότερο, με τα πεδία γνώσης
της Διαχείρισης Σχηματισμών Λογισμικού, της Διοίκησης Τεχνολογίας Λογισμικού
και της Ποιότητας Λογισμικού. Οι προσεγγίσεις διαχείρισης σχηματισμών λογισμικού
μπορούν να εφαρμοστούν για την ανίχνευση και διαχείριση των απαιτήσεων, καθώς
η Ποιότητα Λογισμικού εξετάζει πόσο καλά διαμορφώνονται οι απαιτήσεις και η
Διοίκηση Τεχνολογίας Λογισμικού μπορεί να χρησιμοποιήσει την κατάσταση των
απαιτήσεων για να αξιολογήσει την ολοκλήρωση του έργου.

## Κατανομή των θεμάτων για τις απαιτήσεις λογισμικού

{id="fig-softreq-tree"}
![Σχήμα 1.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Απαιτήσεις λογισμικού.](images/1-SoftReq.png)

Η κατανομή των θεμάτων για το γνωστικό πεδίο των απαιτήσεων λογισμικού
απεικονίζεται στο [Σχήμα 1.1](#fig-softreq-tree).

## Βασικές αρχές στις απαιτήσεις λογισμικού

### Ορισμός μιας απαίτησης λογισμικού

Επισήμως, μια απαίτηση λογισμικού έχει οριστεί ως:

* μια προϋπόθεση ή δυνατότητα που χρειάζεται ένας χρήστης
προκειμένου να επιλύσει ένα πρόβλημα ή να επιτύχει έναν στόχο
* μια προϋπόθεση ή δυνατότητα που πρέπει να πληροί ή να διαθέτει
ένα σύστημα ή ένα συστατικό αυτού, προκειμένου να ικανοποιεί ένα
συμβόλαιο, ένα πρότυπο, μια προδιαγραφή ή ένα άλλο επίσημα
επιβεβλημένο έγγραφο.
* μια τεκμηριωμένη αναπαράσταση ή ικανότητα όπως αναφέρεται
στο (1) ή (2) παραπάνω.


Αυτός ο επίσημος ορισμός επεκτείνεται σε αυτό το γνωστικό πεδίο,
περιλαμβάνοντας εκφράσεις των αναγκών και περιορισμών ενός έργου λογισμικού.

Ουσιαστικά, μια απαίτηση λογισμικού είναι μια ιδιότητα που πρέπει
να εξεταστεί με βάση κάποιο χαρακτηριστικό, ώστε να λύνει κάποιο πρόβλημα
στον πραγματικό κόσμο. Μπορεί να έχει ως σκοπό να αυτοματοποιήσει
ολόκληρη ή μέρος μιας εργασίας που υποστηρίζει τις επιχειρηματικές
πολιτικές και διαδικασίες ενός οργανισμού, να διορθώσει ελλείψεις
υπάρχοντος λογισμικού ή να ελέγξει μια συσκευή -- ονοματίζοντας μόνο κάποια
από τα πολλά προβλήματα για τα οποία είναι δυνατόν να υπάρξουν λύσεις λογισμικού.

Οι επιχειρησιακές πολιτικές και διαδικασίες, καθώς και οι λειτουργίες των
συσκευών είναι συχνά πολύπλοκες. Κατ' επέκταση, οι απαιτήσεις λογισμικού είναι
συνήθως ένας πολύπλοκος συνδυασμός απαιτήσεων από διάφορους ενδιαφερόμενους
φορείς σε διαφορετικά οργανωτικά επίπεδα, οι οποίοι είναι εμπλεκόμενοι ή
συνδεδεμένοι με κάποιο πτυχή του περιβάλλοντος στο οποίο θα λειτουργήσει
το λογισμικό.

Οι πελάτες και οι χρήστες συνήθως επιβάλλουν απαιτήσεις.
Ωστόσο, άλλοι τρίτοι φορείς, όπως οι ρυθμιστικές αρχές και σε ορισμένες
περιπτώσεις, ο οργανισμός του λογισμικού ή το ίδιο το έργο, ενδέχεται επίσης
να επιβάλουν απαιτήσεις.

### Κατηγορίες Απαιτήσεων Λογισμικού

Στο σχήμα 1.2 φαίνονται οι κατηγορίες απαιτήσεων λογισμικού που
προσδιορίζονται στο συγκεκριμένο γνωστικό πεδίο, σε συνδυασμό με τις σχέσεις
ανάμεσα σε αυτές τις κατηγορίες. Κάθε κατηγορία περιγράφεται περαιτέρω παρακάτω.

### Απαιτήσεις προϊόντος λογισμικού και απαιτήσεις έργου λογισμικού

Οι απαιτήσεις προϊόντος λογισμικού προσδιορίζουν την αναμενόμενη μορφή, εφαρμογή ή
λειτουργία του λογισμικού. Οι απαιτήσεις έργου λογισμικού - επίσης ονομαζόμενες
απαιτήσεις διεργασίας ανάπτυξης ή, μερικές φορές, επιχειρηματικές απαιτήσεις -
περιορίζουν το έργο που κατασκευάζει το λογισμικό. Οι απαιτήσεις έργου
περιορίζουν συνήθως το κόστος, το χρονοδιάγραμμα ή/και το προσωπικό, αλλά
μπορεί επίσης να περιορίζουν άλλες πτυχές ενός έργου λογισμικού, όπως τα
περιβάλλοντα ελέγχου, τη μεταφορά δεδομένων, την εκπαίδευση χρηστών και την
συντήρηση. Οι απαιτήσεις έργου λογισμικού μπορούν να καταγραφούν σε έναν χάρτη
έργου ή σε ένα άλλο, υψηλού επιπέδου, έγγραφο έναρξης έργου. Σχετίζονται
περισσότερο με τον τρόπο διοίκησης του έργου ή την επιλογή διαδικασίας κύκλου
ζωής που πρέπει να χρησιμοποιηθεί. Αυτή η γνωστική περιοχή δεν παρουσιάζει
περαιτέρω τις απαιτήσεις έργου λογισμικού.

### Λειτουργικές απαιτήσεις

Οι λειτουργικές απαιτήσεις καθορίζουν τις παρατηρήσιμες συμπεριφορές που πρέπει
να παρέχει το λογισμικό - πολιτικές που πρέπει να επιβάλλονται και διαδικασίες που
πρέπει να πραγματοποιούνται. Παραδείγματα πολιτικών στο λογισμικό τραπεζικής χρήσης
μπορεί να είναι «ένας λογαριασμός πρέπει πάντα να έχει τουλάχιστον έναν πελάτη ως
ιδιοκτήτη του», και «το υπόλοιπο σε έναν λογαριασμό δεν πρέπει ποτέ να είναι αρνητικό».
Παραδείγματα διαδικασιών μπορεί να καθορίζουν το νόημα της κατάθεσης χρημάτων σε έναν
λογαριασμό, της ανάληψης χρημάτων από έναν λογαριασμό και της μεταφοράς χρημάτων από
έναν λογαριασμό σε άλλον.

Ακόμη και το πιο τεχνικό (μη επιχειρησιακού προσανατολισμού) λογισμικό, όπως το
λογισμικό που υλοποιεί το πρωτόκολλο επικοινωνίας δικτύου Ελέγχου
Μετάδοσης/Πρωτοκόλλου Διαδικτύου (TCP/IP), έχει πολιτικές και διαδικασίες:
"μια θύρα θα πρέπει να μπορεί να υπάρχει με καμία, μία ή πολλές σχετικές
συνδέσεις, αλλά μία σύνδεση θα πρέπει να υπάρχει σε ακριβώς μία συσχετισμένη θύρα",
"οι αποδεκτές καταστάσεις μιας σύνδεσης θα πρέπει να είναι «ακρόαση»,
«syn sent», «εγκαθίδρυση», «κλείσιμο», ..." και "εάν ο χρόνος ζωής
ενός Τμήματος φτάσει στο μηδέν, αυτό το Τμήμα θα διαγραφεί".

### Μη λειτουργικές απαιτήσεις

Οι μη λειτουργικές απαιτήσεις περιορίζουν κατά κάποιον τρόπο τις τεχνολογίες
που πρέπει να χρησιμοποιηθούν κατά την υλοποίηση. Προκύπτουν, λοιπόν, ερωτήματα
όπως: Ποιες υπολογιστικές πλατφόρμες θα χρησιμοποιηθούν; Ποια ή ποιες μηχανές
βάσεων δεδομένων; Πόσο ακριβή θα πρέπει να είναι τα δεδομένα; Με ποια ταχύτητα
θα πρέπει να παρουσιάζονται τα αποτελέσματα; Πόσες εγγραφές ενός συγκεκριμένου
τύπου που πρέπει να αποθηκευτούν; Ορισμένες μη λειτουργικές απαιτήσεις μπορεί
να αναφέρονται στη λειτουργία του λογισμικού.

Οι μη λειτουργικές απαιτήσεις μπορούν να χωριστούν περαιτέρω σε περιορισμούς
τεχνολογίας και περιορισμούς ποιότητας υπηρεσιών.

### Περιορισμοί τεχνολογίας

Αυτές οι απαιτήσεις επιβάλλουν - ή απαγορεύουν - τη χρήση συγκεκριμένων
τεχνολογιών αυτοματισμού με συγκεκριμένα ονόματα ή ορισμένες υποδομές.
Παραδείγματα αυτών των απαιτήσεων είναι η απαίτηση για τη χρήση συγκεκριμένων
υπολογιστικών πλατφορμών (π.χ. Windows™, MacOS™, Android OS™, iOS™), γλωσσών
προγραμματισμού (π.χ. Java, C++, C#, Python), συμβατότητας με συγκεκριμένους
περιηγητές ιστού (π.χ. Chrome™, Safari™, Edge™), συγκεκριμένες μηχανές βάσεων
δεδομένων (π.χ. Oracle™, SQL Server™, MySQL™) και γενικές τεχνολογίες
(π.χ. Reduced Instruction Set Computer (RISC), Relational Database).
Μια απαίτηση που απαγορεύει τη χρήση δεικτών (pointers) θα μπορούσε να
είναι ένα άλλο παράδειγμα.

### Περιορισμοί ποιότητας υπηρεσιών

Αυτές οι απαιτήσεις δεν περιορίζουν τη χρήση συγκεκριμένων τεχνολογιών
με συγκεκριμένα ονόματα. Αντίθετα, καθορίζουν αποδεκτά επίπεδα απόδοσης
που πρέπει να έχει μια αυτοματοποιημένη λύση.
Παραδείγματα αυτών είναι ο χρόνος απόκρισης, ο ρυθμός επεξεργασίας,
η ακρίβεια, η αξιοπιστία και η επεκτασιμότητα.
ISO/IEC 25010: "Μηχανική συστημάτων και λογισμικού - Απαιτήσεις ποιότητας και
αξιολόγηση συστημάτων και λογισμικού (SQuaRE) - Μοντέλα ποιότητας
συστημάτων και λογισμικού" περιλαμβάνει μια μεγάλη λίστα των ειδών
των ποιοτικών χαρακτηριστικών υπηρεσίας που μπορεί να είναι σχετικά με
το λογισμικό. Η ασφάλεια είναι επίσης ένα ιδιαίτερα σημαντικό θέμα όπου οι
απαιτήσεις τείνουν να παραβλέπονται. (Για λεπτομέρειες σχετικά με τα είδη
των συγκεκριμένων απαιτήσεων ασφαλείας που πρέπει να ληφθούν υπόψη,
δείτε τo γνωστικό πεδίο ασφαλείας.)

### Γιατί κατηγοριοποιούμε τις απαιτήσεις με αυτόν τον τρόπο;

Η κατηγοριοποίηση των απαιτήσεων με αυτόν τον τρόπο είναι
χρήσιμη για τους εξής λόγους:

* Οι απαιτήσεις σε μία κατηγορία τείνουν να προέρχονται
από διαφορετικές πηγές παρά από άλλες κατηγορίες.
* Οι τεχνικές απόκτησης συχνά διαφέρουν ανάλογα με την πηγή.
* Οι τεχνικές ανάλυσης διαφέρουν ανάλογα με την κατηγορία.
* Οι τεχνικές προδιαγραφής διαφέρουν ανάλογα με την κατηγορία.
* Οι αρμόδιοι επαλήθευσης διαφέρουν ανάλογα με την κατηγορία.
* Οι διαφορετικές κατηγορίες επηρεάζουν το αποτέλεσμα του λογισμικού
με διαφορετικούς τρόπους.

Επιπλέον, η οργάνωση των απαιτήσεων σε αυτές τις κατηγορίες
είναι επωφελής με τους ακόλουθους τρόπους:

* Η πολυπλοκότητα μπορεί να διαχειρίζεται καλύτερα επειδή διαφορετικές
περιοχές μπορούν να αντιμετωπίζονται ξεχωριστά. Δηλαδή, Οι μηχανικοί
λογισμικού μπορούν να αντιμετωπίζουν τις πολιτικές και τις διαδικαστικές
πολυπλοκότητες χωρίς να ανησυχούν ταυτόχρονα για τα ζητήματα της
τεχνολογίας αυτοματοποίησης (και αντίστροφα).
Ένα μεγάλο πρόβλημα χωρίζεται σε δύο μικρότερα.
Αυτή είναι η κλασική διαχείριση της πολυπλοκότητας με τη
μέθοδο διαίρει και βασίλευε.

* Διακριτές περιοχές ειδίκευσης μπορούν να απομονωθούν· οι ενδιαφερόμενοι
φορείς, και όχι οι μηχανικοί λογισμικού, είναι οι ειδικοί στις πολιτικές
και διαδικασίες που πρέπει να αυτοματοποιηθούν. Οι μηχανικοί λογισμικού,
και όχι οι ενδιαφερόμενοι φορείς, είναι οι ειδικοί της τεχνολογίας.
Όταν δίνονται σε έναν επαγγελματία της επιχείρησης συνεχόμενες λειτουργικές
και μη λειτουργικές απαιτήσεις για επισκόπηση ή επαλήθευση, μπορεί "να τα
παρατήσει" επειδή δεν κατανοεί - ή ακόμη και δεν ενδιαφέρεται για -
τα ζητήματα της τεχνολογίας. Ενώ, ο ειδικός στις απαιτήσεις επιθεωρητής μπορεί
να επικεντρωθεί μόνο στο υποσύνολο των απαιτήσεων που τον αφορούν.

Το Τέλειο Φίλτρο Τεχνολογίας που περιγράφεται, βοηθά να διαχωριστούν οι
λειτουργικές από τις μη λειτουργικές απαιτήσεις. Με απλά λόγια, οι λειτουργικές
απαιτήσεις είναι αυτές που θα χρειαζόταν να δηλωθούν ακόμα και αν υπήρχε ένας
υπολογιστής με άπειρη ταχύτητα, απεριόριστη μνήμη, μηδενικό κόστος, χωρίς
αποτυχίες, κλπ., πάνω στον οποίο θα μπορούσε να κατασκευαστεί το λογισμικό.
Όλες οι άλλες απαιτήσεις του προϊόντος λογισμικού είναι περιορισμοί στις
τεχνολογίες αυτοματοποίησης και επομένως είναι μη λειτουργικές.

Τα μεγάλα συστήματα συχνά καλύπτουν περισσότερους από έναν τομέα
θεμάτων ή πεδίων. Η αναδρομική σχεδίαση δείχνει
πώς οι μη λειτουργικές απαιτήσεις σε έναν γονικό τομέα μπορούν να γίνουν,
ή να προκαλέσουν, λειτουργικές απαιτήσεις σε έναν τομέα "παιδί".
Για παράδειγμα, μια μη λειτουργική απαίτηση σχετικά με την ασφάλεια του
χρήστη σε έναν γονικό τομέα τραπεζικών εργασιών μπορεί να γίνει, ή να
προκαλέσει λειτουργικές απαιτήσεις σε έναν "παιδικό" τομέα ασφαλείας.
Αντίστοιχα, οι διασταυρούμενες μη λειτουργικές απαιτήσεις σχετικά με τον
έλεγχο και τη διαχείριση συναλλαγών σε έναν γονικό τομέα τραπεζικών εργασιών
μπορούν να γίνουν, ή να προκαλέσουν λειτουργικές απαιτήσεις σε έναν "παιδικό"
τομέα ελέγχου και σε έναν "παιδικό" τομέα συναλλαγών. Η ανάλυση μεγάλων
συστημάτων σε ένα σύνολο σχετικών τομέων μειώνει σημαντικά την πολυπλοκότητα.

### Απαιτήσεις συστήματος και λογισμικού

Το Διεθνές συμβούλιο για την τεχνολογία λογισμικού και συστημάτων (INCOSE)
ορίζει ένα «σύστημα» "ως έναν αλληλεπιδραστικό συνδυασμό στοιχείων για την
επίτευξη ενός καθορισμένου στόχου. Αυτά τα στοιχεία περιλαμβάνουν το υλικό
του υπολογιστή (hardware), το λογισμικό (software), το υλικο-λογισμικό
(firmware), τους ανθρώπους, τις πληροφορίες, τις τεχνικές, τις εγκαταστάσεις,
τις υπηρεσίες, καθώς και άλλα στοιχεία υποστήριξης".

Σε ορισμένες περιπτώσεις, είναι χρήσιμο ή απαραίτητο να διαχωρίζονται οι
απαιτήσεις συστήματος από τις απαιτήσεις λογισμικού. Οι απαιτήσεις συστήματος
ισχύουν για μεγαλύτερα συστήματα - για παράδειγμα, ένα αυτόνομο όχημα.
Οι απαιτήσεις λογισμικού ισχύουν μόνο για ένα στοιχείο λογισμικού σε αυτό
το μεγαλύτερο σύστημα. Ορισμένες απαιτήσεις λογισμικού μπορεί να προέρχονται
από απαιτήσεις συστήματος. Σε άλλες περιπτώσεις,
το λογισμικό αποτελεί αυτό καθαυτό το σύστημα ενδιαφέροντος, και το υλικό
και το σύστημα υποστήριξης θεωρούνται ως πλατφόρμα ή υποδομή, ώστε οι
απαιτήσεις συστήματος να είναι κυρίως απαιτήσεις λογισμικού.

### Παραγόμενες απαιτήσεις

Στην πράξη, οι απαιτήσεις μπορούν να είναι ευαίσθητες στο πλαίσιο και να
εξαρτώνται από την οπτική γωνία. Ένα εξωτερικό ενδιαφερόμενο μέρος μπορεί να
επιβάλει μια απαίτηση εύρους και αυτό θα ήταν μια απαίτηση για ολόκληρο το
έργο - ακόμη κι αν αυτό το έργο περιλαμβάνει εκατοντάδες μηχανικούς λογισμικού.
Η απόφαση ενός αρχιτέκτονα να χρησιμοποιήσει ένα στυλ αρχιτεκτονικής αγωγών
και φίλτρων δεν θα ήταν μια απαίτηση από την οπτική γωνία των ενδιαφερομένων
στο συνολικό έργο, αλλά μια απόφαση σχεδιασμού. Αλλά η ίδια αυτή απόφαση,
όταν αντιμετωπίζεται από την οπτική γωνία μιας υποομάδας που είναι υπεύθυνη
για την κατασκευή ενός συγκεκριμένου φίλτρου, θα θεωρείται απαίτηση.

Η αεροδιαστημική βιομηχανία χρησιμοποιεί εδώ και καιρό τον όρο παραγόμενη
απαίτηση για να σημαίνει μια απαίτηση που δεν δόθηκε από εξωτερικό
ενδιαφερόμενο στο σύνολο του έργου, αλλά επιβλήθηκε μέσα στη μεγαλύτερη
ομάδα ανάπτυξης. Η αρχιτεκτονική απόφαση των αγωγών και φίλτρων του
αρχιτέκτονα ταιριάζει σε αυτόν τον ορισμό. Αυτή η επιλογή θα θεωρείτο
μια απόφαση σχεδιασμού από την άποψη των εξωτερικών ενδιαφερομένων,αλλά ως
απαίτηση για τις υποομάδες που είναι υπεύθυνες για την ανάπτυξη κάθε φίλτρου.


### Δραστηριότητες απαιτήσεων λογισμικού

Στο σχήμα 1.3 παρουσιάζονται οι δραστηριότητες ανάπτυξης και
διαχείρισης απαιτήσεων.

Η ανάπτυξη απαιτήσεων, συνολικά, μπορεί να θεωρηθεί ως "επίτευξη συμφωνίας
για το τι λογισμικό πρέπει να κατασκευαστεί". Αντίθετα, η διαχείριση
απαιτήσεων μπορεί να θεωρηθεί ως "διατήρηση αυτής της συμφωνίας στον χρόνο".
Κάθε δραστηριότητα παρουσιάζεται σε αυτό το γνωστικό πεδίο. Οι δραστηριότητες
ανάπτυξης απαιτήσεων παρουσιάζονται ως ξεχωριστά θέματα, με τη διαχείριση
απαιτήσεων να παρουσιάζεται ως ένα μόνο θέμα.

## Εκμαίευση απαιτήσεων

Ο στόχος της εκμαίευσης απαιτήσεων είναι να εντοπιστούν οι υποψήφιες απαιτήσεις.
Αυτή η διαδικασία ονομάζεται επίσης «σύλληψη απαιτήσεων», «ανακάλυψη
απαιτήσεων» ή «απόκτηση απαιτήσεων». Όπως αναφέρθηκε προηγουμένως, ένα πρόβλημα
στην εργασία με απαιτήσεις σε πραγματικά έργα λογισμικού είναι η έλλειψη
ολοκλήρωσης. Αυτό μπορεί να οφείλεται σε ανεπαρκή εκμαίευση. Παρόλο που δεν
υπάρχει εγγύηση για μια πλήρη συλλογή απαιτήσεων, μια καλά εκτελεσμένη σύλληψη
βοηθά στο να μειωθεί η έλλειψη ολοκλήρωσης.

### Πηγές απαιτήσεων

Οι απαιτήσεις προέρχονται - μπορούν να εκμαιευτούν - από πολλές
διαφορετικές πηγές. Όλες οι δυνητικές πηγές απαιτήσεων πρέπει να αναγνωριστούν
και να αξιολογηθούν. Ένας ενδιαφερόμενος μπορεί να οριστεί ως οποιοσδήποτε
άνθρωπος, ομάδα ή οργανισμός που:

* εμπλέκεται ενεργά στο έργο
* επηρεάζεται από το αποτέλεσμα του έργου
* μπορεί να επηρεάσει το αποτέλεσμα του έργου.

Οι τυπικοί ενδιαφερόμενοι για τα έργα λογισμικού περιλαμβάνουν, αλλά δεν
περιορίζονται μόνο στα ακόλουθα:

* πελάτες - τόσο εκείνοι που πληρώνουν για το λογισμικό που θα κατασκευαστεί
(π.χ. διοίκηση οργανισμού) (clients), όσο και εκείνοι που αποφασίζουν εάν
ένα προϊόν λογισμικού θα τεθεί σε λειτουργία (customers)
* χρήστες - εκείνοι που αλληλεπιδρούν άμεσα ή έμμεσα με το λογισμικό
οι χρήστες μπορούν συχνά να χωριστούν σε διακριτές κατηγορίες χρηστών που
διαφέρουν στη συχνότητα χρήσης, τις εργασίες που εκτελούν, το επίπεδο
εξειδίκευσης και γνώσης, το επίπεδο προνομίων κ.λπ.
* ειδικοί πάνω στο θέμα (SMEs)
* προσωπικό λειτουργίας
* προσωπικό πρώτου επιπέδου υποστήριξης προϊόντος
* σχετικά επαγγελματικά σώματα
* κανονιστικές αρχές
* ομάδες ειδικού ενδιαφέροντος
* άνθρωποι που μπορεί να επηρεαστούν αρνητικά εάν το έργο είναι επιτυχημένο
* προγραμματιστές

Οι κατηγορίες των ενδιαφερομένων είναι ομάδες ενδιαφερομένων που έχουν
παρόμοιες απόψεις και ανάγκες. Η εργασία σε ένα έργο λογισμικού με
κατηγορίες ενδιαφερομένων αντί για ατομικούς ενδιαφερομένους μπορεί
να παράγει σημαντική, πρόσθετη κατανόηση.

Πολλά έργα ωφελούνται από τη διενέργεια μιας ανάλυσης ενδιαφερομένων μερών για
την αναγνώριση όσο το δυνατόν περισσότερων ενδιαφερομένων μερών. Αυτό μειώνει
την πιθανότητα να υπάρχει μεροληψία στις απαιτήσεις υπέρ των ενδιαφερομένων
μερών που εκπροσωπούνται καλύτερα και κατά των λιγότερο καλά
εκπροσωπούμενων ενδιαφερομένων μερών. Η ανάλυση αυτή μπορεί επίσης
να καθοδηγεί τη διαπραγμάτευση και την επίλυση συγκρούσεων όταν οι απαιτήσεις
από μια κατηγορία ενδιαφερομένων συγκρούονται με απαιτήσεις από άλλη.

Οι απαιτήσεις δεν προέρχονται απαραίτητα μόνο από ανθρώπους.
Άλλες πηγές απαιτήσεων μπορούν να είναι:
* Η τεκμηρίωση, όπως οι απαιτήσεις για προηγούμενες εκδόσεις, οι διακηρύξεις
αποστολής, το συνολικό σχέδιο λειτουργίας
* Άλλα συστήματα
* το ευρύτερο επιχειρησιακό περιβάλλον συμπεριλαμβανομένων των πολιτικών και
των διαδικασιών του οργανισμού
* Το περιβάλλον υπολογιστικών συστημάτων

### Συνήθεις τεχνικές εκμαίευσης απαιτήσεων

Μπορούν να χρησιμοποιηθούν πολλές τεχνικές για την εκμαίευση απαιτήσεων από
τα ενδιαφερόμενα μέρη. Ορισμένες τεχνικές λειτουργούν καλύτερα με συγκεκριμένες
κατηγορίες ενδιαφερομένων μερών. Οι συνηθισμένες τεχνικές ανάκτησης απαιτήσεων
από ενδιαφερόμενα μέρη περιλαμβάνουν τα ακόλουθα:

* συνεντεύξεις
* συναντήσεις, πιθανότατα που συμπεριλαμβάνουν brainstorming
* Από κοινού Ανάπτυξη Εφαρμογών (JAD), Από κοινού Σχεδιασμός Απαιτήσεων (JRP)
και άλλα οργανωμένα εργαστήρια
* ανάλυση πρωτοκόλλου
* ομάδες εστίασης
* ερωτηματολόγια και έρευνες αγοράς
* διερευνητικά πρωτότυπα, συμπεριλαμβανομένων των πρωτοτύπων διεπαφών χρήστη
χαμηλής και υψηλής πιστότητας
* καταγραφή ιστοριών χρήστη

Η εκμαίευση μπορεί να είναι δύσκολη και ο μηχανικός λογισμικού πρέπει να
γνωρίζει ότι (για παράδειγμα) οι χρήστες μπορεί να δυσκολεύονται να περιγράψουν
τις εργασίες τους, να αφήνουν αναπάντητες σημαντικές πληροφορίες ή να μην
είναι πρόθυμοι ή σε θέση να συνεργαστούν. Η εκμαίευση δεν είναι μια παθητική
δραστηριότητα. Ακόμα κι αν υπάρχουν συνεργάσιμοι και εύληπτοι ενδιαφερόμενοι,
ο μηχανικός λογισμικού πρέπει να εργαστεί σκληρά για να εκμαιεύσει τις σωστές
πληροφορίες. Πολλές απαιτήσεις προϊόντος είναι σιωπηρές ή μπορούν να βρεθούν
μόνο σε πληροφορίες που δεν έχουν συλλεχθεί ακόμα.

Οι απαιτήσεις μπορούν επίσης να αντληθούν από διάφορες πηγές πέρα από τα
ενδιαφερόμενα μέρη. Τέτοιες πηγές και τεχνικές περιλαμβάνουν τα εξής:

* προηγούμενες εκδόσεις του συστήματος
* βάση δεδομένων παρακολούθησης ατελειών για προηγούμενες εκδόσεις του
συστήματος
* συστήματα που επικοινωνούν με το σύστημα που βρίσκεται υπό ανάπτυξη
* ανταγωνιστικό benchmarking
* βιβλιογραφική έρευνα
* Το House of Quality της Εξάπλωσης της Λειτουργίας Ποιότητας (QFD).

## Ανάλυση απαιτήσεων {#req-analysis}

Οι απαιτήσεις σπάνια εξάγονται στην τελική τους μορφή. Συνήθως απαιτείται
περαιτέρω έρευνα για να αποκαλυφθούν οι πλήρεις και πραγματικές απαιτήσεις
που παρουσιάζονται από τις πληροφορίες που έχουν αρχικά συλλεχθεί. Η ανάλυση
απαιτήσεων βοηθά τους προγραμματιστές λογισμικού να κατανοήσουν τη σημασία και
τις συνέπειες των προτεινόμενων απαιτήσεων, τόσο ατομικά όσο και στο πλαίσιο
του ευρύτερου συνόλου απαιτήσεων.

### Βασική ανάλυση απαιτήσεων

Η παρακάτω λίστα επιθυμητών ιδιοτήτων των απαιτήσεων μπορεί να καθοδηγήσει τη
βασική ανάλυση απαιτήσεων. Ο μηχανικός λογισμικού προσπαθεί να καθιερώσει
οποιαδήποτε από αυτές τις ιδιότητες, σε περίπτωση που δεν εφαρμόζονται ακόμα.
Κάθε απαίτηση θα πρέπει:

* να είναι ξεκάθαρη (ερμηνεύσιμη με μόνο έναν τρόπο)
* να είναι ελέγξιμη (να μπορεί να ποσοτικοποιηθεί), που σημαίνει ότι η
συμμόρφωση ή η μη συμμόρφωση μπορεί να αποδειχθεί με σαφήνεια.
* να είναι δεσμευτική, που σημαίνει ότι οι πελάτες είναι διατεθειμένοι να
πληρώσουν για αυτήν και απρόθυμοι να μην την έχουν
* να αντιπροσωπεύει πραγματικές ανάγκες των ενδιαφερομένων μερών
* να χρησιμοποιεί το λεξιλόγιο των ενδιαφερομένων μερών
* να είναι αποδεκτή από όλα τα ενδιαφερόμενα μέρη

Η συλλογή των απαιτήσεων συνολικά θα πρέπει να είναι:

* ολοκληρωμένη, δηλαδή να ανταποκρίνεται επαρκώς στις συνθήκες των ορίων και
των εξαιρέσεων και τις ανάγκες ασφάλειας
* εσωτερικά συνεπής, δηλαδή καμία απαίτηση δεν συγκρούεται με κάποια άλλη
* εξωτερικά συνεπής, δηλαδή καμία απαίτηση δεν συγκρούεται με οποιοδήποτε
πηγαίο υλικό
* εφικτή, δηλαδή μπορεί να δημιουργηθεί μια λειτουργική, οικονομικά αποδοτική
λύση εντός των περιορισμών του κόστους, του χρονοδιαγράμματος, του προσωπικού
και άλλων περιορισμών

Σε ορισμένες περιπτώσεις, μια απαίτηση που έχει εκμαιευτεί αντιπροσωπεύει μια
λύση προς υλοποίηση αντί για το πραγματικό πρόβλημα που πρέπει να επιλυθεί.
Αυτό κινδυνεύει να οδηγήσει στην υλοποίηση μιας μη βέλτιστης λύσης.
Η τεχνική των "5 γιατί" (5-whys) περιλαμβάνει το επαναλαμβανόμενο ερώτημα
"Γιατί είναι αυτή η απαίτηση;" για να συγκλίνει στο πραγματικό πρόβλημα.
Η επανάληψη σταματά όταν η απάντηση είναι "Εάν αυτό δεν γίνει, τότε το πρόβλημα
του ενδιαφερόμενου μέρους δεν έχει λυθεί." Συχνά, το πραγματικό πρόβλημα
επιλύεται μετά από δύο ή τρεις κύκλους, αλλά η τεχνική ονομάζεται "5 γιατί" για
να ενθαρρύνει τους μηχανικούς να την επαναλαμβάνουν όσο το δυνατόν περισσότερο.

### Οικονομικά των περιορισμών της ποιότητας υπηρεσιών

Οι περιορισμοί της ποιότητας υπηρεσιών μπορούν να είναι ιδιαίτερα
προκλητικοί. Αυτό συμβαίνει γενικά επειδή οι μηχανικοί δεν τους λαμβάνουν
υπόψη από οικονομική σκοπιά. Η εικόνα 1.4 απεικονίζει την οικονομική
προοπτική ενός τυπικού περιορισμού ποιότητας υπηρεσιών, όπως η χωρητικότητα,
η επεξεργαστική ικανότητα και η αξιοπιστία, όπου η αξία αυξάνεται με το
επίπεδο απόδοσης. Αυτή η καμπύλη αντανακλάται κατακόρυφα για περιορισμούς
ποιότητας υπηρεσιών, των οποίων η αξία μειώνεται καθώς το επίπεδο απόδοσης
αυξάνεται (παραδείγματα θα μπορούσαν να είναι ο χρόνος απόκρισης και ο μέσος
χρόνος επισκευής).

### Διαπραγμάτευση απαιτήσεων {#negot-req}

Ένας άλλος όρος, που χρησιμοποιείται συνήθως για αυτό το υπόθεμα,
είναι η «επίλυση των συγκρούσεων.» Αυτό αφορά στην επίλυση των προβλημάτων
με τις απαιτήσεις όπου συμβαίνουν συγκρούσεις μεταξύ δύο ενδιαφερόμενων
μερών που απαιτούν ασυμβίβαστα χαρακτηριστικά, μεταξύ των απαιτήσεων
και των πόρων, ή μεταξύ λειτουργικών και μη-λειτουργικών απαιτήσεων,
για παράδειγμα. Στις περισσότερες περιπτώσεις, δεν είναι σοφό για
τον μηχανικό λογισμικού να παίρνει μια μονομερή απόφαση, έτσι ώστε
να καθίσταται αναγκαία η διαβούλευση με τα ενδιαφερόμενα μέρη για
να επιτευχθεί συναίνεση για ένα κατάλληλο αντιστάθμισμα. Συνήθως είναι
πολύ σημαντικό, για συμβατικούς λόγους, τέτοιου είδους αποφάσεις να
είναι ανιχνεύσιμες από τον πελάτη. Έχουμε κατατάξει αυτό ως ένα θέμα
ανάλυσης απαιτήσεων λογισμικού, επειδή τα προβλήματα προκύπτουν ως
αποτέλεσμα της ανάλυσης. Ωστόσο, μπορεί επίσης να γίνει μια σημαντική
περίπτωση για την θεώρηση ενός θέματος επικύρωσης απαιτήσεων (βλ.
ενότητα [Επικύρωση απαιτήσεων](#validreq)).

Η ιεράρχηση των απαιτήσεων είναι απαραίτητη, όχι μόνο ως μέσο για
το φιλτράρισμα σημαντικών απαιτήσεων, αλλά και για την επίλυση των
συγκρούσεων και το σχεδιασμό σταδιακών παραδόσεων, πράγμα που σημαίνει
την κατασκευή σύνθετων αποφάσεων που απαιτούν τη λεπτομερή γνώση του
πεδίου και δεξιότητες εκτίμησης. Ωστόσο, είναι συχνά δύσκολο να ληφθούν
πραγματικές πληροφορίες που μπορούν να λειτουργήσουν ως βάση για τις
εν λόγω αποφάσεις. Επιπλέον, οι απαιτήσεις συχνά εξαρτώνται η μια
με την άλλη και οι προτεραιότητες είναι σχετικές. Στην πράξη, οι μηχανικοί
λογισμικού εκτελούν την ιεράρχηση των απαιτήσεων συχνά χωρίς να γνωρίζουν
για όλες τις απαιτήσεις. Η ιεράρχηση των απαιτήσεων μπορεί να ακολουθήσει
μια προσέγγιση κόστους-αξίας, η οποία περιλαμβάνει μια ανάλυση από
τα ενδιαφερόμενα μέρη, όπου καθορίζονται σε μια κλίμακα τα οφέλη ή
το συνολικό κέρδος, που η εφαρμογή της απαίτησης τους φέρνει, σε σχέση
με τις κυρώσεις που υπάρχουν από την μη εφαρμογή μιας συγκεκριμένης
απαίτησης. Περιλαμβάνει επίσης μια ανάλυση από τους μηχανικούς λογισμικού
εκτιμώντας σε μια κλίμακα το κόστος της εφαρμογής κάθε απαίτησης,
σε σχέση με άλλες απαιτήσεις.
Μια άλλη προσέγγιση της ιεράρχησης των απαιτήσεων, που ονομάζεται
αναλυτική διεργασία ιεραρχίας, περιλαμβάνει τη σύγκριση όλων των μοναδικών
ζευγών των απαιτήσεων για να καθοριστεί ποια από τις δύο είναι μεγαλύτερη
προτεραιότητα, και σε ποιο βαθμό.

### Τυπική ανάλυση {#formal-analysis}

Η τυπική ανάλυση αφορά όχι μόνο την ενότητα Ανάλυση απαιτήσεων, αλλά επίσης τα θέματα
Προσδιορισμός απαιτήσεων λογισμικού και Επικύρωση του μοντέλου.
Το θέμα αυτό σχετίζεται επίσης με την παράγραφο Τυπικές μέθοδοι
στο γνωστικό πεδίο Μοντέλα και μέθοδοι τεχνολογίας λογισμικού.

Η τυπική ανάλυση έχει αντίκτυπο σε ορισμένες περιοχές εφαρμογής, ιδίως
στα συστήματα υψηλής ακεραιότητας. Η επίσημη έκφραση των απαιτήσεων
απαιτεί μια γλώσσα με επίσημα καθορισμένους συμβολισμούς. Η χρήση
της τυπικής ανάλυσης για την έκφραση απαιτήσεων έχει δύο πλεονεκτήματα.
Πρώτον, επιτρέπει απαιτήσεις, που εκφράζονται στη γλώσσα αυτή, να
καθορίζονται με ακρίβεια και σαφήνεια, συνεπώς, (κατ' αρχήν) να αποφευχθεί
το ενδεχόμενο παρερμηνείας. Δεύτερον, οι απαιτήσεις μπορούν να αιτιολογηθούν,
επιτρέποντας να αποδειχθούν επιθυμητές ιδιότητες του καθορισμένου
λογισμικού. Η τυπική αιτιολόγηση απαιτεί την υποστήριξη ενός εργαλείου,
για να είναι πρακτική για οτιδήποτε άλλο εκτός από τετριμμένα συστήματα.
Εργαλεία που συνήθως χωρίζονται σε δύο τύπους: τεκμηριωτές θεωρίας
ή ελεγκτές μοντέλων.
Σε καμία περίπτωση δεν μπορεί η απόδειξη να είναι πλήρως αυτοματοποιημένη,
καθώς και το επίπεδο επάρκειας στην τυπική αιτιολόγηση, που απαιτείται
για να χρησιμοποιήσετε τα εργαλεία, περιορίζει την ευρύτερη εφαρμογή
της τυπικής ανάλυσης.

Η τυπικότερη ανάλυση επικεντρώνεται σε σχετικά προχωρημένα στάδια
της ανάλυσης απαιτήσεων. Είναι γενικά αντιπαραγωγικό να εφαρμόζεται
τυποποίηση, μέχρι οι επιχειρηματικοί στόχοι και οι απαιτήσεις των
χρηστών να έχουν προβληθεί με μέσα όπως αυτά που περιγράφονται αλλού
στην παράγραφο 4. Ωστόσο, από τη στιγμή που οι απαιτήσεις έχουν οριστεί
και έχουν διαμορφωθεί για τον καθορισμό συγκεκριμένων ιδιοτήτων του
λογισμικού, μπορεί να είναι χρήσιμο να τυποποιηθούν, τουλάχιστον,
οι κρίσιμες απαιτήσεις.
Αυτό επιτρέπει τη στατική επικύρωση πως το λογισμικό, που διαμορφώνεται
από τις απαιτήσεις, έχει πράγματι τις ιδιότητες που ο πελάτης, οι χρήστες, και ο μηχανικός λογισμικού
προσδοκούν να έχει (για παράδειγμα, την απουσία αδιεξόδου).

## Απαιτήσεις από την διεργασία ανάπτυξης {#req-process}
Αυτή η ενότητα εισάγει τις απαιτήσεις λογισμικού από τη διεργασία
ανάπτυξης, προσανατολίζοντας τα υπόλοιπα πέντε θέματα και δείχνοντας
πώς οι απαιτήσεις από τη διεργασία ανάπτυξης βρίσκονται σε άμεση συνάρτηση
με τη συνολική διαδικασία τεχνολογίας λογισμικού.

### Μοντέλα διεργασιών {#pr-models}

Ο στόχος αυτού του θέματος είναι να καταστήσει σαφές ότι οι απαιτήσεις
από τη διεργασία ανάπτυξης:

  * δεν είναι μία διακριτή μεμονωμένη δραστηριότητα του κύκλου ζωής του
  λογισμικού, αλλά περισσότερο μια διεργασία που ξεκινάει στην αρχή
  του έργου και συνεχίζει να τελειοποιείται καθ 'όλη τη διάρκεια του
  κύκλου ζωής του,
  * προσδιορίζει τις απαιτήσεις λογισμικού ως στοιχεία διαμόρφωσης
  και τα διαχειρίζεται χρησιμοποιώντας τις ίδιες πρακτικές διαχείρισης
  σχηματισμών του λογισμικού ως άλλα στοιχεία από τις διαδικασίες του
  κύκλου ζωής του λογισμικού και
  * πρέπει να προσαρμόζονται με τον οργανισμό και τη «βασική ιδέα»
  του έργου.

Ειδικότερα, αυτό το θέμα ασχολείται με το πώς οι δραστηριότητες της
εκμαίευσης, της ανάλυσης, του προσδιορισμού  και της επαλήθευσης ρυθμίζονται
για διαφορετικούς τύπους έργων και περιορισμών.
Το θέμα περιλαμβάνει επίσης δραστηριότητες που συνεισφέρουν στις απαιτήσεις
από τη διεργασία ανάπτυξης, όπως το μάρκετινγκ και μελέτες σκοπιμότητας.

### Φορείς των διεργασιών {#actors}

Το θέμα αυτό εισάγει τους ρόλους των ανθρώπων που συμμετέχουν στις
απαιτήσεις από τη διεργασία ανάπτυξης. Αυτή η διεργασία είναι θεμελιωδώς
διεπιστημονική, και ο ειδικός των απαιτήσεων πρέπει να μεσολαβήσει
μεταξύ του πεδίου των ενδιαφερόμενων μερών και της τεχνολογίας λογισμικού.
Συνήθως υπάρχουν πολλοί άνθρωποι που εμπλέκονται, εκτός από τον ειδικό
απαιτήσεων, καθένας από τους οποίους έχει μερίδιο στο λογισμικό.
Τα ενδιαφερόμενα μέρη ποικίλλουν μεταξύ των έργων, περιλαμβάνουν όμως
πάντα τους χρήστες/διαχειριστές και τους πελάτες (που δεν χρειάζεται
να είναι οι ίδιοι).
Τυπικά παραδείγματα των ενδιαφερομένων μερών λογισμικού περιλαμβάνουν
(αλλά δεν περιορίζονται σε αυτά) τα παρακάτω:

  * Χρήστες: Αυτή η ομάδα αποτελείται από αυτούς που θα χρησιμοποιούν
  το λογισμικό.
  Ως επί το πλείστον είναι μια ετερογενής ομάδα που αφορά ανθρώπους
  με διαφορετικούς ρόλους και απαιτήσεις.
  * Πελάτες: Αυτή η ομάδα αποτελείται από αυτούς που προμηθεύονται 
  το λογισμικό ή από αυτούς που αποτελούν την αγορά-στόχο του λογισμικού.
  * Αναλυτές της αγοράς: Ένα προϊόν μαζικής αγοράς δεν θα έχει έναν
  πελάτη στον οποίο θα προμηθευτεί το λογισμικό, έτσι οι άνθρωποι του μάρκετινγκ
  συχνά είναι απαραίτητο να καθορίσουν ποιές είναι οι ανάγκες της αγοράς
  και να ενεργούν ως πελάτες μεσολάβησης.
  * Ρυθμιστές: Πολλά πεδία εφαρμογής, όπως το τραπεζικό αλλά και των
  μέσων μαζικής μεταφοράς, είναι ρυθμιζόμενα. Το λογισμικό που προορίζεται γι αυτούς
  τους τομείς πρέπει να συμμορφώνεται με τις απαιτήσεις των ρυθμιστικών αρχών.
  * Μηχανικοί λογισμικού: Αυτά τα άτομα έχουν θεμιτό ενδιαφέρον και επωφελούνται
  από την ανάπτυξη του λογισμικού. Για παράδειγμα, την επαναχρησιμοποίηση
  των συστατικών σε ή από άλλα προϊόντα. Αν, σε αυτό το σενάριο, ένας
  πελάτης ενός συγκεκριμένου προϊόντος έχει συγκεκριμένες απαιτήσεις
  που θέτουν σε κίνδυνο τη δυνατότητα επαναχρησιμοποίησης, οι μηχανικοί
  λογισμικού πρέπει να ζυγίζουν προσεκτικά το δικό τους μερίδιο ενάντια
  σε εκείνο του πελάτη. Ειδικές απαιτήσεις, ιδίως περιορισμοί,
  ενδέχεται να έχουν σημαντικές επιπτώσεις στο κόστος του έργου ή την
  παράδοσή του επειδή είτε ταιριάζουν είτε όχι με το σύνολο των δεξιοτήτων
  των μηχανικών.
  Πρέπει να προσδιοριστούν σημαντικά αντισταθμίσματα μεταξύ των εν λόγω
  απαιτήσεων.

Δεν θα είναι δυνατόν να ικανοποιηθούν απόλυτα οι απαιτήσεις του κάθε
ενδιαφερόμενου μέρους και είναι δουλειά του μηχανικού λογισμικού να
διαπραγματευτεί ανταλλάγματα που είναι τόσο αποδεκτά από τα κύρια
ενδιαφερόμενα μέρη, όσο και εντός του προϋπολογισμού και των τεχνικών,
ρυθμιστικών και άλλων περιορισμών.
Απαραίτητη προϋπόθεση για αυτό είναι ο προσδιορισμός όλων των ενδιαφερόμενων μερών, 
η ανάλυση της φύση της «συμμετοχής» τους και η εκμαίευση των απαιτήσεων τους.

### Υποστήριξη και διαχείριση διεργασιών

Αυτή η ενότητα εισάγει τους πόρους διαχείρισης του έργου που απαιτούνται
και καταναλώνονται από τις απαιτήσεις της διεργασίας ανάπτυξης. Καθορίζει
το πλαίσιο για την πρώτη ενότητα, [Έναρξη και ορισμός σκοπού](#initiat-scope-defin-mng), στο γνωστικό
πεδίο της Διοίκηση τεχνολογίας λογισμικού.
Κύριος σκοπός του είναι να κάνει τη σύνδεση μεταξύ των δραστηριοτήτων 
διεργασιών που προσδιορίζεται στο θέμα Μοντέλα διεργασιών και των θεμάτων του κόστους, 
των ανθρώπινων πόρων, της εκπαίδευσης και των εργαλείων.

### Ποιότητα και βελτίωση διεργασιών

Αυτό το θέμα ασχολείται με την αξιολόγηση της ποιότητας και τη βελτίωση
των απαιτήσεων της διεργασίας ανάπτυξης. Σκοπός του είναι να τονίσει
τον βασικό ρόλο που έχουν οι απαιτήσεις διεργασίας ανάπτυξης σε όρους κόστους και 
επικαιρότητας ενός προϊόντος λογισμικού και ικανοποίησης του πελάτη από αυτό. 
Θα συμβάλει στον προσανατολισμό αυτών των απαιτήσεων με τα πρότυπα 
ποιότητας και τα πρότυπα διεργασίας βελτίωσης για το λογισμικό και τα
συστήματα.
Η ποιότητα και η διεργασίας βελτίωσης είναι στενά συνδεδεμένες με 
τη γνωστική περιοχή τόσο της Ποιότητας λογισμικού όσο και των Διεργασιών
τεχνολογίας λογισμικού και περιλαμβάνουν:

  * την κάλυψη των απαιτήσεων της διεργασίας ανάπτυξης μέσω προτύπων
  και μοντέλων της διεργασίας βελτίωσης,
  * τη μέτρηση και τη συγκριτική αξιολόγηση των απαιτήσεων της διεργασίας
  ανάπτυξης,
  * τον σχεδιασμό και την εφαρμογή της βελτίωσης και
  * την ασφάλεια του σχεδιασμού και της εφαρμογής της βελτίωσης.


## Προσδιορισμός απαιτήσεων

Για τα περισσότερα επαγγέλματα μηχανικής, ο όρος «προσδιορισμός» αναφέρεται
στην ανάθεση των αριθμητικών τιμών ή των ορίων στους στόχους του σχεδιασμού
ενός προϊόντος. Στην τεχνολογία λογισμικού, ο «προσδιορισμός προδιαγραφών
λογισμικού» αναφέρεται συνήθως στην παραγωγή ενός εγγράφου, το οποίο
μπορεί να επανεξετάζεται, να αξιολογείται και να εγκρίνεται συστηματικά.
Για σύνθετα συστήματα, ιδίως εκείνα που αφορούν σημαντικά μη λογισμικά
συστατικά στοιχεία, παράγονται τρεις διαφορετικοί τύποι των εγγράφων:
ο ορισμός του συστήματος, απαιτήσεις του συστήματος και απαιτήσεις
του λογισμικού. Για τα απλά προϊόντα λογισμικού, μόνο το τρίτο από
αυτά απαιτείται. Όλα τα τρία έγγραφα περιγράφονται εδώ, με την προϋπόθεση
ότι μπορούν να συνδυαστούν αναλόγως.
Μια περιγραφή των συστημάτων μηχανικής μπορεί να βρεθεί στο κεφάλαιο
Σχετικές αρχές της τεχνολογία λογισμικού του παρόντος Οδηγού.

### Έγγραφο ορισμού συστήματος


Αυτό το έγγραφο (μερικές φορές γνωστό και ως έγγραφο με τις απαιτήσεις
των χρηστών ή πλαίσιο της έννοιας της λειτουργίας) καταγράφει τις
απαιτήσεις του συστήματος. Καθορίζει τις απαιτήσεις υψηλού επιπέδου
του συστήματος από τη σκοπιά του πεδίου. Το κοινό, που προβλέπεται
να το διαβάσει, περιλαμβάνει εκπροσώπους των χρηστών/πελατών του συστήματος
(το μάρκετινγκ μπορεί να παίξει αυτούς τους ρόλους για την αγορά του
λογισμικού), οπότε το περιεχόμενό του θα πρέπει να διατυπωθεί σε συμφωνία
με την οπτική του πεδίου. Το έγγραφο παραθέτει τις απαιτήσεις του
συστήματος σε συνδυασμό με τις βασικές πληροφορίες σχετικά με τους
γενικούς στόχους του συστήματος, το περιβάλλον-στόχο του, καθώς και
μια αναφορά των περιορισμών, των παραδοχών, και των μη λειτουργικών
απαιτήσεων.
Μπορεί να περιλαμβάνει αφηρημένα μοντέλα σχεδιασμένα για να καταδείξουν
το πλαίσιο του συστήματος, σενάρια χρήσης, καθώς και τις κύριες οντότητες
πεδίου, καθώς και τις ροές εργασίας.

### Προσδιορισμός απαιτήσεων συστήματος

Οι προγραμματιστές συστημάτων με λογισμικά και μη λογισμικά συστατικά
στοιχεία - ένα σύγχρονο αεροσκάφος, για παράδειγμα - συχνά διαχωρίζουν
την περιγραφή των απαιτήσεων του συστήματος από την περιγραφή των
απαιτήσεων λογισμικού. Κατά την άποψη αυτή, οι απαιτήσεις του συστήματος
προσδιορίζονται, οι απαιτήσεις του λογισμικού προέρχονται από τις
απαιτήσεις του συστήματος και, στη συνέχεια προσδιορίζονται οι απαιτήσεις
για τα στοιχεία του λογισμικού.
Για να κυριολεκτήσουμε, ο προσδιορισμός των απαιτήσεων του συστήματος
είναι μια δραστηριότητα μηχανικού συστήματος και εμπίπτει στο πεδίο
εφαρμογής του παρόντος Οδηγού.

### Προσδιορισμός απαιτήσεων λογισμικού {#req-specif}

Ο προσδιορισμός των απαιτήσεων λογισμικού δημιουργεί τη βάση για την
επίτευξη συμφωνίας μεταξύ των πελατών και των αναδόχων ή προμηθευτών
(σε έργα με γνώμονα την αγορά, αυτοί οι ρόλοι μπορούν να αναπαρασταθούν
από τα τμήματα μάρκετινγκ και ανάπτυξης) σε ό,τι το προϊόν λογισμικού
προσδοκάται ή όχι να κάνει.

Ο προσδιορισμός των απαιτήσεων λογισμικού επιτρέπει την αυστηρή αξιολόγηση
των αναγκών, πριν το σχέδιο να μπορεί να αρχίσει, και μειώνει τυχόν
μεταγενέστερο ανασχεδιασμό.
Θα πρέπει επίσης να παρέχει μια ρεαλιστική βάση για την εκτίμηση του
κόστους, των κινδύνων και των χρονοδιαγραμμάτων των προϊόντων.

Οι οργανισμοί μπορούν επίσης να χρησιμοποιήσουν ένα έγγραφο προσδιορισμού
των απαιτήσεων του λογισμικού ως βάση για την ανάπτυξη αποτελεσματικών
σχεδίων επαλήθευσης και επικύρωσης.

Ο προσδιορισμός των απαιτήσεων λογισμικού παρέχει μια ενημερωμένη
βάση για τη μεταφορά ενός προϊόντος λογισμικού σε νέους χρήστες ή
πλατφόρμες λογισμικού.
Τέλος, μπορεί να αποτελέσει τη βάση για την βελτίωση του λογισμικού.

Οι απαιτήσεις του λογισμικού είναι συχνά γραμμένες σε φυσική γλώσσα,
αλλά, όσον αφορά τον προσδιορισμό απαιτήσεων του λογισμικού, αυτό
μπορεί να συμπληρωθεί με επίσημες ή ημιεπίσημες περιγραφές. Η επιλογή
των κατάλληλων συμβολισμών επιτρέπει σε συγκεκριμένες απαιτήσεις και 
πτυχές της αρχιτεκτονικής λογισμικού να περιγραφούν ακριβέστερα και
πιο περιεκτικά από ότι με τη φυσική γλώσσα. Ο γενικός κανόνας είναι
ότι συμβολισμοί θα πρέπει να χρησιμοποιούνται επιτρέποντας στις απαιτήσεις
να περιγράφονται όσο το δυνατόν ακριβέστερα.
Το γεγονός αυτό είναι ιδιαιτέρως σημαντικό για αξιόπιστα λογισμικά
ασφαλείας, ρυθμιστικά και άλλων βασικών τύπων. Ωστόσο, η επιλογή
της σημειογραφίας περιορίζεται συχνά από την εκπαίδευση, τις δεξιότητες,
και τις προτιμήσεις των συγγραφέων και των αναγνωστών του εγγράφου.

Μια σειρά από δείκτες ποιότητας έχουν αναπτυχθεί, ώστε να μπορούν να
χρησιμοποιηθούν για να συσχετίσουν την ποιότητα του προσδιορισμού
απαιτήσεων του λογισμικού με άλλες μεταβλητές του έργου, όπως το κόστος,
η αποδοχή, η απόδοση, το χρονικό προγραμματισμό, και η επαναληψιμότητα.
 Οι δείκτες ποιότητας για τη μεμονωμένη έκφραση του καθορισμού απαιτήσεων
λογισμικού περιλαμβάνουν προστακτικό ύφος, οδηγίες, αδύναμες φράσεις,
επιλογές και αναβολές.
Δείκτες για ολόκληρο το έγγραφο των προδιαγραφών απαιτήσεων του λογισμικού 
περιλαμβάνουν το μέγεθος, την αναγνωσιμότητα, τις προδιαγραφές, το
βάθος και τη δομή του κειμένου.

## Επικύρωση απαιτήσεων {#validreq}

Τα έγγραφα απαιτήσεων μπορούν να υπόκεινται σε διαδικασίες επικύρωσης
και επαλήθευσης. Οι απαιτήσεις μπορεί να επικυρώνονται, για να εξασφαλίζουν
ότι ο μηχανικός λογισμικού τις έχει κατανοήσει. Είναι επίσης σημαντικό
να εξακριβώνεται ότι ένα έγγραφο απαιτήσεων συμμορφώνεται στα πρότυπα
της εταιρείας και ότι είναι κατανοητό, συνεπές και πλήρες.
Σε περιπτώσεις, όπου τεκμηριωμένα πρότυπα ή η ορολογία της εταιρείας
είναι ασυμβίβαστα με ευρέως αποδεκτά πρότυπα, θα πρέπει να συμφωνηθεί
μια χαρτογράφηση μεταξύ των δύο και να επισυνάπτεται στο έγγραφο.

Οι τυπικοί συμβολισμοί προσφέρουν το σημαντικό πλεονέκτημα να επιτρέπεται
στις τελευταίες δύο ιδιότητες να αποδειχθούν (έστω και περιορισμένα).
Διαφορετικά ενδιαφερόμενα μέρη, συμπεριλαμβανομένων των εκπροσώπων
του πελάτη και του υλοποιητή, θα πρέπει να επανεξετάσουν το έγγραφο
(ή τα έγγραφα). Τα έγγραφα απαιτήσεων υπόκεινται στις ίδιες πρακτικές
διαχείρισης διαμόρφωσης με τα άλλα παραδοτέα των διεργασιών του κύκλου
ζωής του λογισμικού. Όταν είναι εφικτό, οι επιμέρους απαιτήσεις επίσης
υπόκεινται σε διαχείριση της διαμόρφωσης, γενικώς χρησιμοποιώντας
ένα εργαλείο διαχείρισης απαιτήσεων (βλ. ενότητα [Εργαλεία απαιτήσεων λογισμικού](#toolsreq)).

Είναι φυσιολογικό να προγραμματιστούν ρητά ένα ή περισσότερα σημεία
της διαδικασίας απαιτήσεων, όπου οι απαιτήσεις έχουν επικυρωθεί. Ο
στόχος είναι να διευθετηθούν τυχόν προβλήματα, προτού διατεθούν πόροι
για την εφαρμογή των απαιτήσεων.
Η επικύρωση απαιτήσεων ασχολείται με τη διαδικασία εξέτασης του εγγράφου
απαιτήσεων, για να διασφαλιστεί ότι καθορίζεται το σωστό λογισμικό
(δηλαδή, το λογισμικό για το οποίο οι χρήστες προσδοκούν).

### Επιθεώρηση απαιτήσεων {#review-req}


Ίσως το πιο κοινό μέσο επικύρωσης γίνεται με την επιθεώρηση ή τα σχόλια
του εγγράφου (ή εγγράφων) απαιτήσεων. Σε μια ομάδα επιθεωρητών αποδίδεται
η έρευνα για λάθη, λανθασμένες παραδοχές, η έλλειψη σαφήνειας και
απόκλιση από την καθιερωμένη πρακτική.
Η σύνθεση της ομάδας, που διεξάγει την επιθεώρηση, είναι σημαντική
(για παράδειγμα, θα πρέπει να περιλαμβάνει, τουλάχιστον, έναν εκπρόσωπο
του πελάτη για ένα έργο, που βασίζεται στον πελάτη), και μπορεί να
βοηθήσει στην καθοδήγηση σχετικά με το τι πρέπει να διερευνηθεί για
τη μορφή των καταλόγων ελέγχου.

Οι επιθεωρήσεις μπορεί να συνθέτονται κατά την ολοκλήρωση του εγγράφου
διασαφήνισης του συστήματος, του εγγράφου καθορισμού του συστήματος,
του εγγράφου καθορισμού των απαιτήσεων λογισμικού, του καθορισμού
της αναφοράς για μια νέα έκδοση ή σε οποιοδήποτε άλλο στάδιο της διαδικασίας.

### Υλοποίηση πρωτοτύπου {#prototyping}

Η υλοποίηση πρωτοτύπου είναι συνήθως ένα μέσο για την επικύρωση της
ερμηνείας των απαιτήσεων του λογισμικού από το μηχανικό λογισμικού,
καθώς και για την εκμαίευση νέων απαιτήσεων. Όπως και στην εκμαίευση,
υπάρχει μια σειρά τεχνικών υλοποίησης πρωτοτύπων και μια σειρά από
σημεία της διαδικασίας, όπου η επικύρωση του πρωτοτύπου  μπορεί να
είναι χρήσιμη. Το πλεονέκτημα των πρωτοτύπων είναι ότι μπορούν να
κάνουν ευκολότερη την ερμηνεία των παραδοχών από το μηχανικό λογισμικού
και, όπου κρίνεται απαραίτητο, να «επιστρέψει» πληροφορίες ως προς
το γιατί αυτές μπορεί να είναι λάθος. Για παράδειγμα, η δυναμική συμπεριφορά
της διεπαφής του χρήστη μπορεί να γίνει καλύτερα κατανοητή μέσω ενός
κινούμενου πρωτότυπου παρά μέσω της περιγραφής κειμένου ή γραφικών
μοντέλων. Η μεταβλητότητα της απαίτησης, που διασαφηνίζεται μετά την
υλοποίηση πρωτοτύπου, έχει γίνει είναι εξαιρετικά χαμηλή, διότι δεν
υπάρχει συμφωνία μεταξύ των ενδιαφερόμενων μερών και του μηχανικού
λογισμικού - ως εκ τούτου, τα κρίσιμα για την ασφάλεια και τα καίρια
χαρακτηριστικά υλοποίησης πρωτοτύπου θα μπορούσαν πραγματικά να βοηθήσουν.
Όμως, υπάρχουν μειονεκτήματα. Αυτά περιλαμβάνουν τον κίνδυνο της απόσπασης
της προσοχής των χρηστών από τον πυρήνα της βαθύτερης λειτουργικότητας,
λόγω προβλημάτων αισθητικής ή  ποιότητας του πρωτοτύπου. Τα πρωτότυπα
μπορεί να είναι δαπανηρά για να αναπτυχθούν. Ωστόσο, εάν αποφευχθεί
η σπατάλη πόρων, που προκαλείται από την προσπάθεια να ικανοποιηθούν
λανθασμένες απαιτήσεις, το κόστος τους μπορεί να δικαιολογηθεί πιο
εύκολα. Τα αρχικά πρωτότυπα μπορούν να περιέχουν στοιχεία του τελικού
προϊόντος.
Τα πρωτότυπα μπορεί να είναι εξελικτικά και όχι μιας χρήσης.

### Επικύρωση του μοντέλου {#valid-model-req}

Είναι συνήθως απαραίτητο να επικυρώνεται η ποιότητα των μοντέλων,
που αναπτύχθηκαν κατά τη διάρκεια της ανάλυσης. Για παράδειγμα, στα
μοντέλα αντικειμένων είναι χρήσιμο να εκτελείται μια στατική ανάλυση,
για να εξακριβωθεί ότι υπάρχουν δίαυλοι επικοινωνίας μεταξύ των αντικειμένων
που ανταλλάσσουν δεδομένα, στο πεδίο των ενδιαφερομένων μερών. Εάν
χρησιμοποιούνται συμβολισμοί τυπικής ανάλυσης, είναι δυνατόν να χρησιμοποιηθεί
η επίσημη αιτιολόγηση για να αποδειχθούν οι ιδιότητες των προδιαγραφών.
Το θέμα αυτό συνδέεται στενά με το γνωστικό πεδίο Μοντέλα και μέθοδοι τεχνολογίας 
λογισμικού.

### Έλεγχοι αποδοχής {#accept-testing}


Μια βασική ιδιότητα μιας απαίτησης λογισμικού είναι ότι πρέπει να
είναι δυνατό να επαληθευτεί πως το τελικό προϊόν την ικανοποιεί. Απαιτήσεις,
οι οποίες δε μπορούν να επικυρωθούν, στην πραγματικότητα είναι απλά
«ευχές». Συνεπώς, μία σημαντική εργασία είναι να προβλέπεται πώς θα
ελέγχεται κάθε απαίτηση.
Στις περισσότερες περιπτώσεις, ο σχεδιασμός δοκιμών αποδοχής κάνει
αυτό για το οποίο οι τελικοί χρήστες χρησιμοποιούν το σύστημα
κατά κανόνα δεοντολογίας των επιχειρήσεων.

Ο καθορισμός και ο σχεδιασμός ελέγχων αποδοχής μπορεί να είναι δύσκολοι
για τις μη λειτουργικές απαιτήσεις (βλ. παράγραφο [Λειτουργικές
και μη λειτουργικές απαιτήσεις](#func-nonfun-req)).
Για να επικυρωθούν, πρέπει πρώτα να αναλυθούν και να αποσυντεθούν
σε σημείο να μπορούν να εκφράζονται ποσοτικά.

Πρόσθετες πληροφορίες μπορείτε να βρείτε στο θέμα Έλεγχος αποδοχής/πιστοποίησης
στο γνωστικό πεδίο Έλεγχος λογισμικού.

## Πρακτικές θεωρήσεις

Το πρώτο επίπεδο του θέματος αποσύνθεσης, που παρουσιάζεται σε αυτό
το γνωστικό πεδίο, μπορεί να φαίνεται να περιγράφει μια γραμμική αλληλουχία
των δραστηριοτήτων.
Αυτή είναι μια απλοποιημένη όψη της διαδικασίας.

Η διεργασία προδιαγραφής των  απαιτήσεων καλύπτει ολόκληρο τον κύκλο
ζωής του λογισμικού.
Η αλλαγή διαχείρισης και της συντήρησης των απαιτήσεων σε μια κατάσταση,
που αντικατοπτρίζει με ακρίβεια το λογισμικό που πρόκειται να υλοποιηθεί
ή που έχει υλοποιηθεί, είναι το κλειδί για την επιτυχία της διαδικασίας
ανάπτυξης λογισμικού.

Δεν έχει κάθε οργανισμός μια κουλτούρα καταγραφής και διαχείρισης
των απαιτήσεων. Είναι σύνηθες σε δυναμικές νεοσύστατες εταιρείες,
ωθούμενες από ένα ισχυρό «όραμα του προϊόντος» και με περιορισμένους
πόρους, για να αντιμετωπίζουν την τεκμηρίωση των απαιτήσεων ως περιττή
επιβάρυνση. Τις περισσότερες φορές, όμως, καθώς οι εταιρείες επεκτείνονται,
η πελατειακή τους βάση αυξάνεται και το προϊόν τους αρχίζει να εξελίσσεται,
ανακαλύπτουν ότι θα χρειαστεί να ανακτήσουν τις απαιτήσεις που εκμαίευσαν
τα χαρακτηριστικά του προϊόντος, προκειμένου να εκτιμηθεί το αντίκτυπο
των προτεινόμενων αλλαγών.
Ως εκ τούτου, η τεκμηρίωση των απαιτήσεων και η διαχείρισης της αλλαγής
είναι το κλειδί της επιτυχίας οποιασδήποτε διεργασίας προδιαγραφής
των  απαιτήσεων.

### Επαναληπτικός χαρακτήρας της διεργασίας  απαιτήσεων

Υπάρχει μια γενική πίεση στη βιομηχανία λογισμικού για συνεχώς μικρότερους
κύκλους ανάπτυξης, και αυτό είναι ιδιαίτερα έντονο σε εξαιρετικά ανταγωνιστικά
τμήματα της αγοράς. Επιπλέον, τα περισσότερα έργα περιορίζονται κατά
κάποιο τρόπο από το περιβάλλον τους, και πολλά από αυτά είναι αναβαθμίσεις
ή αναθεωρήσεις υπάρχοντος λογισμικού, των οποίων η αρχιτεκτονική είναι
γνωστή. Ως εκ τούτου, στην πράξη είναι σχεδόν πάντα ανέφικτο να εφαρμοστεί
η διεργασία προδιαγραφής απαιτήσεων ως μια γραμμική, ντετερμινιστική
διαδικασία, στην οποία οι απαιτήσεις του λογισμικού εκμαιεύονται από
τα ενδιαφερόμενα μέρη, αρχικοποιούνται, κατανέμονται και παραδίδονται
στην ομάδα ανάπτυξης του λογισμικού.
Είναι σίγουρα ένας μύθος ότι οι απαιτήσεις για τα μεγάλα έργα λογισμικού
είναι πάντα απόλυτα κατανοητές ή καθορισμένες ολόσωστα.

Αντ' αυτού, οι απαιτήσεις συνήθως επαναλαμβάνονται ως προς ένα επίπεδο
ποιότητας και λεπτομέρειας, που είναι επαρκές προκειμένου να επιτραπεί
ο σχεδιασμός και η λήψη των αποφάσεων που πρέπει να παρθούν. Σε ορισμένα
έργα, αυτό μπορεί να οδηγήσει σε απαιτήσεις που αρχικοποιούνται πριν
να γίνουν πλήρως κατανοητές όλες οι ιδιότητές τους. Αυτό εγκυμονεί
κινδύνους για ακριβές επαναλήψεις, αν προκύψουν προβλήματα αργά στη
διαδικασία της υλοποίησης λογισμικού. Ωστόσο, οι μηχανικοί λογισμικού
περιορίζονται αναγκαστικά από τα σχέδια διαχείρισης του έργου. Επομένως,
πρέπει να λάβουν μέτρα για να διασφαλιστεί, ότι η «ποιότητα» των απαιτήσεων
είναι όσο το δυνατόν υψηλότερη σε σχέση τους διαθέσιμους πόρους.
Για παράδειγμα, θα πρέπει να κάνουν ρητές τυχόν παραδοχές, στις οποίες
στηρίζονται οι απαιτήσεις, καθώς και τυχόν γνωστά προβλήματα.

Για τα προϊόντα λογισμικού, που έχουν αναπτυχθεί επαναληπτικά, μπορεί
μια ομάδα του έργου να αρχικοποιήσει μόνο τις απαιτήσεις που είναι
αναγκαίες για την τρέχουσα επανάληψη. Ο ειδικός απαιτήσεων μπορεί
να συνεχίσει να δημιουργεί απαιτήσεις για τις μελλοντικές επαναλήψεις,
ενώ οι προγραμματιστές προχωρούν με το σχεδιασμό και την κατασκευή
της τρέχουσας επανάληψης.
Αυτή η προσέγγιση παρέχει στους πελάτες την επιχειρηματική αξία γρήγορα,
ελαχιστοποιώντας παράλληλα το κόστος επανάληψης.

Σε όλες σχεδόν τις περιπτώσεις, η κατανόηση των απαιτήσεων συνεχίζει
να εξελίσσεται καθώς ο σχεδιασμός και η ανάπτυξη προχωρούν. Αυτό συχνά
οδηγεί στην αναθεώρηση των απαιτήσεων αργά στον κύκλο ζωής. Ίσως το
πιο καίριο σημείο για την κατανόηση των απαιτήσεων του λογισμικού
είναι ότι ένα σημαντικό ποσοστό των απαιτήσεων θα αλλάξει. Αυτό μερικές
φορές οφείλεται σε λάθη της ανάλυσης, αλλά είναι συχνά μια αναπόφευκτη
συνέπεια της αλλαγής στο «περιβάλλον», για παράδειγμα, το λειτουργικό
ή επιχειρηματικό περιβάλλον του πελάτη, τις ρυθμιστικές διαδικασίες,
που επιβάλλονται από τις αρχές, ή την αγορά στην οποία το λογισμικό
πρέπει να πουληθεί. Όποια και αν είναι η αιτία, είναι σημαντικό να
αναγνωρίσουμε το αναπόφευκτο των αλλαγών και να λάβουμε μέτρα για
την άμβλυνση των συνεπειών τους. Η αλλαγή πρέπει να είναι διαχωρίσιμη
έτσι, ώστε να διασφαλίζει, ότι οι προτεινόμενες αλλαγές θα περάσουν
από μια ορισμένη επιθεώρηση και μια διαδικασία έγκρισης, και να πραγματοποιείται
προσεκτικός εντοπισμός των απαιτήσεων, ανάλυση των επιπτώσεων, καθώς
και διαχείριση των σχηματισμών του λογισμικού (βλ. στο γνωστικό πεδίο
[Διαχείριση σχηματισμών λογισμικού](#softconfigmng)). Ως εκ τούτου, η διεργασία προδιαγραφή
των  απαιτήσεων δεν είναι απλώς ένα μετωπικό εφάπαξ έργο στην ανάπτυξη
λογισμικού, αλλά εκτείνεται σε ολόκληρο τον κύκλο ζωής του λογισμικού.
Σε ένα τυπικό έργο, οι δραστηριότητες, που σχετίζονται με τις απαιτήσεις
του λογισμικού, εξελίσσονται με την πάροδο του χρόνου μέσω της διαχείρισης
των αλλαγών. Ένας συνδυασμός των άνω προς τα κάτω μεθόδων ανάλυσης
και σχεδιασμού και των από κάτω προς τα πάνω μεθόδων υλοποίησης που
συναντιούνται στη μέση, θα μπορούσε να προσφέρει το καλύτερο και στους
δύο κόσμους.
Ωστόσο, αυτό είναι δύσκολο να επιτευχθεί στην πράξη, δεδομένου ότι
εξαρτάται σε μεγάλο βαθμό από την ωριμότητα και την εμπειρία των μηχανικών
λογισμικού.

### Διαχείριση αλλαγής

Η διαχείριση της αλλαγής είναι βασική για την διαχείριση των απαιτήσεων.
Αυτό το θέμα περιγράφει το ρόλο της διαχείρισης της αλλαγής, τις διαδικασίες
που πρέπει να πραγματοποιηθούν και την ανάλυση, που πρέπει να εφαρμόζεται
για τις προτεινόμενες αλλαγές.
Έχει ισχυρούς δεσμούς με το γνωστικό πεδίο Διαχείριση σχηματισμών 
λογισμικού.

### Γνωρίσματα απαιτήσεων {#attribreq}

Οι απαιτήσεις θα πρέπει να αποτελούνται όχι μόνο από μια προδιαγραφή
του τι απαιτείται, αλλά και της συμπληρωματικής πληροφορίας, η οποία
βοηθά στην διαχείριση και την ερμηνεία τους. Τα γνωρίσματα των απαιτήσεων
πρέπει να καθορίζονται, να καταγράφονται και να ενημερώνονται καθώς
το λογισμικό υπό ανάπτυξη ή υπό συντήρηση εξελίσσεται. Αυτό θα πρέπει
να περιλαμβάνει τις διάφορες κατηγοριοποιήσεις των διαστάσεων των
απαιτήσεων (βλ. παράγραφο [Κατηγοριοποίηση απαιτήσεων](#classif-req)) και τη
μέθοδο επαλήθευσης ή το σχετικό πλάνο ελέγχου αποδοχής.  Μπορεί επίσης
να περιλαμβάνει πρόσθετες πληροφορίες, όπως μία σύνοψη αιτιολόγησης
για κάθε απαίτηση, την πηγή της κάθε απαίτησης, και ένα ιστορικό αλλαγής.
Το πιο σημαντικό  γνώρισμα των απαιτήσεων, ωστόσο, είναι ένα προσδιοριστικό,
το οποίο επιτρέπει οι απαιτήσεις να είναι μοναδικές και να προσδιορίζονται
σαφώς.

### Ιχνηλασιμότητα απαιτήσεων {#tr-req}

Η ιχνηλασιμότητα των απαιτήσεων ασχολείται με την ανάκτηση της πηγής
τους και την πρόβλεψη των επιδράσεών τους. Η ιχνηλασιμότητα είναι
θεμελιώδους σημασίας για την πραγματοποίηση της ανάλυσης των επιπτώσεων,
όταν αλλάζουν οι απαιτήσεις. Μια απαίτηση θα πρέπει να είναι ανιχνεύσιμη
προς τα πίσω στις απαιτήσεις και στα ενδιαφερόμενα μέρη, τα οποία
την διαμόρφωσαν (για παράδειγμα, από την απαίτηση του λογισμικού πίσω
στην απαίτηση του συστήματος, που βοηθά στην ικανοποίηση).
Αντίθετα, μια απαίτηση θα πρέπει να είναι ανιχνεύσιμη προς τα εμπρός
στις απαιτήσεις και τις οντότητες σχεδιασμού, τα οποία την ικανοποιούν
(για παράδειγμα, από την απαίτηση του συστήματος στις απαιτήσεις του
λογισμικού, οι οποίες έχουν προκύψει από την πρώτη, και, εν συνεχεία,
στις ενότητες κώδικα, που την εφαρμόζουν, ή στις περιπτώσεις δοκιμών,
που σχετίζονται με τον εν λόγω κώδικα, και ακόμη και σε ένα τμήματος
του εγχειριδίου χρήσης, που περιγράφει την πραγματική λειτουργικότητα)
και την περίπτωση δοκιμής, που την επαληθεύει.

Η ιχνηλασιμότητα των απαιτήσεων για ένα τυπικό έργο θα σχηματίσει
μια πολύπλοκη, κατευθυνόμενη, άκυκλη γραφική παράσταση. Η διατήρηση
ενός ενημερωμένου γραφήματος ή μιας μήτρας ιχνηλασιμότητας είναι μια
δραστηριότητα, που πρέπει να εξετάζεται κατά τη διάρκεια ολόκληρου
του κύκλου ζωής ενός προϊόντος.
Εάν οι πληροφορίες ιχνηλασιμότητας δεν ενημερώνονται, καθώς οι αλλαγές
στις απαιτήσεις εξακολουθούν να συμβαίνουν, οι πληροφορίες ιχνηλασιμότητας
γίνονται αναξιόπιστες για την ανάλυση των επιπτώσεων.

### Μέτρηση απαιτήσεων

Ως ένα πρακτικό θέμα, είναι συνήθως χρήσιμο να υπάρχει κάποια ιδέα
του «όγκου» των απαιτήσεων για ένα συγκεκριμένο προϊόν λογισμικού.
Ο αριθμός αυτός είναι χρήσιμος στην αξιολόγηση του «μεγέθους» μιας
αλλαγής στις απαιτήσεις, στην εκτίμηση του κόστους μιας εργασίας ανάπτυξης
ή συντήρησης ή απλώς για να χρησιμεύσει ως παρονομαστής σε άλλες μετρήσεις.
Η λειτουργική μέτρηση του μεγέθους (Functional size measurement  -
FSM) είναι μια τεχνική για την αξιολόγηση του μεγέθους του σώματος
των λειτουργικών απαιτήσεων.

Πρόσθετες πληροφορίες σχετικά με τη μέτρηση και τα πρότυπα μεγέθους
θα βρεθούν στο γνωστικό πεδίο Διοίκησης τεχνολογίας λογισμικού.

## Εργαλεία απαιτήσεων λογισμικού {#toolsreq}

Τα εργαλεία για την αντιμετώπιση των απαιτήσεων λογισμικού εμπίπτουν
γενικά σε δύο κατηγορίες: εργαλεία για την μοντελοποίηση και εργαλεία
για τη διαχείριση των απαιτήσεων.

Τα εργαλεία διαχείρισης απαιτήσεων υποστηρίζουν συνήθως ένα ευρύ φάσμα
δραστηριοτήτων - συμπεριλαμβανομένης της τεκμηρίωσης, της ιχνηλασιμότητας
και της διαχείρισης της αλλαγής - και έχουν σημαντικό αντίκτυπο στην
πράξη. Πράγματι, η ιχνηλασιμότητα και η διαχείριση της αλλαγής είναι
πραγματικά εφικτή, μόνο αν υποστηρίζεται από ένα εργαλείο.
Δεδομένου ότι η διαχείριση των απαιτήσεων είναι θεμελιώδους σημασίας
για την καλή πρακτική απαιτήσεων, πολλοί οργανισμοί έχουν επενδύσει
σε εργαλεία διαχείρισης απαιτήσεων, αν και πολλοί περισσότεροι διαχειρίζονται
τις απαιτήσεις τους με περισσότερες «επί τούτου» και γενικά λιγότερο
ικανοποιητικές λύσεις, για παράδειγμα  χρησιμοποιώντας υπολογιστικά
φύλλα.
