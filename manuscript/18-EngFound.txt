#Θεμέλια Μηχανικής

## Ακρωνύμια

|CAD |Computer-Aided Design
|CMMI|Capability Maturity Model Integration
|PDF |Probability Density Function
|PMF |Probability Mass Function
|RCA |Root Cause Analysis
|SDLC|Software Development Life Cycle

## Εισαγωγή

Το πρότυπο ΙΕΕΕ ορίζει τη μηχανική ως "την εφαρμογή μίας συστηματικής, πειθαρχημένης και ποσοτικής
προσέγγισης σε δομές, μηχανές, προϊόντα, συστήματα ή διαδικασίες" [1]. Καθώς η θεωρία και η πρακτική 
των τεχνολογιών λογισμικού ωριμάζουν, είναι όλο και πιο φανερό ότι οι τεχνολογίες λογισμικού είναι ένας 
μηχανικός κλάδος που βασίζεται σε δεξιότητες και γνώσεις κοινές σε όλους τους μηχανικούς κλάδους.
Αυτό το γνωστικό πεδίο των Θεμελίων Μηχανικής ασχολείται με τα θεμέλια μηχανικής άλλων κλάδων μηχανικής
που εφαρμόζονται στις Τεχνολογίες Λογισμικού. Το ενδιαφέρον επικεντρώνεται σε θέματα που υποστηρίζουν 
άλλα γνωστικά πεδία, ενώ ελαχιστοποιεί την αναπαραγωγή του περιεχομένου που καλύπτεται αλλού σε αυτόν 
τον Οδηγό.

## Κατανομή των θεμάτων για τα Θεμέλια Μηχανικής

Η κατανομή των θεμάτων για το γνωστικό πεδίο των Θεμελίων Μηχανικής παρουσιάζεται στο Σχήμα TBD.1.

{id="topics-engfound-tree"}
![Σχήμα 18.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Θεμέλια Μηχανικής.](images/.png)

## Η Μηχανική Διαδικασία 

Η Μηχανική Διαδικασία (Engineering Process), κοινή σε όλους τους κλάδους Μηχανικής αναλύεται εκτενέστερα
στο γνωστικό πεδίο Τεχνολογίες Λογισμικού, ανατρέξτε σε αυτό το κεφάλαιο για μια πιο πλήρη συζήτηση.
Μια σύντομη και υψηλού επιπέδου συζήτηση περιλαμβάνεται εδώ. Το Σχήμα TBD.2 δείχνει την διαδικασία ροής.

{id="engfound-processflow"}
![Σχήμα 18.2 H Mηχανική Διαδικασία.](images/.png)

Η Μηχανική Διαδικασία (Engineering Process) είναι απαραίτητα επαναληπτική, η γνώση που αποκτάται σε 
οποιοδήποτε σημείο της διαδικασίας μπορεί να ενημερώσει προηγούμενα βήματα και να ενεργοποιήσει την 
επανάληψη. Αυτά τα βήματα αναλύονται εν συντομία παρακάτω.

* Κατανόηση του πραγματικού προβλήματος- η μηχανική αρχίζει όταν αναγνωρίζεται μια ανάγκη και καμία 
υπάρχουσα λύση δεν θα καλύψει αυτήν την ανάγκη. Ωστόσο, το πρόβλημα που πρέπει να επιλυθεί δεν είναι 
πάντα το πρόβλημα που ζητούν οι μηχανικοί να επιλύσουν. Χρησιμοποιήστε τεχνικές ανίχνευσης της βαθύτερης 
αιτίας (αργότερα σε αυτό το γνωστικό πεδίο) για να βοηθήσετε στην ανακάλυψη του πραγματικού βασικού 
προβλήματος που χρειάζεται λύση.

* Ορισμός κριτηρίων επιλογής - οι μηχανικές αποφάσεις σχεδόν πάντα συνεπάγονται οικονομικά κριτήρια 
όπως συζητείται στο γνωστικό πεδίο Οικονομικά Τεχνολογιών Λογισμικού, αλλά κριτήρια πέρα ​​από τον 
καθαρό οικονομικό παράγοντα μπορεί επίσης να είναι σημαντικά. Βεβαιωθείτε ότι έχουν ταυτοποιηθεί 
όλα τα σχετικά κριτήρια επιλογής.

* Αναγνώριση όλων των λογικά εφικτών τεχνικών λύσεων - η καλύτερη λύση σπάνια είναι η πρώτη λύση 
που έρχεται στο μυαλό. Βεβαιωθείτε ότι λαμβάνονται υπόψη πολλαπλές τεχνικά εφικτές λύσεις για να 
βοηθήσετε στη διασφάλιση ότι η βέλτιστη λύση περιέχεται στο σύνολο των λύσεων που εξετάζονται.

* Αξιολόγηση κάθε εναλλακτικής λύσης έναντι των κριτηρίων επιλογής - πρέπει να καθοριστεί πόσο 
καλά κάθε τεχνικά εφικτή λύση ικανοποιεί την ανάγκη.

* Επιλογή της προτιμώμενης εναλλακτικής λύσης - πρέπει να καθοριστεί ποια από τις τεχνικά εφικτές 
λύσεις ικανοποιεί καλύτερα τα κριτήρια επιλογής.

* Παρακολούθηση της απόδοσης της επιλεγμένης εναλλακτικής λύσης-  η διαδικασία της μηχανικής εξαρτάται 
αναγκαστικά από εκτιμήσεις, οι οποίες μπορεί να είναι λανθασμένες. Βεβαιωθείτε ότι αξιολογείτε την πραγματική 
απόδοση της επιλεγμένης εναλλακτικής λύσης και αποφασίστε εάν, όχι πολύ αργά, μια από τις άλλες εναλλακτικές 
λύσεις μπορεί να είναι καλύτερη.

Μεγάλο μέρος του υπόλοιπου αυτού του γνωστικού πεδίου επεκτείνεται σε λεπτομέρειες αυτής της μηχανικής διαδικασίας υψηλού επιπέδου.

## Σχεδιασμός Μηχανικής

Τα κόστη του κύκλου ζωής ενός προϊόντος επηρεάζονται σε μεγάλο βαθμό από το σχεδιασμό του. Αυτό ισχύει τόσο για προϊόντα κατασκευής όσο 
και για προϊόντα λογισμικού. Ο σχεδιασμός λογισμικού καθοδηγείται από τα χαρακτηριστικά που πρέπει να υλοποιηθούν και τα ποιοτικά 
χαρακτηριστικά που πρέπει να επιτευχθούν. Είναι σημαντικό να σημειωθεί ότι οι μηχανικοί λογισμικού χρησιμοποιούν τον όρο "σχεδιασμός" 
μέσα στο δικό τους πλαίσιο: ενώ υπάρχουν κάποιες κοινά στοιχεία, υπάρχουν επίσης πολλές διαφορές μεταξύ του σχεδιασμού μηχανικής (Engineering Design) 
όπως συζητείται σε αυτήν την ενότητα και του σχεδιασμού τεχνολογιών λογισμικού (Software Engineering Design) όπως συζητείται στα γνωστικά πεδία
Αρχιτεκτονική Λογισμικού και Σχεδίαση Λογισμικού. Το πεδίο εφαρμογής του  σχεδιασμού μηχανικής αντιμετωπίζεται γενικά ως πολύ ευρύτερο από εκείνο 
του σχεδιασμού λογισμικού.

Πολλές ειδικότητες ασχολούνται με δραστηριότητες επίλυσης προβλημάτων όπου υπάρχει μία μόνο σωστή λύση. Στη μηχανική, τα περισσότερα προβλήματα έχουν 
πολλές λύσεις και ο στόχος είναι να βρεθεί μία εφικτή λύση (ανάμεσα σε πολλές εναλλακτικές) που να ικανοποιεί καλύτερα τις ανάγκες που παρουσιάζονται. 
Το σύνολο των δυνατών λύσεων περιορίζεται συχνά από ρητά επιβεβλημένους περιορισμούς, όπως το κόστος, οι διαθέσιμοι πόροι και η κατάσταση της επιστήμης 
ή των γνώσεων στο συγκεκριμένο πεδίο. Στα προβλήματα της μηχανικής, κάποιες φορές υπάρχουν και έμμεσοι περιορισμοί (όπως οι φυσικές ιδιότητες των υλικών 
ή οι νόμοι της φυσικής) που περιορίζουν επίσης το σύνολο των εφικτών λύσεων για ένα δεδομένο πρόβλημα.

### **Σχεδίαση Μηχανικής στην Εκπαίδευση Μηχανικής**

Η σημασία της σχεδίασης μηχανικής στην εκπαίδευση μηχανικής μπορεί να φανεί ξεκάθαρα από τις υψηλές προσδοκίες που έχουν διάφοροι φορείς πιστοποίησης για τη μηχανική εκπαίδευση. 
Τόσο το Καναδικό Συμβούλιο Πιστοποίησης Μηχανικής όσο και το Συμβούλιο Πιστοποίησης για τη Μηχανική και την Τεχνολογία (ABET) σημειώνουν τη σημασία της συμπερίληψης της 
σχεδίασης μηχανικής στα προγράμματα εκπαίδευσης. Το Καναδικό Συμβούλιο Πιστοποίησης Μηχανικής περιλαμβάνει απαιτήσεις για το πόση εμπειρία / μαθήματα σχεδίασης μηχανικής είναι 
απαραίτητα για τους μηχανικούς καθώς και τις προσόντα των καθηγητών που διδάσκουν τέτοια μαθήματα ή επιβλέπουν τις εργασίες σχεδίασης. 
Τα κριτήρια πιστοποίησης δηλώνουν:

    Σχεδίαση: Η ικανότητα να σχεδιάζει λύσεις για σύνθετα και ανοιχτά προβλήματα της Μηχανικής και να σχεδιάζεις συστήματα, εξαρτήματα ή διαδικασίες που ικανοποιούν τις 
    καθορισμένες ανάγκες με κατάλληλη προσοχή στους κινδύνους για την υγεία και την ασφάλεια, τα εφαρμοστέα πρότυπα, τις οικονομικές, περιβαλλοντικές, πολιτιστικές 
    και κοινωνικές παραμέτρους. [4, σελ.7]

Με ένα παρόμοιο τρόπο  το Συμβούλιο Πιστοποίησης για τη Μηχανική και την Τεχνολογία (ABET) ορίζει το Σχεδιασμό Μηχανικής ως

     μια διαδικασία δημιουργίας ενός συστήματος, ενός εξαρτήματος ή μιας διαδικασίας για να ανταποκριθούν σε επιθυμητές ανάγκες και προδιαγραφές εντός περιορισμών.
     Είναι μια επαναληπτική, δημιουργική, αποφασιστική διαδικασία, στην οποία οι βασικές επιστήμες, τα μαθηματικά και οι μηχανικές επιστήμες εφαρμόζονται για να 
     μετατρέψουν τους πόρους σε λύσεις. [5, σελ. 7]

Συνεπώς, είναι σαφές ότι η μηχανική σχεδίαση είναι μια συνιστώσα ζωτικής σημασίας στην εξάσκηση και εκπαίδευση όλων των μηχανικών. Το υπόλοιπο αυτής της ενότητας 
θα επικεντρωθεί σε διάφορες πτυχές της μηχανικής σχεδίασης.

### Ο Σχεδιασμός ως Δραστηριότητα Επίλυσης Προβλημάτων 

Ο σχεδιασμός στη μηχανική είναι κυρίως μια δραστηριότητα επίλυσης προβλημάτων. Τα προβλήματα σχεδιασμού τείνουν να είναι ανοικτά και πιο αόριστα καθορισμένα. 
Υπάρχουν συνήθως αρκετοί εναλλακτικοί τρόποι για να λυθεί το ίδιο πρόβλημα. Γενικά, ο σχεδιασμός θεωρείται ως ένα **κακόβουλο** πρόβλημα (wicked problem) - ένας όρος που δημιουργήθηκε 
για πρώτη φορά από τον Χορστ Ρίτελ (Horst Rittel) τη δεκαετία του 1960 όταν οι μέθοδοι σχεδιασμού αποτελούσαν θέμα έντονου ενδιαφέροντος. Ο Ρίτελ αναζητούσε 
μια εναλλακτική λύση στο γραμμικό, βήμα-βήμα μοντέλο της διαδικασίας σχεδιασμού που εξερευνούν πολλοί σχεδιαστές και θεωρητικοί του σχεδιασμού και υποστήριζε 
ότι τα περισσότερα προβλήματα που αντιμετωπίζουν οι σχεδιαστές είναι πονηρά προβλήματα. Όπως εξηγεί ο Στιβ ΜακΚόνελ(Steve McConnell), ένα κακόβουλο πρόβλημα 
είναι ένα πρόβλημα που μπορεί να οριστεί ξεκάθαρα μόνο επιλύνοντάς το ή λύνοντας μέρος αυτού. Αυτό το παράδοξο ουσιαστικά υπονοεί ότι ένα κακόβουλο πρόβλημα  
πρέπει να επιλυθεί μία φορά για να οριστεί σαφώς και μετά να επιλυθεί ξανά για να δημιουργηθεί μια λειτουργική λύση. Αυτή η παρατήρηση έχει καθιστεί ιδιαίτερα 
σημαντική για τους σχεδιαστές λογισμικού για αρκετές δεκαετίες.

## Αφαίρεση και Ενθυλάκωση

Η αφαίρεση (abstraction) είναι μια αναγκαία τεχνική στον τομέα της επίλυσης προβλημάτων. Αναφέρεται τόσο στη διαδικασία όσο και στο αποτέλεσμα της γενίκευσης μειώνοντας τις πληροφορίες
μιας έννοιας, ενός προβλήματος ή ενός παρατηρούμενου φαινομένου, έτσι ώστε να μπορούμε να επικεντρωθούμε στην "μεγάλη εικόνα" (big picture). Ένα από τα σημαντικότερα προσόντα σε 
οποιοδήποτε τομέα μηχανικής είναι η ορθή διαμόρφωση των επιπέδων αφαίρεσης.
"Μέσω της αφαίρεσης", σύμφωνα με τον Voland, "βλέπουμε το πρόβλημα και τις δυνατές διαδρομές λύσης του από ένα υψηλότερο επίπεδο κατανόησης του εννοιολογικού πλαισίου.
Ως αποτέλεσμα, μπορούμε να είμαστε πιο καλά προετοιμασμένοι για να αναγνωρίσουμε δυνητικές σχέσεις μεταξύ διαφορετικών πτυχών του προβλήματος και έτσι να δημιουργήσουμε πιο δημιουργικές λύσεις σχεδίασης".
Αυτό ισχύει ιδιαίτερα στην επιστήμη υπολογιστών (Computer Science) γενικότερα (όπως υλικό έναντι λογισμικού), και στις Τεχνολογίες Λογισμικού ειδικότερα (δομή δεδομένων έναντι ροής δεδομένων, κλπ.).

Σύμφωνα με τον Dijkstra, "Ο σκοπός της αφαίρεσης δεν είναι να είναι ασαφής, αλλά να δημιουργήσει ένα νέο σημασιολογικό επίπεδο στο οποίο μπορούμε να είμαστε απόλυτα ακριβείς" [7].