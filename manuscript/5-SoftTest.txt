# Έλεγχος λογισμικού {#softtesting}

## Ακρωνύμια

|API	|Application Program Interface
|TDD	|Test-Driven Development
|XP 	|Extreme Programming


## Εισαγωγή

Οι έλεγχοι λογισμικού αποτελούνται από τη *δυναμική* επικύρωση, ότι ένα 
σύστημα υπό δοκιμή (SUT) παρέχει *αναμενόμενες* συμπεριφορές σε ένα *πεπερασμένο*
σύνολο από περιπτώσεις δοκιμής, κατάλληλα *επιλεγμένες* από τον ως
συνήθως άπειρο τομέα εκτέλεσης.
Στην παραπάνω δήλωση, οι λέξεις σε πλάγια γραφή αντιστοιχούν σε βασικά
ζητήματα στην περιγραφή του γνωστικού πεδίου Έλεγχος Λογισμικού. Αυτοί 
οι όροι συζητούνται παρακάτω.

  * Σύστημα υπό Δοκιμή: Αυτός ο όρος μπορεί να αναφέρεται στο
  αντικείμενο ελέγχου, το οποίο θα μπορούσε να είναι ένα πρόγραμμα, ένα
  προϊόν λογισμικού, μια εφαρμογή, μια εφαρμογή προσανατολισμένη στις υπηρεσίες 
  (π.χ. υπηρεσίες ιστού, μικροϋπηρεσίες), ενδιάμεσο λογισμικό (Υλικό/Λογισμικό), 
  μια σύνθεση υπηρεσιών, ένα σύστημα, ένα σύστημα συστημάτων ή ένα Οικοσύστημα. 

  * Δοκιμαστική Περίπτωση: Μια δοκιμαστική περίπτωση αποτελεί τον προσδιορισμό όλων
  των οντοτήτων που είναι απαραίτητες για την εκτέλεση, όπως οι τιμές εισόδου, 
  οι συνθήκες εκτέλεσης και οι χρονικές συνθήκες, η διαδικασία δοκιμής και τα αναμενόμενα
  αποτελέσματα (π.χ. παραγόμενες τιμές, αλλαγές κατάστασης, μηνύματα εξόδου).
  Οι τιμές εισόδου από μόνες τους δεν είναι πάντα αρκετές για την περιγραφή των 
  δοκιμαστικών περιπτώσεων, διότι το σύστημα υπό δοκιμή μπορεί να αντιδράσει με 
  διαφορετικές συμπεριφορές στην ίδια είσοδο, ανάλογα, για παράδειγμα, με την κατάσταση
  του συστήματος ή τις συνθήκες του περιβάλλοντος. Ένα σύνολο δοκιμαστικών περιπτώσεων
  ονομάζεται συνήθως *σύνολο δοκιμών* (test suite).

  * Δυναμική: Η δυναμική επικύρωση απαιτεί την εκτέλεση του συστήματος υπό δοκιμή 
  σε ένα σύνολο δοκιμών. Οι στατικές τεχνικές συμπληρώνουν τις δυναμικές δοκιμές
  και καλύπτονται στην ενότητα Ποιότητα Λογισμικού.

  * Πεπερασμένο: Ακόμα και σε ένα απλό σύστημα υπό δοκιμή, η εκτέλεση όλων των 
  δυνατών δοκιμαστικών περιπτώσεων (δηλαδή η εξαντλητική δοκιμή) θα μπορούσε να 
  διαρκέσει μήνες ή και χρόνια. Συνεπώς, στην πράξη, οι δοκιμές στοχεύουν σε ένα
  υποσύνολο από όλες τις δυνατές δοκιμαστικές περιπτώσεις που καθορίζονται από διαφορετικά
  κριτήρια. Η δοκιμή αποτελεί πάντα έναν συμβιβασμό μεταξύ περιορισμένων πόρων και 
  προγραμματισμένων χρονοδιαγραμμάτων αφενός και απαραίτητων απεριόριστων απαιτήσεων δοκιμής αφετέρου.

  * Επιλεγμένες: Ο εντοπισμός του καταλληλότερου κριτηρίου επιλογής υπό δεδομένες 
  συνθήκες είναι ένα πολύπλοκο πρόβλημα. Διάφορες τεχνικές μπορούν να ληφθούν υπόψη και 
  να συνδυαστούν για να αντιμετωπιστεί αυτό το πρόβλημα, όπως η ανάλυση κινδύνου, 
  οι απαιτήσεις λογισμικού, η μείωση κόστους, η ικανοποίηση χαρακτηριστικών ποιότητας, ο καθορισμός 
  προτεραιότητας και η ανίχνευση αποτυχιών. Οι πολλές προτεινόμενες τεχνικές ελέγχου διαφέρουν 
  στον τρόπο με τον οποίο επιλέγεται το σύνολο δοκιμών, και οι μηχανικοί λογισμικού πρέπει να
  γνωρίζουν ότι διαφορετικά κριτήρια επιλογής μπορεί να οδηγήσουν σε πολύ διαφορετικούς βαθμούς αποτελεσματικότητας.

  * Αναμενόμενες: Για κάθε εκτελεσθείσα δοκιμή, πρέπει να είναι δυνατό, αν και 
  δεν είναι πάντα εύκολο, να αποφασιστεί εάν τα παρατηρούμενα αποτελέσματα του 
  συστήματος υπό δοκιμή αντιστοιχούν στα αναμενόμενα. Πράγματι, η παρατηρούμενη
  συμπεριφορά μπορεί να ελεγχθεί έναντι των αναγκών του χρήστη (συνήθως αναφέρεται
  ως έλεγχος επικύρωσης), έναντι μιας προδιαγραφής (έλεγχος επαλήθευσης) ή ίσως έναντι
  της προβλεπόμενης συμπεριφοράς από τις σιωπηρές απαιτήσεις ή προσδοκίες.
 (βλ. Ενότητα 4.3, Προδιαγραφή Απαιτήσεων Βασισμένη σε Κριτήρια Αποδοχής στο 
 γνωστικό πεδίο Απαιτήσεις λογισμικού).

Όπως φαίνεται και από αυτήν τη συζήτηση, ο έλεγχος λογισμικού είναι μια διαδεδομένη 
και ολιστική δραστηριότητα που περιλαμβάνει όλα τα βήματα του κύκλου ζωής ανάπτυξης
μιας διεργασίας (π.χ. παραδοσιακή ανάπτυξη ή ανάπτυξη αριστερής μετατόπισης). 
Το υπόλοιπο του κεφαλαίου παρουσιάζει τα βασικά στοιχεία του ελέγχου λογισμικού και 
τις προκλήσεις του, θέματα και κοινώς αποδεκτές πρακτικές και λύσεις.


## Κατανομή των θεμάτων για τον έλεγχο λογισμικού

{id="fig-softtest-tree"}
![Σχήμα 5.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Έλεγχος λογισμικού.](images/5-SoftTest.png)

Στο [Σχήμα 1](#fig-softtest-tree) απεικονίζεται η κατανομή των θεμάτων
για τα γνωστικά πεδία του ελέγχου λογισμικού.

Ο πίνακας των Θεμάτων έναντι των Αναφορικών Υλικών παρέχει μια πιο 
λεπτομερή ανάλυση στο τέλος αυτής της ενότητας.

Το πρώτο θέμα, οι βασικές αρχές στον έλεγχο λογισμικού, καλύπτει
τους βασικούς ορισμούς στο πεδίο Έλεγχος Λογισμικού, τη βασική
ορολογία, τα βασικά ζητήματα και τη σχέση των δοκιμών λογισμικού με
άλλες δραστηριότητες.

Το δεύτερο θέμα, Επίπεδα Δοκιμών, περιλαμβάνει δύο (ορθογώνια)
υποθέματα. Το πρώτο υπο-θέμα, o στόχος του ελέγχου, καταγράφει 
τα επίπεδα στα οποία παραδοσιακά διαχωρίζονται οι δοκιμές μεγάλων 
λογισμικών, και το δεύτερο υπο-θέμα, οι Στόχοι Ελέγχου, αφορά
τις δοκιμές υπό συγκεκριμένων συνθηκών ή ιδιοτήτων.
Δεν εφαρμόζονται όλοι οι τύποι δοκιμών σε κάθε προϊόν λογισμικού,
ούτε και καταγράφεται κάθε πιθανός τύπος.

Ο στόχος και ο σκοπός του ελέγχου μαζί καθορίζουν πως ορίζεται το
σύνολο δοκιμών, αναφορικά με την συνοχή του (πόσες δοκιμές είναι
αρκετές για την επίτευξη του καθορισμένου σκοπού;) όσο και  με τη
σύνθεση του (ποιες περιπτώσεις δοκιμών πρέπει να επιλεχθούν για την
επίτευξη του καθορισμένου σκοπού;). (Παρ'όλα αυτά, συνήθως, η τοποθέτηση 
« για την επίτευξη του καθορισμένου σκοπού » παραμένει υπονοουμένη και
τίθεται μόνο το πρώτο μέρος των δύο παραπάνω ερωτήσεων).
Τα κριτήρια, που απευθύνονται στην πρώτη ερώτηση, είναι τα κριτήρια
επάρκειας ελέγχου, ενώ αυτά που απευθύνονται στη δεύτερη ερώτηση
είναι τα κριτήρια επιλογής ελέγχου.

Αρκετές Τεχνικές Δοκιμών έχουν αναπτυχθεί τις τελευταίες δεκαετίες
και ακόμη προτείνονται νέες.
Συνεπώς, το τρίτο θέμα καλύπτει γενικώς αποδεκτές και τυποποιημένες τεχνικές.

Οι μετρικές, που σχετίζονται με τον έλεγχο, αντιμετωπίζονται στο τέταρτο
θέμα, ενώ θέματα σχετικά με τη διεργασία ελέγχου καλύπτονται στο πέμπτο.

Ο Έλεγχος Λογισμικού στις Διαδικασίες Ανάπτυξης και τους Τομείς Εφαρμογής 
περιγράφεται στο έκτο θέμα, και ο Έλεγχος των και μέσω Αναδυόμενων Τεχνολογιών 
περιγράφεται στο έβδομο θέμα.

Τέλος, τα εργαλεία ελέγχου λογισμικού παρουσιάζονται στο όγδοο θέμα.

## Βασικές αρχές  στον έλεγχο λογισμικού

Αυτή η ενότητα παρέχει μια επισκόπηση των ζητημάτων που αφορούν το κύριο έλεγχοο 
και τη σχέση του ελέγχου με τις άλλες δραστηριότητες. Οι περισσότεροι όροι ελέγχου που 
χρησιμοποιούνται εδώ επίσης ορίζονται. 
Μια πιο κατανοητική επισκόπηση της ορολογίας που σχετίζεται με τον έλεγχο μπορεί 
να βρεθεί στις αναφορές.

### Σφάλματα έναντι αποτυχιών

Πολλοί όροι χρησιμοποιούνται στη βιβλιογραφία τεχνολογίας λογισμικού
για να περιγράψουν μια δυσλειτουργία: ιδίως η έννοια του **σφάλματος** 
(βλ. για σύγκριση, τον όρο **ελάττωμα** στην Ενότητα 3.2, Χαρακτηρισμός Ελαττωμάτων
στην Ποιότητα Λογισμικού), της **αποτυχίας** και του **λάθους**. 

Είναι απαραίτητος ο ξεκάθαρος διαχωρισμός μεταξύ της **αιτίας** μιας δυσλειτουργίας 
(για την οποία χρησιμοποιείται ο όρος **σφάλμα**) και ενός ανεπιθύμητου
αποτελέσματος που παρατηρείται στη διανεμόμενη υπηρεσία του συστήματος (μια **αποτυχία**). 
Πράγματι, μπορεί να υπάρχουν σφάλματα στο λογισμικό, τα οποία δεν εκδηλώνονται 
ποτέ ως αποτυχίες (βλ. θέμα [Θεωρητικοί και πρακτικοί περιορισμοί του ελέγχου](#theor-practical-limit-testing),
στην Ενότητα 1.2.8).
Ως εκ τούτου, οι δοκιμές μπορούν να αποκαλύψουν αποτυχίες, αλλά τα
σφάλματα που τα προκαλούν είναι αυτά που μπορούν και πρέπει να αφαιρεθούν.

Πάραυτα, πρέπει να αναγνωριστεί ότι η αιτία της αποτυχίας δεν μπορεί
να καθοριστεί απερίφραστα. Γενικά, δεν υπάρχουν θεωρητικά κριτήρια
τα οποία να μπορούν να προσδιορίσουν οριστικά το σφάλμα που προκάλεσε
μια παρατηρούμενη αποτυχία. Το σφάλμα μπορεί να πρέπει να τροποποιηθεί 
για να αφαιρεθεί η αποτυχία, αλλά και άλλες τροποποιήσεις μπορεί να δουλεύουν.
Για να αποφευχθεί η **ασάφεια**, μπορεί κάποιος να αναφερθεί σε **αποτυχίες
προκαλούμενες από εισροές** αντί σφαλμάτων, αυτά τα σύνολα εισόδων
που προκάλεσαν την αποτυχία.


### Βασικά ζητήματα {#key-iss-test}

Αυτή η υποκατηγορία παρέχει μία επισκόπηση των κύριων θεμάτων ελέγχου.

#### Δημιουργία Περιπτώσεων Ελέγχου

Η **δημιουργία** ή **παραγωγή περιπτώσεων ελέγχου** (test case) δημιουργεί το σύνολο 
δοκιμών (test suite) που είναι χρήσιμο για τον έλεγχο του συστήματος υπό δοκιμή (SUT) 
για συγκεκριμένους σκοπούς (π.χ. καταλληλότητα, ακρίβεια ή αξιολόγηση).
Καθώς η παραγωγή περιπτώσεων ελέγχου είναι μία από τις πιο σημαντικές και εντατικές 
δραστηριότητες του ελέγχου λογισμικού, συνήθως υποστηρίζεται από προσεγγίσεις, 
τεχνικές και εργαλεία για την αυτοματοποίηση της διαδικασίας.

#### Κριτήρια επιλογής και επάρκειας ελέγχου 

Ένα κριτήριο επιλογής ελέγχου είναι ένα μέσο για την επιλογή των περιπτώσεων
ελέγχου ή για τον καθορισμό ότι ένα σύνολο δοκιμών είναι
επαρκές για έναν συγκεκριμένο σκοπό. Η επιλογή των περιπτώσεων ελέγχου,
αποσκοπεί στο να μειώσει την πληθικότητα (cardinality) του συνόλου δοκιμών ενώ
ταυτόχρονα να διατηρήσει την ίδια αποτελεσματικότητα σε όρους κάλυψης ή 
ρυθμού ανίχνευσης αποτυχιών. Τα κριτήρια επάρκειας ελέγχου μπορούν να 
χρησιμοποιηθούν για να αποφασιστεί πότε επιτεύχθηκε επαρκής δοκιμή.

#### Προτεραιοποίηση/Ελαχιστοποίηση

Μπορούν να υιοθετηθούν κατάλληλες στρατηγικές για την επιλογή ή 
την προτεραιοποίηση των δοκιμαστικών περιπτώσεων προκειμένου να βελτιωθεί 
η αποτελεσματικότητα της δοκιμής. Η **προτεραιοποίηση** των δοκιμαστικών περιπτώσεων 
αποσκοπεί στον καθορισμό μιας σειράς εκτέλεσης ελέγχων σύμφωνα με κάποια κριτήρια 
(π.χ. κάλυψη, ρυθμός ανίχνευσης αποτυχιών, ομοιότητα και κίνδυνος), ώστε 
τα τεστ με υψηλότερη προτεραιότητα να εκτελούνται πριν από αυτά με χαμηλότερη προτεραιότητα.
Η ελαχιστοποίηση των περιπτώσεων δοκιμής συνήθως στοχεύει στο να μειώσει ένα σύνολο δοκιμών 
αφαιρώντας τα περιττά τεστ σύμφωνα με κάποιο κριτήριο ή σκοπό.

### Σκοπός του Ελέγχου

Διαφορετικοί καλά ορισμένοι σκοποί μπορούν να καθοδηγήσουν τη δραστηριότητα των ελέγχων:
είναι μόνο μέσω της εξέτασης ενός συγκεκριμένου σκοπού ότι ένα σύνολο δοκιμών μπορεί να 
δημιουργηθεί (επιλεγεί), εκτελεστεί, και αξιολογηθεί (βλ. Ενότητα 2 για περισσότερες λεπτομέρειες).

### Αξιολόγηση και Πιστοποίηση

Ο έλεγχος πρέπει να επικεντρώνεται σε συγκεκριμένες (υποχρεωτικές) προδιαγραφές, όπως απαιτήσεις, 
νόμους και πρότυπα. Οι περιπτώσεις δοκιμών πρέπει να δημιουργούνται και να εκτελούνται για να 
παρέχουν αποδείξεις που είναι χρήσιμες για την αξιολόγηση και/ή την πιστοποίηση της συμμόρφωσης
με τις επιλεγμένες προδιαγραφές. Συνήθως, η αξιολόγηση και η πιστοποίηση των αποτελεσμάτων των ελέγχων
περιλαμβάνουν την επαλήθευση ότι οι περιπτώσεις δοκιμών έχουν προέλθει και δημιουργηθεί χρησιμοποιώντας 
τις αρχικές απαιτήσεις, υιοθετώντας ένα διαδικαστικό έλεγχο διαμόρφωσης (configuration control process) 
και χρησιμοποιώντας επαναλήψιμες διαδικασίες.

### Διαδικασία ελέγχου για την Βελτίωση/Εξασφάλιση της ποιότητας

Η διαδικασία ελέγχου (testing) έχει πολλές πτυχές, συμπεριλαμβανομένων της βελτίωσης και εξασφάλισης της ποιότητας.
Αυτά τα χαρακτηριστικά περιλαμβάνουν σχεδιασμένες και συστηματικές διαδικασίες υποστήριξης και δραστηριότητες 
που επιδιώκουν να επιτύχουν εμπιστοσύνη ότι το σύστημα υπό δοκιμή (SUT) πληροί καθορισμένες τεχνικές ή ποιοτικές 
απαιτήσεις. Έτσι, η **βελτίωση** και **εξασφάλιση** της ποιότητας περιλαμβάνουν τον καθορισμό μεθόδων, εργαλείων, 
δεξιοτήτων και πρακτικών για την επίτευξη συγκεκριμένου επιπέδου ποιότητας και στόχων. Η λίστα των κύριων 
χαρακτηριστικών ποιότητας που μπορεί να μετρήσει ή να αξιολογήσει η διαδικασία ελέγχου αναφέρεται στο 
πρότυπο ISO/IEC 25010:2011 [9]. (βλ. Ενότητα 1.3.2, Ποιότητα Προϊόντος Λογισμικού, στο γνωστικό πεδίο Ποιότητα Λογισμικού.)

#### Το πρόβλημα του χρησμού (The Oracle Problem)

Ένα σημαντικό στοιχείο της διαδικασίας ελέγχου είναι ο χρησμός (oracle). Πράγματι, μια δοκιμή έχει νόημα μόνο αν είναι 
δυνατόν να αποφανθεί η παρατηρηούμενη έκβασή της. Ο χρησμός μπορεί να είναι οποιοσδήποτε ανθρώπινος ή μηχανικός παράγοντας 
που αποφασίζει εάν το σύστημα υπό δοκιμή (SUT) συμπεριφέρθηκε σωστά σε κάθε δοκιμή και σύμφωνα με τα αναμενόμενα αποτελέσματα.
Συνεπώς, ο χρησμός παρέχει μια απόφαση "επιτυχίας" ή "αποτυχίας". Ο χρησμός δεν μπορεί πάντα να αποφασίσει: σε αυτές τις 
περιπτώσεις, το αποτέλεσμα της δοκιμής κατατάσσεται ως ακατάληκτο. Υπάρχουν πολλοί τύποι χρησμών - για παράδειγμα, 
σαφής προσδιορισμός προδιαγραφών, συμπεριφορικά μοντέλα και σημειώσεις κώδικα. Η αυτοματοποίηση των μηχανοποιημένων χρησμών
μπορεί να είναι δύσκολη και ακριβή.

#### Θεωρητικοί και πρακτικοί περιορισμοί {#theor-practical-limit-testing}

Η θεωρία των δοκιμών προειδοποιεί για απόδοση αδικαιολόγητης
εμπιστοσύνης σε μία σειρά επιτυχημένων δοκιμών. Δυστυχώς,
τα περισσότερα καθιερωμένα αποτελέσματα της θεωρίας των δοκιμών είναι τα
αρνητικά αποτελέσματα στα οποία αναφέρουν ό,τι δεν έχει επιτευχθεί,
σε αντίθεση με ότι πραγματικά έχει επιτευχθεί. Το πιο διάσημο σχετικό
απόσπασμα είναι το απόφθεγμα του Dijkstra ότι «οι δοκιμές του προγράμματος
μπορούν να χρησιμοποιηθούν για να δείξουν την παρουσία σφαλμάτων,
αλλά ποτέ για να δείξουν την απουσία τους». Ο προφανής λόγος γι' αυτό
είναι ότι πλήρεις δοκιμές δεν είναι εφικτές σε ρεαλιστικό λογισμικό.

#### Το πρόβλημα των ανέφικτων μονοπατιών

Τα ανέφικτα μονοπάτια είναι διαδρομές ροών ελέγχου, που δεν μπορούν να
εξεταστούν από κανένα δεδομένο εισόδου (π.χ. δοκιμές ελέγχου).
Η διαχείριση των ανέφικτων μονοπατιών μπορεί να βοηθήσει στη μείωση 
του χρόνου και των πόρων που απαιτούνται για τον έλεγχο του λογισμικού.
Είναι σημαντικό πρόβλημα οι δοκιμές που είναι βασισμένες σε μονοπάτια,
κυρίως σε αυτοματοποιημένη παραγωγή δοκιμαστικών δοκιμών ελέγχου
για την εξέταση διαδρομών ροών ελέγχου. Επιπλέον, οι ανέφικτες διαδρομές 
μπορούν επίσης να συνδεθούν με τη διαδικασία ανάλυσης και ανίχνευσης ευπαθειών ασφαλείας και 
μπορούν να βελτιώσουν την ακρίβεια.

#### Ελεγξιμότητα (Testability)

Ο όρος **ελεγξιμότητα λογισμικού** έχει δύο σχετικές μεταξύ τους αλλά
διαφορετικές ερμηνείες. Από τη μία πλευρά, αναφέρεται στην ευκολία
με την οποία ένα δεδομένο κριτήριο κάλυψης ελέγχου μπορεί να ικανοποιηθεί:
από την άλλη πλευρά, ορίζεται ως η πιθανότητα, πιθανόν μετρημένη στατιστικά,
ότι ένα σύνολο δοκιμών θα εκθέσει αστοχία εάν το λογισμικό
είναι ελαττωματικό. Και οι δύο ερμηνείες είναι σημαντικές.

#### Εκτέλεση και Αυτοματοποίηση Ελέγχου

Μια σημαντική πρόκληση της διαδικασίας ελέγχου είναι η βελτίωση της εφικτής αυτοματοποίησης,
είτε με την ανάπτυξη προηγμένων τεχνικών για τη δημιουργία των εισόδων ελέγχου είτε, πέρα ​​από τη δημιουργία των τεστ,
με την εύρεση καινοτόμων διαδικασιών υποστήριξης για την (πλήρη) αυτοματοποίηση των διαφορετικών δραστηριοτήτων του 
ελέγχου -  για παράδειγμα, για να αυξηθεί ο αριθμός των παραγόμενων ή εκτελούμενων περιπτώσεων ελέγχου.

#### Επεκτασιμότητα

Η επεκτασιμότητα αφορά την ικανότητα του λογισμικού να αυξάνει και να κλιμακώνει τις μη λειτουργικές του απαιτήσεις, 
όπως το oad, τον αριθμό των συναλλαγών και τον όγκο δεδομένων. Η επεκτασιμότητα συνδέεται επίσης με την πολυπλοκότητα 
της πλατφόρμας και του περιβάλλοντος στο οποίο εκτελείται το πρόγραμμα, όπως τα κατανεμημένα ασύρματα δίκτυα και τα 
εικονικά περιβάλλοντα, μεγάλης κλίμακας συμπλέγματα (large-scale clusters) και κινητά νέφη (mobile cloud).

#### Αποτελεσματικότητα ελέγχου

Η αξιολόγηση του συστήματος υπό δοκιμή (SUT), η μέτρηση της αποτελεσματικότητας μιας τεχνικής δοκιμής 
και η κρίση για το εάν η δοκιμή μπορεί να σταματήσει είναι σημαντικά ζητήματα για τον έλεγχο λογισμικού και 
μπορεί να απαιτήσουν τον καθορισμό και την επιλογή κατάλληλων μέτρων αποτελεσματικότητας δοκιμής.

#### Ελεγξιμότητα, Αναπαραγωγή και Γενίκευση 

* H **Ελεγξιμότητα** αναφέρεται στη μετάβαση των δραστηριοτήτων ελέγχου από το εργαστήριο 
(δηλαδή ελεγχόμενες συνθήκες) στην πραγματικότητα (δηλαδή ανεξέλεγκτες συνθήκες).
* Η **Αναπαραγωγή** αναφέρεται στην ικανότητα διαφορετικών ανθρώπων να εκτελούν τις ίδιες δοκιμαστικές δραστηριότητες. 
Ο σκοπός είναι να επαληθεύσουμε εάν μια δεδομένη θεωρία δοκιμών λειτουργεί, τουλάχιστον στο εργαστήριο.
* Η **γενίκευση** του τεστ είναι συνδεδεμένη με την εξωτερική έγκυροτητα - δηλαδή το μέτρο με το οποίο η προσέγγιση δοκιμών 
μπορεί να εφαρμοστεί σε ευρύτερες ρυθμίσεις ή στοχευμένους πληθυσμούς. Η γενικότητα του λογισμικού δοκιμής μπορεί να είναι 
σημαντική για τη διαχείριση των δραστηριοτήτων δοκιμής (σε όρους κόστους και προσπάθειας) και για την αύξηση της 
εμπιστοσύνης στα αποτελέσματα των δοκιμών.

#### Έλεγχος εκτός σύνδεσης (offline) έναντι ελέγχου σε πραγματικό χρόνο (online)

Η διαδικασία ελέγχου μπορεί να εκτελεστεί σε δύο περιβάλλοντα: έλεγχος *εκτός σύνδεσης* (offline) και έλεγχος σε *πραγματικό χρόνο* (online).
Συνήθως, το σύστημα υπό δοκιμή (SUT) επικυρώνεται σε ένα περιβάλλον χωρίς εξωτερική αλληλεπίδραση στον έλεγχο εκτός σύνδεσης,
ενώ το σύστημα υπό δοκιμή (SUT) αλληλεπιδρά με το πραγματικό περιβάλλον εφαρμογής στον έλεγχο σε πραγματικό χρόνο. 
Οι περιπτώσεις ελέγχου εξάγονται είτε χειροκίνητα είτε αυτόματα και στις δύο περιπτώσεις, και οι αναμενόμενοι έξοδοι χρησιμοποιούνται 
για να αξιολογηθεί το σύστημα υπό δοκιμή (SUT).

### Σχέση ελέγχου με άλλες δραστηριότητες

* Ο έλεγχος λογισμικού είναι συσχετισμένος, αλλά διαφορετικός από στατικές
  τεχνικές διοίκησης ποιότητας λογισμικού, αποδείξεις ορθότητας, αποτελμάτωση
  και κατασκευή προγράμματος.
  Ωστόσο, είναι κατατοπιστικό να αντιμετωπίσουμε τον έλεγχο από την
  οπτική των αναλυτών ποιότητας λογισμικού και όσων την πιστοποιούν.
  Για περισσότερη συζήτηση δείτε τα παρακάτω:

    * Δοκιμές έναντι Τεχνικών διαχείρισης ποιότητας στατικού λογισμικού:βλ. Ενότητα 2.2.1, 
    Τεχνικές Στατικής Ανάλυσης, στο γνωστικό πεδίο Ποιότητα λογισμικού.
    * Δοκιμές έναντι Βελτίωση/Βεβαιότητα Ποιότητας: βλ. Ενότητα 1.3.2, Ποιότητα Προϊόντος Λογισμικού,
    στο γνωστικό πεδίο Ποιότητα Λογισμικού.
    * Δοκιμές έναντι Αποδείξεων ορθότητας και επίσημης επαλήθευσης: βλ.
    στο γνωστικό πεδίο Μοντέλα και μέθοδοι τεχνολογίας λογισμικού.
    * Δοκιμές έναντι Διόρθωσης: βλ. Έλεγχοι κατασκευής στο γνωστικό πεδίο Κατασκευή λογισμικού
    και Εργαλεία και Τεχνικές Διόρθωσης στο γνωστικό πεδίο Υπολογιστικά Θεμέλια.
    * Δοκιμές έναντι Κατασκευής Προγράμματος: βλ. Έλεγχοι κατασκευής στο γνωστικό πεδίο Κατασκευή λογισμικού.
    * Δοκιμές έναντι Ασφάλειας: βλ. το νέο γνωστικό πεδίο: Ασφάλεια Λογισμικού.
    * Δοκιμές έναντι Εκτίμησης προσπάθειας: βλ. το γνωστικό πεδίο Διοίκηση Τεχνολογιών Λογισμικού.
    * Δοκιμές έναντι Νομικών Θεμάτων: βλ. το γνωστικό πεδίο Επαγγελματική Πρακτική Τεχνολογιών Λογισμικού.

## Επίπεδα ελέγχου {#level-test}

Οι δοκιμές λογισμικού συνήθως εκτελούνται σε διαφορετικά επίπεδα
κατά τις διαδικασίες ανάπτυξης και συντήρησης.
Τα επίπεδα μπορούν να διαχωριστούν βάσει του αντικειμένου των δοκιμών,
το οποίο ονομάζεται στόχος, ή βάσει της πρόθεσης, το οποίο ονομάζεται
σκοπός (των επιπέδων δοκιμών).

### Ο στόχος του ελέγχου 

Ο στόχος των δοκιμών μπορεί να ποικίλει: ένα δομοστοιχείο, μία ομάδα
τέτοιων δομοστοιχείων (συσχετισμένη με την αιτία, τη χρήση, τη συμπεριφορά
ή τη δομή) ή ένα ολόκληρο σύστημα. Τρία στάδια δοκιμών μπορούν να
διακριθούν:  μονάδα, ολοκλήρωση και σύστημα.
Αυτά τα τρία στάδια δοκιμών δεν συνεπάγονται κανένα μοντέλο διαδικασιών,
ούτε κάποιο είναι πιο σημαντικό από τα άλλα δύο.

####  Έλεγχος μονάδας {#unit-testing}

Ο έλεγχος μονάδας επαληθεύει τη λειτουργία απομονωμένα από τα στοιχεία
του λογισμικού που μπορούν να ελεγχθούν ξεχωριστά. Ανάλογα με το γενικό
πλαίσιο, αυτά θα μπορούσαν να είναι μεμονωμένα υποπρογράμματα ή μεγαλύτερα
εξαρτήματα του λογισμικού φτιαγμένα από υψηλά συνεκτικές μονάδες.
Τυπικά, ο έλεγχος μονάδας γίνεται με πρόσβαση στον κώδικα που ελέγχεται
και με την υποστήριξη των εργαλείων αποτελμάτωσης.
Οι προγραμματιστές που έγραψαν τον κώδικα τυπικά, αλλά όχι απαραίτητα,
συμβάλλουν στις δοκιμές.

####  Έλεγχος ολοκλήρωσης {#integr-testing}

Ο έλεγχος ολοκλήρωσης είναι η διαδικασία επαλήθευσης της αλληλεπίδρασης
μεταξύ των συστατικών στοιχείων του λογισμικού.
Κλασσικές στρατηγικές ελέγχου ολοκλήρωσης, όπως από πάνω προς τα κάτω
(top-down) και από βάση προς κορυφή (bottom-up),
χρησιμοποιούνται συχνά με ιεραρχικά δομημένο λογισμικό.

Μοντέρνες, συστηματικές στρατηγικές ολοκλήρωσης είναι τυπικά οδηγούμενες
από την αρχιτεκτονική, η οποία περιλαμβάνει εξελικτική ολοκλήρωση
των συστατικών στοιχείων ή υποσυστημάτων του λογισμικού βασισμένα
σε καθορισμένα λειτουργικά νήματα. Ο έλεγχος ολοκλήρωσης είναι συχνά
μία συνεχιζόμενη δραστηριότητα σε κάθε στάδιο ανάπτυξης κατά τη διάρκεια
του οποίου μηχανικοί λογισμικού αφαιρούν χαμηλού επιπέδου προοπτικές
και επικεντρώνονται στις προοπτικές επιπέδων τα οποία συνενώνουν.
Σε λογισμικά, όχι μικρά και απλά, οι στρατηγικές ελέγχου εξελικτικής
ολοκλήρωσης συνήθως προτιμώνται για την συνένωση όλων των στοιχείων
ταυτόχρονα -- το οποίο συνήθως ονομάζεται έλεγχος «big bang».

#### Έλεγχος συστήματος

Ο έλεγχος συστήματος αφορά δοκιμές της συμπεριφοράς ολόκληρου του
συστήματος. Ο αποτελεσματικός έλεγχος μονάδας και ολοκλήρωσης θα προσδιορίσει
πολλά ελαττώματα του λογισμικού. Ο έλεγχος συστήματος θεωρείται συνήθως
κατάλληλος για την αξιολόγηση των μη λειτουργικών απαιτήσεων του συστήματος
-- όπως ασφάλεια, ταχύτητα, ακρίβεια και αξιοπιστία (βλ. παράγραφο
[Λειτουργικές και μη λειτουργικές απαιτήσεις](#func-nonfun-req) στο γνωστικό πεδίο
Απαιτήσεις λογισμικού, καθώς και παράγραφο [Απαιτήσεις ποιότητας
λογισμικού](#quality-req) στο γνωστικό πεδίο Ποιότητα λογισμικού).
Επίσης, εξωτερικές διεπαφές σε άλλες εφαρμογές, χρησιμότητες, συσκευές
υλικού ή λειτουργικά περιβάλλοντα αξιολογούνται συνήθως σε αυτό το
επίπεδο.

### Σκοποί ελέγχου {#obj-testing}

Οι δοκιμές διεξάγονται από την οπτική των ειδικών σκοπών, οι οποίοι
αναφέρονται περισσότερο ή λιγότερο ρητά και με ποικίλους βαθμούς ακριβείας.
Δηλώνοντας τους σκοπούς των δοκιμών σε ακριβείς, ποσοτικούς όρους
υποστηρίζεται η μέτρηση και ο έλεγχος της διεργασίας ελέγχου.

Οι δοκιμές μπορούν να αποσκοπούν στην εξακρίβωση διαφορετικών ιδιοτήτων.
Περιπτώσεις  ελέγχου μπορούν να σχεδιαστούν για να βεβαιωθεί ότι οι
λειτουργικές προδιαγραφές είναι σωστά υλοποιημένες, το οποίο είναι
ποικιλοτρόπως αναφερόμενο στη βιβλιογραφία ως έλεγχος συμμόρφωσης,
διορθωτικός έλεγχος ή λειτουργικός έλεγχος. Ωστόσο, διάφορες άλλες
μη λειτουργικές ιδιότητες μπορούν να ελεγχθούν συμπεριλαμβανομένων
της απόδοσης, της αξιοπιστίας και χρηστικότητας, μεταξύ πολλών άλλων
(βλ.
παράγραφο [Μοντέλα και χαρακτηριστικά ποιότητας](#modattrb) στο γνωστικό πεδίο
Ποιότητα λογισμικού).

Άλλοι σημαντικοί σκοποί ελέγχου περιλαμβάνουν, αλλά δεν περιορίζονται
σε αυτούς, την μέτρηση αξιοπιστίας, τον προσδιορισμό των τρωτών σημείων
της ασφάλειας, την αξιολόγηση χρηστικότητας, και την αποδοχή του λογισμικού,
για τα οποία θα πρέπει να ληφθούν υπόψη διαφορετικές προσεγγίσεις.
Σημειώστε ότι, σε γενικές γραμμές, οι σκοποί ελέγχου ποικίλουν ανάλογα
με τον στόχο των δοκιμών, διαφορετικές επιδιώξεις απευθύνονται σε διαφορετικά
επίπεδα ελέγχου.

Τα επιμέρους θέματα, που αναγράφονται παρακάτω, είναι τα πλέον συχνά
αναφερόμενα στη βιβλιογραφία.
Σημειώστε ότι ορισμένα είδη των δοκιμών είναι καταλληλότερα για παραμετροποιημένα
πακέτα λογισμικού (για παράδειγμα, δοκιμές εγκατάστασης) και άλλα
για καταναλωτικά προϊόντα, όπως βήτα έλεγχος (betatesting).

####  Έλεγχος αποδοχής/πιστοποίησης

Ο Έλεγχος Αποδοχής/Πιστοποίησης καθορίζει αν ένα σύστημα ικανοποιεί
τα κριτήρια αποδοχής του, συνήθως ελέγχοντας τις επιθυμητές συμπεριφορές
του συστήματος ως προς τις απαιτήσεις του πελάτη. Ο πελάτης ή ένας εκπρόσωπος
του πελάτη προσδιορίζει με αυτόν τον τρόπο ή αναλαμβάνει άμεσα δραστηριότητες για
να ελέγξει ότι οι απαιτήσεις του ικανοποιήθηκαν, ή στην περίπτωση
ενός καταναλωτικού προϊόντος, ότι ο οργανισμός έχει εκπληρώσει τις
απαιτούμενες προϋποθέσεις για τη στοχευόμενη αγορά.
Αυτή η δραστηριότητα δοκιμών μπορεί είτε να αφορά τους προγραμματιστές
του συστήματος είτε όχι.

####  Έλεγχος εγκατάστασης

Συχνά, μετά την ολοκλήρωση του συστήματος και την αποδοχή των δοκιμών,
το λογισμικό επαληθεύεται κατά την εγκατάσταση στο στοχευόμενο περιβάλλον.
Οι δοκιμές εγκατάστασης μπορούν να θεωρηθούν ως δοκιμές του συστήματος
διεξαγόμενες στο λειτουργικό περιβάλλον των διαμορφώσεων υλικών και
άλλων λειτουργικών περιορισμών.
Οι διαδικασίες εγκατάστασης μπορούν επίσης να επαληθεύονται.

####  Έλεγχος άλφα βήτα

Πριν την κυκλοφορία του λογισμικού, μερικές φορές δίνεται σε μια μικρή,
επιλεγμένη ομάδα δυνητικών χρηστών για δοκιμαστική χρήση (δοκιμή άλφα)
και/ή σε ένα μεγαλύτερο σύνολο αντιπροσωπευτικών χρηστών (δοκιμή βήτα).
Αυτοί οι χρήστες αναφέρουν προβλήματα σχετικά με το προϊόν.
Οι δοκιμές άλφα και βήτα είναι συχνά μη ελεγχόμενες και δεν αναφέρεται
πάντα σε ένα σχέδιο δοκιμής.

####  Επίτευξη και αξιολόγηση αξιοπιστίας {#reliab-achiev-eval}

Οι δοκιμές βελτιώνουν την αξιοπιστία μέσω του προσδιορισμού και της
διόρθωσης των λαθών. Επιπρόσθετα, στατιστικά μέτρα αξιοπιστίας μπορούν
να προκύψουν από την τυχαία παραγωγή περιπτώσεων δοκιμών σύμφωνα με
το λειτουργικό προφίλ του λογισμικού (βλ. παράγραφο [Λειτουργικό προφίλ](#operat-profil),
στην ενότητα Τεχνικές βάσει χρήσης). Η δεύτερη προσέγγιση
ονομάζεται λειτουργική δοκιμή. Χρησιμοποιώντας μοντέλα ανάπτυξης
της αξιοπιστίας, και οι δύο αυτοί σκοποί μπορούν να επιδιωχθούν από
κοινού. (βλ.
παράγραφο [Δοκιμή ζωής/Αξιολόγηση αξιοπιστίας](#lifetest-reliabevaluat), στην ενότητα Αξιολόγηση
του υπό εξέταση προγράμματος).

####  Έλεγχος παλινδρόμησης {#regg-testing}

Ο έλεγχος παλινδρόμησης είναι η «επιλεκτική επανεξέταση του συστήματος
ή ενός μέρους του για να επαληθευτεί πως οι τροποποιήσεις δεν έχουν
προκαλέσει ακούσια επίδραση και ότι το σύστημα ή το μέρος του συστήματος
(που εξετάζεται) εξακολουθεί να συμμορφώνεται με τις καθορισμένες
απαιτήσεις του». Στην πράξη, η προσέγγιση θέλει να δείξει ότι το λογισμικό
εξακολουθεί να περνά ελέγχους που έχει περάσει και στο παρελθόν σε
μια σειρά ελέγχων (στην πραγματικότητα, επίσης μερικές φορές αναφέρεται
ως έλεγχος μη παλινδρόμησης).  Για εξελικτική ανάπτυξη, η επιδίωξη
του ελέγχου παλινδρόμησης θέλει να δείξει ότι η συμπεριφορά του λογισμικού
είναι αμετάβλητη από σταδιακές αλλαγές στο λογισμικό, εκτός από το
βαθμό που πρέπει να γίνουν. Σε μερικές περιπτώσεις, πρέπει να γίνει
ένα αντιστάθμισμα μεταξύ της διαβεβαίωσης από τον έλεγχο παλινδρόμησης
κάθε φορά που γίνεται μια αλλαγή και των πόρων που απαιτούνται για
την εκτέλεση των ελέγχων παλινδρόμησης, η οποία μπορεί να είναι αρκετά
χρονοβόρα λόγω του μεγάλου αριθμού των δοκιμών που μπορούν να εκτελεστούν.
Ο έλεγχος παλινδρόμησης περιλαμβάνει την επιλογή, την ελαχιστοποίηση
ή/και την ιεράρχηση ενός υποσυνόλου περιπτώσεων ελέγχου σε μία υπάρχουσα
σειρά ελέγχων.
Οι έλεγχοι παλινδρόμησης μπορούν να εκτελεστούν σε καθένα από τα επίπεδα
ελέγχων που περιγράφονται στην ενότητα Ο στόχος του ελέγχου
και μπορούν να εφαρμοστούν σε λειτουργικές και μη λειτουργικές δοκιμές.

####  Έλεγχος απόδοσης

Ο έλεγχος απόδοσης επιβεβαιώνει ότι το λογισμικό πληροί τις καθορισμένες
απαιτήσεις απόδοσης και αξιολογεί χαρακτηριστικά της απόδοσης, για
παράδειγμα την ικανότητα και τον χρόνο ανταπόκρισης.

####  Έλεγχος ασφάλειας

Ο έλεγχος ασφάλειας εστιάζει στην επαλήθευση ότι το λογισμικό προστατεύεται
από εξωτερικές επιθέσεις. Συγκεκριμένα, ο έλεγχος ασφάλειας επαληθεύει
την εμπιστευτικότητα, την ακεραιότητα και την διαθεσιμότητα του συστήματος
και των δεδομένων του.
Συνήθως, ο έλεγχος ασφάλειας περιλαμβάνει την επαλήθευση κατά της
κακομεταχείρισης και κατάχρησης του λογισμικού ή του συστήματος (αρνητικός έλεγχος).

####  Δοκιμές καταπόνησης

Οι δοκιμές καταπόνησης εξετάζουν το λογισμικό στο μέγιστο φορτίο σχεδιασμού,
καθώς και πέρα από αυτό, με στόχο τον καθορισμό των ορίων της συμπεριφοράς,
καθώς και για τον έλεγχο των μηχανισμών άμυνας σε κρίσιμα συστήματα.

####  Διαδοχικές δοκιμές

Το πρότυπο IEEE/ISO/IEC 24765 ορίζει τις διαδοχικές δοκιμές ως
«δοκιμές κατά τις οποίες δύο ή περισσότερες παραλλαγές ενός προγράμματος
εκτελούνται με τις ίδιες τιμές εισόδου, τα αποτελέσματα συγκρίνονται,
και τα λάθη αναλύονται σε περίπτωση ασυμφωνίας».

####  Έλεγχος ανάκτησης

Ο έλεγχος ανάκτησης έχει ως στόχο την επαλήθευση δυνατοτήτων επανεκκίνησης
του λογισμικού μετά από κατάρρευση του συστήματος ή άλλης «καταστροφής».

#### Έλεγχος διεπαφών

Ελαττώματα στη διεπαφή είναι συνηθισμένα σε πολύπλοκα συστήματα. Ο
έλεγχος διεπαφών αποσκοπεί στην επαλήθευση ότι τα συστατικά της διεπαφής
παρέχουν σωστά τη σωστή ανταλλαγή δεδομένων και τον έλεγχο πληροφοριών.
Συνήθως οι περιπτώσεις ελέγχου δημιουργούνται από τις προδιαγραφές
της διεπαφής. Ένας συγκεκριμένος σκοπός των ελέγχων διεπαφών είναι
να προσομοιώσουν την χρήση APIs με εφαρμογές τελικού χρήστη.
Αυτό συμπεριλαμβάνει τη δημιουργία παραμέτρων των κλήσεων API, τη
ρύθμιση των εξωτερικών συνθηκών του περιβάλλοντος, καθώς και τον ορισμό
εσωτερικών δεδομένων που επηρεάζουν το API.

#### Έλεγχος σχηματισμών

Σε περιπτώσεις όπου το λογισμικό έχει κατασκευαστεί για να εξυπηρετήσει
διάφορους χρήστες, ο έλεγχος σχηματισμών επαληθεύει το λογισμικό κάτω
από διαφορετικούς καθορισμένους σχηματισμούς.

####  Έλεγχος ευχρηστίας και αλληλεπίδρασης ανθρώπου-υπολογιστή

Το κύριο καθήκον του ελέγχου ευχρηστίας και αλληλεπίδρασης ανθρώπου-υπολογιστή
είναι να αξιολογήσει πόσο εύκολο είναι για τους τελικούς χρήστες να
μάθουν και να χρησιμοποιούν το λογισμικό. Σε γενικές γραμμές, μπορεί
να περιλαμβάνει έλεγχο των λειτουργιών του λογισμικού που υποστηρίζει
τις εργασίες των χρηστών, τεκμηρίωση που βοηθά τους χρήστες, καθώς
και την ικανότητα του συστήματος να επανέλθει από τα λάθη των χρηστών.
(βλ. ενότητα [Σχεδίαση διεπαφής χρήστη](#design-us-interface), στο γνωστικό πεδίο Σχεδιασμός
λογισμικού)

## Τεχνικές ελέγχου {#tech-testing}


Ένας από τους στόχους των δοκιμών είναι να ανιχνεύσουν όσο το δυνατόν
πιο πολλές αποτυχίες. Πολλές τεχνικές έχουν αναπτυχθεί για να γίνει
αυτό.
Οι τεχνικές αυτές προσπαθούν να «σπάσουν» ένα πρόγραμμα όντας όσο
το δυνατόν πιο συστηματικές στον προσδιορισμό των εισόδων που θα παράξουν
αντιπροσωπευτικές συμπεριφορές του προγράμματος, για παράδειγμα εξετάζοντας
υποκλάσεις του τομέα των εισροών, σεναρίων, καταστάσεων και ροών δεδομένων.

Η κατηγοριοποίηση των τεχνικών ελέγχου που παρουσιάζεται εδώ, βασίζεται
στο πώς δημιουργούνται οι δοκιμές: από τη διαίσθηση και την εμπειρία
του μηχανικού λογισμικού, τις προδιαγραφές, τη δομή του κώδικα, τα
πραγματικά ή φανταστικά σφάλματα που θα ανακαλυφθούν, την προβλεπόμενη
χρήση, τα μοντέλα ή τη φύση της εφαρμογής.
Μία κατηγορία ασχολείται με τη συνδυαστική χρήση δύο ή περισσοτέρων
τεχνικών.

Κάποιες φορές αυτές οι τεχνικές κατηγοριοποιούνται ως άσπρο-κουτί
(ονομαζόμενο επίσης και γυάλινο-κουτί), αν οι δοκιμές βασίζονται
σε πληροφορίες για το πώς το λογισμικό έχει σχεδιαστεί ή κωδικοποιηθεί,
ή ως μαύρο-κουτί, αν οι περιπτώσεις δοκιμής βασίζονται μόνο στη
συμπεριφορά εισόδου/εξόδου του λογισμικού.
Η παρακάτω λίστα περιλαμβάνει εκείνες τις τεχνικές δοκιμών που χρησιμοποιούνται
συνήθως, αλλά μερικοί επαγγελματίες βασίζονται σε κάποιες από τις
τεχνικές περισσότερο από άλλες.

### Βασιζόμενοι στη διαίσθηση και την εμπειρία του μηχανικού λογισμικού

####  Ad Hoc

Ίσως, η πιο ευρέως διαδεδομένη πρακτική τεχνική είναι οι ad hoc δοκιμές:
οι δοκιμές που προέρχονται επικαλούμενες τις δεξιότητες του μηχανικού
λογισμικού, τη διαίσθηση και την εμπειρία με παρόμοια προγράμματα.
Οι ad hoc δοκιμές μπορούν να είναι χρήσιμες για την ταυτοποίηση των
περιπτώσεων ελέγχου που δεν παράγονται εύκολα από πιο επίσημες τεχνικές.

####  Διερευνητικές δοκιμές

Οι διερευνητικές δοκιμές ορίζονται ως η ταυτόχρονη μάθηση, σχεδιασμός
των δοκιμών, και εκτέλεση δοκιμών, δηλαδή, οι δοκιμές δεν είναι εκ
των προτέρων προσδιορισμένες σε ένα καθιερωμένο σχέδιο δοκιμών, αλλά
δυναμικά σχεδιάζονται, εκτελούνται, και τροποποιούνται.
Η αποτελεσματικότητα των διερευνητικών δοκιμών βασίζεται στη γνώση
του μηχανικού λογισμικού, η οποία μπορεί να προέρχεται από διάφορες
πηγές: παρατηρούμενη συμπεριφορά του προϊόντος κατά τη διάρκεια των
δοκιμών, η εξοικείωση με την εφαρμογή, την πλατφόρμα, την διεργασία
αποτυχίας, τον τύπο των πιθανών σφαλμάτων και αποτυχιών, τον κίνδυνο
που συνδέεται με ένα συγκεκριμένο προϊόν, και ούτω καθεξής.

### Τεχνικές βάσει πεδίου ορισμού εισόδου


#### Ισοδυναμία διαμερισμών

Η ισοδυναμία διαμερισμών συνεπάγεται την κατάτμηση του τομέα εισόδου
σε μια συλλογή από υποσύνολα (ή ισοδύναμες κλάσεις) με βάση ένα συγκεκριμένο
κριτήριο ή σχέση. Αυτό το κριτήριο ή η σχέση μπορεί να είναι διαφορετικά
υπολογιστικά αποτελέσματα, μια σχέση που βασίζεται στην ροή ελέγχου
ή δεδομένων ή μια διάκριση που γίνεται μεταξύ έγκυρων εισροών, οι
οποίες είναι αποδεκτές και επεξεργασμένες από το σύστημα, και άκυρων
εισροών, όπως τιμές εκτός του πεδίου τιμών, που δεν είναι αποδεκτές
και θα πρέπει να δημιουργήσουν ένα λάθος μήνυμα ή να ξεκινήσει η διαδικασία
σφάλματος.
Ένα αντιπροσωπευτικό σύνολο δοκιμών (μερικές φορές μόνο ένα) λαμβάνεται
συνήθως από κάθε κλάση ισοδυναμίας.

#### Ζεύγη ελέγχου

Οι περιπτώσεις ελέγχου προκύπτουν από το συνδυασμό ενδιαφερουσών τιμών
για κάθε ζεύγος ενός συνόλου μεταβλητών εισόδου αντί να λαμβάνονται
υπόψη όλοι οι δυνατοί συνδυασμοί.
Τα ζεύγη ελέγχου ανήκουν στις συνδυαστικές δοκιμές, οι οποίες σε γενικές
γραμμές περιλαμβάνουν επίσης συνδυασμούς υψηλότερου επιπέδου από τα
Ζεύγη (pairwise): οι τεχνικές αυτές αναφέρονται ως t-wise,
δηλαδή, κάθε πιθανός συνδυασμός t μεταβλητών εισόδου λαμβάνεται
υπόψη.

#### Ανάλυση ακραίων τιμών

Οι περιπτώσεις ελέγχου επιλέγονται πάνω ή κοντά στα όρια των πεδίων
ορισμού των μεταβλητών εισόδου, με το σκεπτικό ότι πολλά λάθη τείνουν
να συγκεντρώνονται κοντά στις ακραίες τιμές εισόδου.
Μία επέκταση αυτής της τεχνικής είναι ο έλεγχος ευρωστίας, όπου οι
περιπτώσεις ελέγχου επίσης επιλέγονται έξω από το πεδίο ορισμού των
μεταβλητών εισόδου για να ελέγξουν την ευρωστία του προγράμματος με
την επεξεργασία απροσδόκητων ή εσφαλμένων εισόδων.

#### Έλεγχος τυχαίων τιμών

Οι δοκιμές δημιουργούνται καθαρά τυχαία (να μην συγχέεται με
τις στατιστικές δοκιμές από το λειτουργικό προφίλ, όπως περιγράφεται
στην ενότητα [Λειτουργικό προφίλ](#operat-profil)). Αυτή η μορφή ελέγχου εμπίπτει
στην κατηγορία έλεγχος πεδίου ορισμού εισόδου, δεδομένου ότι η είσοδος
του τομέα πρέπει να είναι γνωστή προκειμένου να είναι δυνατόν να επιλεχθούν
τυχαία σημεία μέσα σε αυτό. Ο έλεγχος τυχαίων τιμών παρέχει μια σχετικά
απλή προσέγγιση για την αυτοματοποίηση των δοκιμών. Πρόσφατα έχουν
προταθεί βελτιωμένες μορφές τυχαίων δοκιμών, στις οποίες η τυχαία
δειγματοληψία εισόδου κατευθύνεται από άλλα κριτήρια επιλογής εισόδου.
Ο έλεγχος Fuzz (σημ.
χνούδι) ή fuzzing είναι μια ειδική μορφή των ελέγχων τυχαίων τιμών,
που στοχεύει να σπάσει το λογισμικό, πιο συχνά χρησιμοποιείται για
τον έλεγχο ασφαλείας.

### Τεχνικές βασισμένες στον κώδικα


#### Κριτήρια βάσει ροής ελέγχου

Τα κριτήρια κάλυψης ροών ελέγχου έχουν ως στόχο την κάλυψη όλων των
καταστάσεων, των μπλοκ των καταστάσεων, ή συγκεκριμένους συνδυασμούς
των καταστάσεων σε ένα πρόγραμμα. Το ισχυρότερο από τα κριτήρια με
βάση τη ροή του ελέγχου είναι ο έλεγχος μονοπατιού, ο οποίος έχει
ως στόχο να εκτελέσει όλες τις διαδρομές ροής ελέγχου από την είσοδο
μέχρι την έξοδο στο γράφο/διάγραμμα ροής ελέγχου ενός προγράμματος. Εφόσον οι
εξαντλητικές δοκιμές μονοπατιού δεν είναι εφικτές εξαιτίας βρόγχων,
άλλα λιγότερο αυστηρά κριτήρια επικεντρώνονται στην κάλυψη των μονοπατιών,
που περιορίζουν τις επαναλήψεις στον βρόχο όπως κάλυψη δήλωσης, κάλυψη
μέρους και δοκιμές κατάστασης/απόφασης.
Η επάρκεια αυτών των δοκιμών μετράται σε ποσοστά, για παράδειγμα όταν
όλα τα μέρη έχουν εκτελεστεί τουλάχιστον μία φορά από τις δοκιμές,
έχει επιτευχθεί 100% κάλυψη μέρους.

#### Κριτήρια βάσει ροής δεδομένων

Στις δοκιμές ροών δεδομένων, το διάγραμμα ροής ελέγχου περιέχει πληροφορίες
σχετικά με το πώς οι μεταβλητές του προγράμματος δηλώνονται, χρησιμοποιούνται
και «σκοτώνονται».
Το πιο ισχυρό κριτήριο, τα μονοπάτια όλων των δηλώσεων-χρήσεων (alldefinition-usepaths),
απαιτεί, για κάθε μεταβλητή, κάθε ακμή του μονοπατιού του ελέγχου ροής
από τη δήλωση της μεταβλητής μέχρι και τη χρήση της δήλωσης αυτής,
να εκτελείται. Προκειμένου να περιοριστεί ο αριθμός των μονοπατιών 
που απαιτούνται, χρησιμοποιούνται πιο αδύναμες στρατηγικές, όπως τα
μονοπάτια όλων των δηλώσεων (all-definitions) και τα μονοπάτια
όλων των χρήσεων (all-uses).

#### Μοντέλα αναφοράς για έλεγχο βάσει κώδικα

Αν και δεν αποτελεί τεχνική από μόνη της, η δομή του ελέγχου ενός
προγράμματος μπορεί να αναπαρασταθεί γραφικά χρησιμοποιώντας ένα διάγραμμα
ροής ώστε να οπτικοποιηθούν τεχνικές ελέγχου βάσει κώδικα. Ένα διάγραμμα
ροής είναι ένας κατευθυνόμενος γράφος, του οποίου οι κόμβοι και οι
ακμές αντιστοιχούν στα στοιχεία του προγράμματος.
Για παράδειγμα, οι κόμβοι μπορεί να αναπαριστούν καταστάσεις ή συνεχόμενες
ακολουθίες καταστάσεων, ενώ οι ακμές μπορεί να αναπαριστούν τη μεταφορά
του ελέγχου μεταξύ των κόμβων.

### Τεχνικές βάσει σφαλμάτων {#techn-test-error}


Με διαφορετικούς βαθμούς τυποποίησης, οι τεχνικές ελέγχου που βασίζονται
σε σφάλματα αναπτύσσουν περιπτώσεις ελέγχου με ειδικό στόχο την αποκάλυψη
κατηγοριών πιθανών ή προκαθορισμένων σφαλμάτων.
Για να επικεντρωθεί καλύτερα η παραγωγή ή επιλογή περιπτώσεων ελέγχου,
ένα μοντέλο σφαλμάτων μπορεί να εισαχθεί έτσι ώστε να γίνεται η κατηγοριοποίηση
των διαφορετικών ειδών σφαλμάτων.

#### Πρόβλεψη σφαλμάτων

Σε αυτή την τεχνική, οι περιπτώσεις ελέγχου είναι ειδικά σχεδιασμένες
από τους μηχανικούς λογισμικού που προσπαθούν να προβλέψουν τα πιο
πιθανά σφάλματα σε ένα ήδη γνωστό πρόγραμμα.
Μια καλή πηγή πληροφορίας είναι το ιστορικό των σφαλμάτων που εντοπίστηκαν
σε παλαιότερα έργα, καθώς και η εμπειρία του μηχανικού λογισμικού.

#### Έλεγχος μετάλλαξης {#mutation-testing}


Μια μετάλλαξη είναι μια ελαφρά τροποποιημένη έκδοση του προγράμματος
υπό δοκιμή, η οποία διαφέρει κατά μια μικρή συντακτική αλλαγή από
το αρχικό πρόγραμμα. Κάθε περίπτωση ελέγχου εκτελεί και το αρχικό
πρόγραμμα και όλες τις παραγόμενες μεταλλάξεις. Συγκεκριμένα, αν μια
περίπτωση ελέγχου είναι επιτυχής στο να βρίσκει τη διαφορά μεταξύ
του αρχικού προγράμματος και της μετάλλαξης, η μετάλλαξη θεωρείται
ότι έχει «σκοτωθεί». Αν και αρχικά είχε αναπτυχθεί ως τεχνική για
την αξιολόγηση συνόλων ελέγχου (βλ. παράγραφο [Αξιολόγηση 
πραγματοποιημένων ελέγχων](#eval-perf-test)), ο έλεγχος μετάλλαξης αποτελεί και ένα
κριτήριο δοκιμών από μόνος του. Αυτό συμβαίνει γιατί είτε οι δοκιμές
παράγονται τυχαία μέχρις ότου όλες οι μεταλλάξεις να έχουν σκοτωθεί,
είτε οι δοκιμές σχεδιάζονται ειδικά για να σκοτώσουν μεταλλάξεις που
επιζούν ακόμη. Στην τελευταία περίπτωση, η δοκιμή μετάλλαξης μπορεί,
επίσης, να κατηγοριοποιηθεί ως μια τεχνική βασισμένη σε κώδικα.
Η βασική παραδοχή του ελέγχου μετάλλαξης (το αποτέλεσμα της σύζευξης)
είναι ότι ψάχνοντας για απλά συντακτικά σφάλματα, πιο σύνθετα αλλά
πραγματικά σφάλματα μπορεί να εντοπιστούν.
Για να είναι αποτελεσματική η τεχνική, ένας μεγάλος αριθμός μεταλλάξεων
πρέπει να παραχθεί αυτόματα και να εκτελεστεί με συστηματικό τρόπο.


### Τεχνικές βάσει χρήσης {#techn-use}

#### Λειτουργικό προφίλ {#operat-profil}


Στις δοκιμές για την αξιολόγηση της αξιοπιστίας (γνωστοί και ως λειτουργικοί
έλεγχοι), το περιβάλλον ελέγχου αναπαράγει το λειτουργικό περιβάλλον
του λογισμικού ή αλλιώς το λειτουργικό προφίλ, όσο το δυνατόν καλύτερα.
Ο στόχος είναι, από τα δεδομένα που θα παρατηρηθούν από την δοκιμή,
να μπορεί κανείς να αποφανθεί για τη μελλοντική αξιοπιστία του λογισμικού,
όταν θα βρίσκεται σε πραγματική χρήση. Για να επιτευχθεί αυτό,
στις εισόδους έχουν εκχωρηθεί πιθανότητες ή προφίλ, ανάλογα με τη
συχνότητα εμφάνισής τους στην πραγματική λειτουργία.
Τα λειτουργικά προφίλ μπορούν να χρησιμοποιηθούν κατά τη διάρκεια
του ελέγχου του συστήματος για να καθοδηγήσουν την παραγωγή περιπτώσεων
ελέγχου, οι οποίες θα αξιολογήσουν την επίτευξη των στόχων αξιοπιστίας,
καθώς και θα εξετάσουν τη σχετική χρήση και κρισιμότητα των διαφόρων
λειτουργιών παρόμοιων με αυτά που θα συναντήσουμε στο λειτουργικό περιβάλλον.

#### Ευρετικοί μηχανισμοί παρατήρησης χρήστη

Οι αρχές ευχρηστίας μπορούν να παρέχουν κατευθυντήριες γραμμές για
την ανακάλυψη προβλημάτων στον σχεδιασμό της διεπαφής χρήστη (βλ. ενότητα
[Σχεδίαση διεπαφής χρήστη](#design-us-interface), στο γνωστικό πεδίο Σχεδιασμός λογισμικού).
Εξειδικευμένες ευρετικές, που αποκαλούνται και μέθοδοι ελέγχου ευχρηστίας,
εφαρμόζονται για τη συστηματική παρατήρηση της χρήσης του συστήματος
κάτω από ελεγχόμενες συνθήκες, έτσι ώστε να προσδιοριστεί πόσο καλά
οι χρήστες μπορούν να χρησιμοποιήσουν το σύστημα και τις διεπαφές
του.
Οι ευρετικές ευχρηστίας περιλαμβάνουν το γνωστικό περιδιάβασμα, την
ανάλυση ισχυρισμών, την παρατήρηση πεδίου, τα ομιλούντα υποκείμενα,
καθώς και έμμεσες προσεγγίσεις, όπως ερωτηματολόγια και συνεντεύξεις
χρηστών.

### Τεχνικές βάσει μοντέλου

Ένα μοντέλο σε αυτή την περίπτωση είναι μία αφηρημένη (τυπική) αναπαράσταση
του λογισμικού που ελέγχεται ή των απαιτήσεων λογισμικού του (βλ.
ενότητα [Μοντελοποίηση](#modeling) στο γνωστικό πεδίο Μοντέλα και μέθοδοι της
τεχνολογίας λογισμικού). Ο έλεγχος βάσει μοντέλου χρησιμοποιείται
για την επικύρωση των απαιτήσεων, τον έλεγχο της συνέπειας τους, καθώς
και για την παραγωγή περιπτώσεων ελέγχου, που επικεντρώνονται στις
πτυχές της συμπεριφοράς του λογισμικού. Τα βασικά συστατικά στοιχεία
του ελέγχου με βάση το μοντέλο είναι: ο συμβολισμός που χρησιμοποιείται
για την αναπαράσταση του μοντέλου του λογισμικού ή των απαιτήσεων
του, τα μοντέλα ροής εργασίας ή παρόμοια μοντέλα, η στρατηγική ελέγχου
ή ο αλγόριθμος που χρησιμοποιήθηκε για την παραγωγή περιπτώσεων ελέγχου,
η υποστηρικτική δομή για την εκτέλεση του ελέγχου, καθώς και η αξιολόγηση
των αποτελεσμάτων της δοκιμής σε σύγκριση με τα αναμενόμενα αποτελέσματα.
Λόγω της πολυπλοκότητας των τεχνικών, οι προσεγγίσεις του ελέγχου
βάσει μοντέλου συχνά χρησιμοποιούνται σε συνδυασμό με αυτόματες δοκιμές. 
Οι τεχνικές ελέγχου με βάση το μοντέλο περιλαμβάνουν τα παρακάτω.

#### Πίνακες αποφάσεων

Οι πίνακες αποφάσεων αντιπροσωπεύουν λογικές συσχετίσεις μεταξύ συνθηκών
(εισόδων) και ενεργειών (εξόδων). Οι περιπτώσεις ελέγχου προέρχονται
συστηματικά από την εξέταση κάθε πιθανού συνδυασμού συνθηκών και των
αντίστοιχων ενεργειών που προκύπτουν.
Μια σχετική τεχνική είναι το γράφημα αίτιου-αιτιατού (Cause-effect graphing).

#### Μηχανή πεπερασμένων καταστάσεων

Μοντελοποιώντας ένα πρόγραμμα ως μια μηχανή πεπερασμένων καταστάσεων,
οι δοκιμές μπορούν να επιλεχθούν έτσι ώστε να καλύπτουν όλες τις καταστάσεις
και τις μεταβάσεις.

#### Τυπικές προδιαγραφές

Η δήλωση των προδιαγραφών σε μια τυπική γλώσσα (βλ.
παράγραφο [Τυπικές μέθοδοι](#formal-meth) στο γνωστικό πεδίο Μοντέλα και μέθοδοι
της τεχνολογίας λογισμικού) επιτρέπει την αυτόματη παραγωγή περιπτώσεων
λειτουργικών ελέγχων και, την ίδια στιγμή, παρέχει έναν χρησμό για την
αξιολόγηση των αποτελεσμάτων τους.

Η TTCN3 (Testing and Test Control Notation version 3) είναι μια γλώσσα
που αναπτύχθηκε για τη συγγραφή περιπτώσεων ελέγχου. Ο συμβολισμός
επινοήθηκε για τις ανάγκες ελέγχου ενός συγκεκριμένου τηλεπικοινωνιακού
συστήματος.
Για τον λόγο αυτό, είναι ιδιαίτερα κατάλληλη για τη δοκιμή πολύπλοκων
επικοινωνιακών πρωτοκόλλων.

#### Μοντέλα ροών εργασίας

Τα μοντέλα ροών εργασίας καθορίζουν τη σειρά των δραστηριοτήτων που
εκτελούνται από τους ανθρώπους ή/και τις εφαρμογές του λογισμικού
και συνήθως αποτυπώνονται μέσω γραφικών συμβολισμών. Κάθε σειρά δραστηριοτήτων
αποτελεί μια ροή εργασίας (ονομάζεται και σενάριο). Τόσο η τυπική
όσο και η εναλλακτική ροή εργασίας πρέπει να ελέγχονται.
Ιδιαίτερη έμφαση δίνεται στους ρόλους των προδιαγραφών της ροής εργασίας
κατά τη διαδικασία του επιχειρηματικού ελέγχου.

### Τεχνικές βάσει της φύσης της εφαρμογής

Οι παραπάνω τεχνικές εφαρμόζονται σε όλα τα είδη λογισμικού. Αντίστοιχες
τεχνικές για την παραγωγή και εκτέλεση ελέγχων βασίζονται στη φύση
του λογισμικού που ελέγχεται.
Για παράδειγμα:

  * αντικειμενοστραφές λογισμικό (object-oriented)
  * λογισμικό που βασίζεται σε συστατικά στοιχεία(component-based)
  * λογισμικό βασισμένο στο διαδίκτυο (web-based)
  * συντρέχοντα προγράμματα (concurrent) 
  * λογισμικό που βασίζεται σε πρωτόκολλα (protocol-based)
  * συστήματα πραγματικού χρόνου (real-time)
  * συστήματα κρίσιμα για την ασφάλεια (safety-critical)
  * λογισμικό υπηρεσιακοστραφές (service-oriented)
  * λογισμικό ανοιχτού κώδικα (open-source)
  * ενσωματωμένο λογισμικό (embedded)

### Επιλογή και συνδυασμός τεχνικών

#### Συνδυάζοντας λειτουργικότητα και δομή

Οι τεχνικές δοκιμών βάσει μοντέλου και κώδικα αντιπαραβάλλονται συνήθως
ως λειτουργικός έναντι δομικού ελέγχου. Οι δύο αυτές προσεγγίσεις
για την επιλογή ελέγχου δεν θα πρέπει να θεωρηθούν ως εναλλακτικές,
αλλά ως συμπληρωματικές. Στην πραγματικότητα, χρησιμοποιούν διαφορετικές
πηγές πληροφοριών και έχει αποδειχθεί ότι τονίζουν διαφορετικά είδη
προβλημάτων.
Οι τεχνικές αυτές θα μπορούσαν να χρησιμοποιηθούν σε συνδυασμό, ανάλογα
με τις εκτιμήσεις του προϋπολογισμού.


#### Ντετερμινιστική και τυχαία επιλογή

Οι περιπτώσεις ελέγχου μπορεί να επιλεχθούν με ντετερμινιστικό τρόπο,
σύμφωνα με μία από τις πολλές τεχνικές ή τυχαία προερχόμενες από την
κατανομή εισόδων, όπως γίνεται συνήθως στις δοκιμές αξιοπιστίας.
Αρκετές αναλυτικές και εμπειρικές συγκρίσεις έχουν διεξαχθεί για να
αναλύσουν τις συνθήκες που κάνουν τη μια προσέγγιση πιο αποτελεσματική
από την άλλη.

## Μετρικές σχετικές με τον έλεγχο

Μερικές φορές οι τεχνικές ελέγχου συγχέονται με τους στόχους των δοκιμών.
Οι τεχνικές ελέγχου μπορούν να θεωρηθούν ως βοηθήματα για τη διασφάλιση
της επίτευξης των στόχων της δοκιμής. Για παράδειγμα, η κάλυψη των
διακλαδώσεων είναι μια δημοφιλής τεχνική ελέγχου. Η επίτευξη της κάλυψης
μιας συγκεκριμένης διακλάδωσης κατά ποσοστό, για παράδειγμα 95%, δεν
θα πρέπει να είναι ο μόνος στόχος της δοκιμής. Αντιθέτως, η δοκιμή
είναι ένας τρόπος για τη βελτίωση των πιθανοτήτων να βρεθούν σφάλματα
κατά τη συστηματική προσπάθεια να ελεγχθούν όλες οι διακλαδώσεις του
προγράμματος σε κάθε σημείο απόφασης.
Για την αποφυγή παρεξηγήσεων, θα πρέπει να γίνει μια σαφής διάκριση
μεταξύ των μετρικών που είναι σχετικές με τις δοκιμές, που παρέχουν
μια αξιολόγηση του προγράμματος υπό εξέταση με βάση τα παρατηρούμενα
αποτελέσματα του ελέγχου, καθώς και των μετρικών που αξιολογούν την
πληρότητα του συνόλου του ελέγχου.

Η μέτρηση θεωρείται συνήθως θεμελιώδης για την ανάλυση ποιότητας.
Η μέτρηση μπορεί επίσης να χρησιμοποιηθεί για την βελτιστοποίηση του
σχεδιασμού και της εκτέλεσης του ελέγχου. Η διαχείριση των δοκιμών
μπορεί να χρησιμοποιήσει πολλές διαφορετικές μετρικές διεργασιών για
να παρακολουθεί την πρόοδο (βλ.
παράγραφο [Πρακτικές θεωρήσεις](#prac-cons-test) για μια συζήτηση μετρικών των
διαδικασιών ελέγχου χρήσιμες για το σκοπό της διοίκησης).

### Αξιολόγηση του υπό εξέταση προγράμματος {#eval-test-prog}

#### Μετρικές προγράμματος υποστηρικτικές στον προγραμματισμό και σχεδιασμό των ελέγχων

Μετρικές βασισμένες στο μέγεθος του λογισμικού (για παράδειγμα στον
αριθμό γραμμών κώδικα ή στο λειτουργικό μέγεθος) ή μετρικές βασισμένες
στη δομή του προγράμματος, μπορούν να καθοδηγήσουν τον έλεγχο.
Δομικές μετρικές περιλαμβάνουν επίσης μετρήσεις που καθορίζουν τη
συχνότητα με την οποία δομοστοιχεία μπορούν να καλούν το ένα το άλλο.

#### Τύποι σφαλμάτων, ταξινόμηση και στατιστικά

Η βιβλιογραφία του ελέγχου είναι πλούσια σε κατηγοριοποιήσεις και
ταξινομήσεις σφαλμάτων. Για να γίνει πιο αποτελεσματική η δοκιμή,
είναι σημαντικό να γνωρίζουμε  ποια είδη σφαλμάτων μπορούν να βρεθούν
στο λογισμικό που ελέγχεται και τη σχετική συχνότητα με την οποία
αυτά τα σφάλματα έχουν εμφανιστεί στο παρελθόν. Αυτή η πληροφορία
μπορεί να είναι χρήσιμη για προβλέψεις ποιότητας, καθώς και για τη
βελτίωση της διαδικασίας (βλ.
παράγραφο [Χαρακτηρισμός σφαλμάτων](#charact-defect), στο γνωστικό πεδίο Ποιότητα
λογισμικού).

#### Πυκνότητα σφαλμάτων

Ένα πρόγραμμα υπό εξέταση μπορεί να αξιολογηθεί μετρώντας τα σφάλματα
που εντοπίστηκαν, ως ο λόγος μεταξύ των σφαλμάτων αυτών προς 
το μέγεθος του προγράμματος.

#### Δοκιμή ζωής/Αξιολόγηση αξιοπιστίας {#lifetest-reliabevaluat}      

Μια στατιστική εκτίμηση της αξιοπιστίας του λογισμικού, η οποία μπορεί
να αποκτηθεί από την παρατήρηση της αξιοπιστίας που έχει επιτευχθεί,
μπορεί να χρησιμοποιηθεί για την αξιολόγηση ενός προϊόντος λογισμικού
και για την απόφαση σχετικά με το αν θα πρέπει ή όχι να σταματήσουμε
τον έλεγχο (βλ.
θέμα [Επίτευξη και αξιολόγηση αξιοπιστίας](#reliab-achiev-eval)).

#### Μοντέλα αύξησης αξιοπιστίας

Τα μοντέλα αύξησης της αξιοπιστίας παρέχουν μια πρόβλεψη αξιοπιστίας
βασισμένη σε σφάλματα. Υποθέτουν, σε γενικές γραμμές, ότι όταν τα
σφάλματα, τα οποία προκάλεσαν την παρατηρούμενη αποτυχία, έχουν διορθωθεί
(αν και μερικά μοντέλα αποδέχονται ατελείς διορθώσεις), τότε η εκτιμώμενη
αξιοπιστία του προϊόντος εμφανίζει, κατά μέσο όρο, μια αυξανόμενη
τάση. Υπάρχουν πολλά δημοσιευμένα μοντέλα αύξησης της αξιοπιστίας.
Κυρίως, τα μοντέλα αυτά χωρίζονται σε μοντέλα που μετρούν την αποτυχία
(failure-count) και σε μοντέλα που μετράνε τον χρόνο μεταξύ
αποτυχίας (time-between-failure).

### Αξιολόγηση πραγματοποιημένων ελέγχων {#eval-perf-test}

#### Κάλυψη/Πληρότητα μέτρων

Διάφορα κριτήρια επάρκειας των δοκιμών απαιτούν ότι οι περιπτώσεις
ελέγχου συστηματικά ελέγχουν ένα σύνολο από στοιχεία, τα οποία προσδιορίζονται
στο πρόγραμμα ή στις προδιαγραφές (βλ. ενότητα [Τεχνικές ελέγχου](#tech-testing)).
Για να αξιολογηθεί η πληρότητα των εκτελεσμένων δοκιμών, οι μηχανικοί
λογισμικού μπορούν να παρακολουθούν τα στοιχεία που έχουν καλυφθεί
για να μπορούν δυναμικά να υπολογίζουν τον λόγο μεταξύ των καλυφθέντων
στοιχείων προς τον συνολικό αριθμό των στοιχείων. Για παράδειγμα, είναι
δυνατόν να υπολογιστεί το ποσοστό των διακλαδώσεων που καλύφθηκαν
στο διάγραμμα ροής του προγράμματος ή το ποσοστό των λειτουργικών
απαιτήσεων που ελέγχθηκαν σε σχέση με το σύνολο των απαιτήσεων που
απαριθμούνται στο έγγραφο Προδιαγραφών.
Τα κριτήρια επάρκειας που βασίζονται σε κώδικα απαιτούν κατάλληλη
οργάνωση του υπό δοκιμή προγράμματος.

#### Σπορά σφαλμάτων

Στη σπορά σφαλμάτων, μερικά σφάλματα εισάγονται τεχνητά σε ένα πρόγραμμα
πριν αυτό ελεγχθεί. Όταν εκτελεστεί η δοκιμή, μερικά από τα σπαρμένα
σφάλματα θα αποκαλυφθούν καθώς και κάποια άλλα σφάλματα που προϋπήρχαν.
Στη θεωρία, ανάλογα με το ποια και πόσα από τα τεχνητά σφάλματα εντοπίζονται,
μπορεί να αξιολογηθεί η αποτελεσματικότητα της δοκιμής καθώς και να
εκτιμηθεί ο αριθμός των υπολειπόμενων σφαλμάτων. Στην πράξη, οι στατιστικολόγοι
αμφισβητούν την κατανομή και την αντιπροσωπευτικότητα των σπαρμένων
σφαλμάτων σε σχέση με τα πραγματικά σφάλματα και το μικρό μέγεθος
του δείγματος στο οποίο βασίζονται οι αναγωγές.
Μερικοί, επίσης, ισχυρίζονται ότι αυτή η τεχνική θα πρέπει να χρησιμοποιείται
με μεγάλη προσοχή, καθώς η εισαγωγή σφαλμάτων στο λογισμικό περιλαμβάνει
τον προφανή κίνδυνο να ξεχάσουμε να τα αφαιρέσουμε μετά τη δοκιμή.

#### Βαθμός μετάλλαξης

Στον έλεγχο μετάλλαξης  (βλ.
[Έλεγχος μετάλλαξης](#mutation-testing) στην παράγραφο Τεχνικές βάσει σφαλμάτων),
ο λόγος των «σκοτωμένων» μεταλλάξεων  προς το συνολικό αριθμό των
παραγόμενων μεταλλάξεων μπορεί να αποτελέσει ένα μέτρο αποτελεσματικότητας
της εκτελούμενης δοκιμής.

#### Σύγκριση και σχετική αποτελεσματικότητα διάφορων τεχνικών

Διάφορες μελέτες έχουν διεξαχθεί προκειμένου να συγκριθεί η σχετική
αποτελεσματικότητα των διαφόρων τεχνικών ελέγχου. Είναι σημαντικό
να υπάρχει ακρίβεια ως προς την ιδιότητα με την οποία αξιολογούνται
οι τεχνικές. Ποια, για παράδειγμα, είναι η ακριβής έννοια του όρου
«αποτελεσματικότητα»; Πιθανές ερμηνείες περιλαμβάνουν τον αριθμό των
δοκιμών που απαιτούνται για να βρεθεί το πρώτο σφάλμα, το λόγο του
αριθμού των σφαλμάτων που εντοπίστηκαν κατά τη δοκιμή προς τον συνολικό
αριθμό των σφαλμάτων που εντοπίστηκαν κατά τη διάρκεια και μετά τη
δοκιμή, καθώς και κατά πόσο έχει βελτιωθεί η αξιοπιστία.
Αναλυτικές και εμπειρικές συγκρίσεις μεταξύ διαφόρων τεχνικών έχουν
διεξαχθεί σύμφωνα με καθεμία από τις παραπάνω έννοιες της αποτελεσματικότητας. 

## Διεργασία ελέγχου

Οι έννοιες του ελέγχου, οι στρατηγικές, οι τεχνικές και οι μετρικές
πρέπει να ενσωματωθούν σε μια καθορισμένη και ελεγχόμενη διεργασία.
Η διεργασία ελέγχου υποστηρίζει δραστηριότητες δοκιμών και παρέχει
καθοδήγηση στους ελεγκτές και στις ομάδες ελέγχου, από τον σχεδιασμό
των δοκιμών μέχρι την αξιολόγηση των αποτελεσμάτων τους, με τέτοιο
τρόπο, ώστε να παρέχεται διαβεβαίωση ότι οι στόχοι της δοκιμής θα καλυφθούν
με έναν οικονομικά αποδοτικό τρόπο.

### Πρακτικές θεωρήσεις {#prac-cons-test}


#### Συμπεριφορές/Προγραμματισμός χωρίς εγωκεντρισμό

Ένα σημαντικό στοιχείο μιας επιτυχημένης δοκιμής είναι η συνεργατική
συμπεριφορά προς τις δραστηριότητες ελέγχου και τη διασφάλιση ποιότητας.
Οι διευθυντές κατέχουν βασικό ρόλο στην προώθηση μιας, γενικά, ευνοϊκής
στάσης σχετικά με τον εντοπισμό σφαλμάτων και τη διόρθωση τους κατά
την ανάπτυξη και συντήρηση του λογισμικού.
Για παράδειγμα, αυτό μπορεί να επιτευχθεί ξεπερνώντας τη νοοτροπία
της ατομικής ιδιοκτησίας κώδικα ανάμεσα σε προγραμματιστές και προωθώντας
ένα περιβάλλον συνεργασίας με ομαδική ευθύνη για προβλήματα στον κώδικα.
Το ιδεατό αυτό ονομάζεται προγραμματισμός χωρίς εγωκεντρισμό
(egoless programming).

#### Οδηγοί ελέγχου

Οι φάσεις ελέγχου μπορούν να καθοδηγούνται από διάφορους στόχους.
Για παράδειγμα, δοκιμές βασισμένες στον κίνδυνο χρησιμοποιούν την επικινδυνότητα
του προϊόντος για να δώσουν προτεραιότητες και για να εστιάσουν στη
στρατηγική ελέγχου.
Από την άλλη, δοκιμές βασισμένες σε σενάρια καθορίζουν τις περιπτώσεις
ελέγχου βάσει καθορισμένων σεναρίων του λογισμικού.

#### Διοίκηση διεργασίας ελέγχου

Οι δραστηριότητες ελέγχου που πραγματοποιούνται σε διάφορα επίπεδα
(βλ.
ενότητα [Επίπεδα ελέγχου](#level-test)) πρέπει να οργανωθούν από κοινού με τους
ανθρώπους, τα εργαλεία, τις πολιτικές και τις μετρικές σε μία καλά
καθορισμένη διεργασία που αποτελεί αναπόσπαστο κομμάτι του κύκλου
ζωής.

#### Τεκμηρίωση ελέγχων και προϊόντα εργασίας

Η τεκμηρίωση αποτελεί αναπόσπαστο κομμάτι της τυποποίησης της διεργασίας
ελέγχου. Τα έγγραφα δοκιμών μπορούν να περιλαμβάνουν, μεταξύ άλλων,
το σχέδιο ελέγχου, τις προδιαγραφές σχεδιασμού ελέγχου, τις προδιαγραφές
διαδικασίας ελέγχου, τις προδιαγραφές των περιπτώσεων ελέγχου, το
αρχείο καταγραφής ελέγχου, καθώς και την έκθεση με τα περιστατικά που
συνέβησαν κατά τις δοκιμές. Το υπό δοκιμή λογισμικό τεκμηριώνεται
ως στοιχείο ελέγχου. Η τεκμηρίωση του ελέγχου πρέπει να παράγεται
και, συνεχώς, να ενημερώνεται στο ίδιο επίπεδο ποιότητας με τα άλλα
είδη εγγράφων τεκμηρίωσης της τεχνολογίας λογισμικού. Επιπλέον, η
τεκμηρίωση του ελέγχου θα πρέπει να είναι υπό τον έλεγχο της διοίκησης 
της σύνθεσης του λογισμικού (βλ. στο γνωστικό πεδίο [Διαχείριση Σχηματισμών
Λογισμικού](#softconfigmng)).
Επίσης, η τεκμηρίωση αυτή, περιλαμβάνει προϊόντα εργασίας που μπορούν
να προσφέρουν υλικό για εγχειρίδια χρηστών και για την εκπαίδευση
τους.

#### Ανάπτυξη οδηγούμενη από τον έλεγχο (TDD)

Η ανάπτυξη που καθοδηγείται από τον έλεγχο (TDD) ξεκίνησε ως μία από
τις βασικές πρακτικές του ακραίου προγραμματισμού (XP-extreme programming)
και περιλαμβάνει τη συγγραφή ελέγχου μονάδων πριν τη συγγραφή του
κώδικα που θα ελεγχθεί. Με αυτόν τον τρόπο, η καθοδηγούμενη από δοκιμές
ανάπτυξη, αναπτύσσει τις περιπτώσεις ελέγχου ως υποκατάστατο του εγγράφου
απαιτήσεων λογισμικού και όχι ως ανεξάρτητο έλεγχο που διαβεβαιώνει
ότι το λογισμικό έχει υλοποιήσει σωστά τις απαιτήσεις. Αντί μιας στρατηγικής
ελέγχου, η καθοδηγούμενη από τον έλεγχο ανάπτυξη είναι μια πρακτική,
όπου χρειάζεται οι προγραμματιστές να καθορίζουν και να διατηρούν
ελέγχους μονάδων.
Ως εκ τούτου, μπορεί να υπάρχει θετικό αντίκτυπο στην επεξεργασία
των αναγκών των χρηστών και στις προδιαγραφές των απαιτήσεων λογισμικού.

#### Εσωτερική έναντι ανεξάρτητης ομάδας ελέγχου

Η τυποποίηση της διεργασίας ελέγχου μπορεί επίσης να περιλαμβάνει
την τυποποίηση της οργάνωσης της ομάδας ελέγχου. Η ομάδα ελέγχου μπορεί
να αποτελείται από εσωτερικά μέλη (που ανήκουν στην ομάδα του έργου
και που μπορεί να συμμετέχουν ή όχι στην ανάπτυξη του λογισμικού),
από εξωτερικά μέλη (με την ελπίδα ότι θα φέρουν μια αμερόληπτη και 
ανεξάρτητη προοπτική) ή και από τα δύο.
Εκτιμήσεις κόστους, προγραμματισμού, επίπεδου ωριμότητας των εμπλεκόμενων
οργανισμών και κρισιμότητας της εφαρμογής, μπορούν να καθοδηγήσουν
την απόφαση.

#### Εκτίμηση κόστους/Προσπάθειας και μετρικές διεργασίας ελέγχου

Αρκετές μετρικές που σχετίζονται με τους πόρους που δαπανώνται κατά
τη διάρκεια του ελέγχου, όπως και αυτές που σχετίζονται με την αποτελεσματικότητα
εύρεσης σφαλμάτων στις διάφορες φάσεις των δοκιμών, χρησιμοποιούνται
από τους διευθυντές για τον έλεγχο και τη βελτίωση της διεργασίας
ελέγχου.
Αυτές οι μετρικές ελέγχου μπορούν να καλύπτουν πτυχές, όπως, μεταξύ
άλλων, τον αριθμό των περιπτώσεων ελέγχου που ορίζονται, τον αριθμό
των περιπτώσεων ελέγχου που πέρασαν με επιτυχία, καθώς και τον αριθμό
των περιπτώσεων ελέγχου που απέτυχαν.

Η αξιολόγηση των αναφορών των φάσεων ελέγχου, μπορεί να συνδυαστεί
με την ανάλυση γενεσιουργιών αιτιών έτσι ώστε να αξιολογηθεί η αποτελεσματικότητα
εύρεσης σφαλμάτων στη διεργασία ελέγχου, όσο το δυνατόν νωρίτερα.
Μια τέτοια αξιολόγηση μπορεί να συνδεθεί με την ανάλυση κινδύνου.
Επιπλέον, οι πόροι που αξίζει να δαπανηθούν στις δοκιμές πρέπει να
είναι ανάλογοι με τη χρήση/κρισιμότητα της εφαρμογής.
Αυτό σημαίνει ότι διαφορετικές τεχνικές έχουν διαφορετικά κόστη και
παρέχουν διαφορετικά επίπεδα εμπιστευτικότητας στην αξιοπιστία του
προϊόντος.

#### Τερματισμός {#termin-test}

Πρέπει να παρθεί η απόφαση για το πόσες δοκιμές είναι αρκετές και
για το πότε η φάση του ελέγχου μπορεί να τερματιστεί. Η πληρότητα
των μετρικών, όπως για παράδειγμα η επιτυχημένη κάλυψη κώδικα ή λειτουργική
κάλυψη, καθώς και οι εκτιμήσεις της πυκνότητας σφαλμάτων ή της λειτουργικής
αξιοπιστίας, παρέχει χρήσιμη υποστήριξη, η οποία όμως δεν είναι αρκετή
από μόνη της.
Η απόφαση περιλαμβάνει επίσης εκτιμήσεις σχετικά με το κόστος και
τον κίνδυνο που προκύπτει από πιθανές εναπομένουσες αποτυχίες, σε
αντίθεση με το κόστος που προκύπτει από τη συνέχιση των δοκιμών.

#### Επαναχρησιμοποίηση και πρότυπα ελέγχου

Για τη διεξαγωγή δοκιμών ή την συντήρηση με έναν οργανωμένο και οικονομικά
αποδοτικό τρόπο, τα μέσα που χρησιμοποιούνται για τον έλεγχο κάθε
μέρους του λογισμικού θα πρέπει να επαναχρησιμοποιούνται συστηματικά.
Ένα αποθετήριο υλικών για τις δοκιμές θα πρέπει να βρίσκεται υπό τον
έλεγχο της διαχείρισης σχηματισμών του λογισμικού, έτσι ώστε οι αλλαγές
στις απαιτήσεις λογισμικού ή στη σχεδίαση να μπορούν να αντικατοπτρίζονται
σε αλλαγές στις δοκιμές που διεξάγονται.

Οι λύσεις δοκιμών που υιοθετήθηκαν για τον έλεγχο μερικών ειδών εφαρμογών
υπό συγκεκριμένες συνθήκες, μαζί με τα κίνητρα πίσω από τις αποφάσεις
που πάρθηκαν, σχηματίζουν ένα πρότυπο ελέγχων που μπορεί να τεκμηριωθεί
για μεταγενέστερη επαναχρησιμοποίηση σε παρόμοια έργα.

### Δραστηριότητες ελέγχου

Όπως φαίνεται στην ακόλουθη περιγραφή, η επιτυχής διαχείριση των δραστηριοτήτων
ελέγχου εξαρτάται σε μεγάλο βαθμό από την διαδικασία διαχείρισης σχηματισμών
του λογισμικού.

#### Προγραμματισμός

Όπως όλες οι πτυχές της διαχείρισης ενός έργου, έτσι και οι δραστηριότητες
ελέγχου πρέπει να προγραμματίζονται. Οι κυριότερες πτυχές του προγραμματισμού
περιλαμβάνουν το συντονισμό του προσωπικού, τη διαθεσιμότητα των εγκαταστάσεων
και του εξοπλισμού ελέγχου, τη δημιουργία και τη συντήρηση εγγράφων
που σχετίζονται με τον έλεγχο, καθώς και τον προγραμματισμό για πιθανά
ανεπιθύμητα αποτελέσματα.
Αν παραπάνω από μια αρχική του λογισμικού συντηρείται, τότε κατά το
προγραμματισμό, πρέπει να ληφθεί υπόψη ο χρόνος και η προσπάθεια για
να διασφαλιστεί ότι το περιβάλλον ελέγχου είναι σωστά διαμορφωμένο.

#### Παραγωγή περιπτώσεων ελέγχου

Η παραγωγή των περιπτώσεων ελέγχου βασίζεται στο επίπεδο που εκτελείται
ο έλεγχος, καθώς και στη συγκεκριμένη τεχνική ελέγχου που χρησιμοποιείται.
Οι περιπτώσεις ελέγχου θα πρέπει να βρίσκονται υπό τον έλεγχο της
διαχείρισης σχηματισμών λογισμικού και να περιλαμβάνουν τα αναμενόμενα
αποτελέσματα για κάθε δοκιμή.

#### Ανάπτυξη περιβάλλοντος ελέγχου

Το περιβάλλον που χρησιμοποιείται κατά τις δοκιμές θα πρέπει να είναι
συμβατό με τα άλλα εργαλεία της τεχνολογίας λογισμικού που υιοθετήθηκαν.
Το περιβάλλον, επίσης, θα πρέπει να διευκολύνει την ανάπτυξη και τον
έλεγχο των περιπτώσεων ελέγχου, καθώς και την καταγραφή και την ανάκτηση
των αναμενόμενων αποτελεσμάτων, των σεναρίων και των άλλων υλικών
ελέγχου.

#### Εκτέλεση

Η εκτέλεση των δοκιμών πρέπει να ενσωματώνει μια βασική αρχή των επιστημονικών
πειραμάτων: οτιδήποτε πραγματοποιείται κατά τη διάρκεια του ελέγχου
πρέπει να εκτελείται και να τεκμηριώνεται με σαφήνεια, έτσι ώστε οποιοδήποτε
άλλο άτομο να μπορεί να αναπαράγει τα αποτελέσματα.
Ως εκ τούτου, ο έλεγχος θα πρέπει να εκτελείται σύμφωνα με τις τεκμηριωμένες
διαδικασίες, χρησιμοποιώντας μια σαφώς ορισμένη έκδοση του λογισμικού
υπό δοκιμή.

#### Αξιολόγηση αποτελεσμάτων ελέγχου

Τα αποτελέσματα ελέγχου πρέπει να αξιολογούνται έτσι ώστε να διαπιστώνεται
αν οι δοκιμές ήταν επιτυχείς ή όχι. Στις περισσότερες περιπτώσεις,
ο όρος «επιτυχής» σημαίνει ότι το λογισμικό εκτελέστηκε όπως αναμενόταν
και δεν υπήρχαν σημαντικά απροσδόκητα αποτελέσματα. Αξίζει να σημειωθεί
ότι δεν είναι όλα τα απροσδόκητα αποτελέσματα απαραιτήτως σφάλματα.
Μερικά από αυτά διαπιστώνονται ότι είναι, απλά, θόρυβος. Πριν αφαιρεθεί
ένα σφάλμα, απαιτείται να γίνει μια ανάλυση και μια προσπάθεια για
αποτελμάτωση, έτσι ώστε να απομονωθεί, να καθοριστεί και να περιγραφεί
το σφάλμα.
Όταν τα αποτελέσματα των δοκιμών είναι πολύ σημαντικά, μια επίσημη
επιτροπή αναθεώρησης μπορεί να συγκληθεί για την αξιολόγησή τους.

#### Αναφορά προβλημάτων/Καταγραφή δοκιμών

Οι δραστηριότητες ελέγχου μπορούν να καταγράφονται, έτσι ώστε να μπορεί
κανείς να προσδιορίζει πότε μια δοκιμή πραγματοποιήθηκε, ποιος εκτέλεσε
τη δοκιμή, ποια διαμόρφωση του λογισμικού χρησιμοποιήθηκε και άλλες
σχετικές πληροφορίες ταυτοποίησης της δοκιμής. Τα απροσδόκητα ή τα
εσφαλμένα αποτελέσματα ελέγχου μπορούν να καταγράφονται σε ένα σύστημα
αναφοράς προβλημάτων, τα δεδομένα του οποίου θα αποτελέσουν βάση για
μεταγενέστερη αποτελμάτωση και διόρθωση των προβλημάτων, που παρατηρήθηκαν
ως αποτυχίες κατά τη διάρκεια ελέγχου. Επίσης, ανωμαλίες που δεν θεωρούνται
σφάλματα, μπορούν να τεκμηριωθούν σε περίπτωση που αργότερα αποδειχθούν
πιο σοβαρές από ότι αρχικά είχαν θεωρηθεί.
Οι αναφορές ελέγχου είναι, επιπλέον, είσοδοι στη διαδικασία αιτήματος
αλλαγής διαχείρισης.

#### Ιχνηλάτηση σφαλμάτων

Τα σφάλματα μπορούν να ιχνηλατηθούν και να αναλυθούν, ώστε να διαπιστωθεί
πότε εισήχθησαν στο λογισμικό, για ποιον λόγο δημιουργήθηκαν (για παράδειγμα
λόγω κακώς ορισμένων απαιτήσεων, εσφαλμένης δήλωσης μεταβλητής, διαρροής
μνήμης, προγραμματιστικού συντακτικού λάθους), καθώς και πότε θα μπορούσαν
να παρατηρηθούν για πρώτη φορά στο λογισμικό.
Οι πληροφορίες από την ιχνηλάτηση σφαλμάτων χρησιμοποιούνται για να
διαπιστωθούν ποιες πτυχές του ελέγχου λογισμικού και των άλλων διαδικασιών
χρήζουν βελτίωσης και κατά πόσο είναι αποτελεσματικές οι προηγούμενες
προσεγγίσεις που χρησιμοποιήθηκαν.

## Εργαλεία ελέγχου λογισμικού

### Εργαλεία υποστήριξης ελέγχου

Ο έλεγχος απαιτεί πολλές εργασίες υψηλής έντασης εργασίας, οι οποίες
τρέχουν σε πολυάριθμες εκτελέσεις του προγράμματος και διαχειρίζονται
μεγάλη ποσότητα πληροφορίας. Κατάλληλα εργαλεία μπορούν να ελαφρύνουν
το βάρος μιας υπαλληλικής και κουραστικής λειτουργίας και να την
κάνουν λιγότερο επιρρεπή σε σφάλματα.
Επιπλέον, εξελιγμένα εργαλεία μπορούν να υποστηρίζουν το σχεδιασμό
του ελέγχου και την παραγωγή περιπτώσεων ελέγχου, καθιστώντας τα πιο
αποτελεσματικά.

#### Εργαλεία επιλογής

Ένα πολύ σημαντικό θέμα είναι η καθοδήγηση σε διευθυντές και
ελεγκτές, για το πως να διαλέγουν διαδικασίες και εργαλεία δοκιμών
που θα είναι χρήσιμα στον οργανισμό. Αυτό συμβαίνει γιατί η επιλογή
κατάλληλων εργαλείων ελέγχου επηρεάζει σημαντικά την απόδοση και την
αποτελεσματικότητα των ελέγχων. Επιπλέον, η επιλογή εργαλείων εξαρτάται
από διάφορες ενδείξεις, όπως οι επιλογές ανάπτυξης, οι σκοποί αξιολόγησης,
οι μηχανισμοί εκτέλεσης κτλ.
Γενικά, δεν μπορεί να υπάρχει ένα μοναδικό εργαλείο που να ικανοποιεί
τις ιδιαίτερες ανάγκες ενός οργανισμού, επομένως, μια σειρά εργαλείων
θα μπορούσε να είναι η κατάλληλη επιλογή.

#### Κατηγορίες εργαλείων

Παρακάτω κατηγοριοποιούνται τα διαθέσιμα εργαλεία ελέγχου ανάλογα
με τη λειτουργικότητά τους:

  * Ζυγός ελέγχου (οδηγοί, προσαρμογείς) παρέχουν ένα ελεγχόμενο
  περιβάλλον μέσα στο οποίο οι δοκιμές μπορούν να εκτελεστούν και τα
  αποτελέσματά τους να καταγραφούν.
  Προκειμένου να εκτελεστούν κομμάτια ενός προγράμματος, οι οδηγοί και
  οι προσαρμογείς παρέχονται για να προσομοιώσουν τις καλούμενες και
  κληθείσες μεθόδους, αντίστοιχα.
  * Γεννήτριες ελέγχου παρέχουν υποβοήθηση στην παραγωγή περιπτώσεων
  ελέγχου.
  Η παραγωγή μπορεί να είναι τυχαία, βάσει μονοπατιών, μοντέλου ή ενός
  συνδυασμού αυτών.
  * Εργαλεία εγγραφής και επανάληψης αυτόματα εκτελούν ξανά ή επαναλαμβάνουν,
  προηγουμένως εκτελεσμένες δοκιμές των οποίων έχουν καταγραφεί οι είσοδοι
  και τα αποτελέσματα (για παράδειγμα οθόνες).
  * Χρησμός/αρχείο σύγκρισης/ισχυρισμού εργαλείων ελέγχου βοηθούν
  στην απόφαση πότε το αποτέλεσμα του ελέγχου είναι επιτυχές ή όχι.
  * Αναλυτές κάλυψης και ενορχηστρωτές μπορούν να δουλεύουν μαζί.
  Οι αναλυτές κάλυψης εκτιμούν ποιες και πόσες οντότητες του γραφήματος
  ροής του προγράμματος έχουν εκτελεστεί ανάμεσα σε εκείνες που απαιτούνται
  από το επιλεγμένο κριτήριο κάλυψης της δοκιμής.
  Η ανάλυση μπορεί να γίνει χάρη στους ενορχηστρωτές, που εισάγουν ανιχνευτές
  εγγραφής μέσα στον κώδικα.
  * Ιχνηλάτες καταγράφουν το ιστορικό των εκτελέσεων των μονοπατιών
  ενός προγράμματος.
  * Εργαλεία ελέγχου παλινδρόμησης υποστηρίζουν την επανάληψη εκτέλεσης
  μιας σειράς ελέγχων μετά την τροποποίηση ενός τμήματος του λογισμικού.
  Μπορούν, επίσης, να βοηθήσουν στην επιλογή ενός υποσυνόλου δοκιμών
  ανάλογα με την αλλαγή που πραγματοποιήθηκε.
  * Εργαλεία αξιολόγησης αξιοπιστίας υποστηρίζουν την ανάλυση των
  αποτελεσμάτων των ελέγχων και τη γραφική οπτικοποίηση προκειμένου
  να αξιολογηθεί η αξιοπιστία, των σχετικών με αυτήν, μετρικών ανάλογα
  με τα επιλεγμένα μοντέλα.
