# Έλεγχος λογισμικού {#softtesting}

## Ακρωνύμια

|AI |Artificial Intelligence
|API |Application Program Interface
|ARINC |Aeronautical Radio Incorporated
|ATDD |Acceptance Test-Driven Development
|CMMI |Capability Maturity Model Integration 
|CSS |Cascading Style Sheets 
|DICOM |Digital Imaging and Communications in Medicine
|DL |Deep Learning 
|DU |Definition and Use
|EBSE |Evidence-Based Software Engineering 
|ECS |Ecosystem
|ETSI |European Telecommunications Standards Institute 
|FHIR |Fast Healthcare Interoperability Resources 
|GDPR |General Data Protection Regulation 
|GPS |Global Positioning System
|GUI |Graphical User Interface 
|HIL |Hardware-In-the-Loop 
|HIPAA |Health Insurance Portability and Accountability Act 
|HL7 |Health Level Seven 
|IoT |Internet of Things 
|KPI |Key Performance Indicator
|MC/DC |Modified Condition Decision Coverage
|ML |Machine Learning 
|MTTR |Mean Time to Recovery 
|OAT |Orthogonal Array Testing
|ODC |Orthogonal Defect Classification
|RUP |Rational Unified Process 
|SoS |System of Systems
|SPI |Software Process Improvement 
|SPICE |Software Process Improvement and Capability Determination 
|SUT |System Under Test
|TDD |Test-Driven Development
|TMMi |Test Maturity Model integration
|UI |User Interface

## Εισαγωγή

Οι έλεγχοι λογισμικού αποτελούνται από τη *δυναμική* επικύρωση, ότι ένα 
σύστημα υπό δοκιμή (SUT) παρέχει *αναμενόμενες* συμπεριφορές σε ένα *πεπερασμένο*
σύνολο από περιπτώσεις δοκιμής, κατάλληλα *επιλεγμένες* από τον ως
συνήθως άπειρο τομέα εκτέλεσης.
Στην παραπάνω δήλωση, οι λέξεις σε πλάγια γραφή αντιστοιχούν σε βασικά
ζητήματα στην περιγραφή του γνωστικού πεδίου Έλεγχος Λογισμικού. Αυτοί 
οι όροι συζητούνται παρακάτω.

  * Σύστημα υπό Δοκιμή: Αυτός ο όρος μπορεί να αναφέρεται στο
  αντικείμενο ελέγχου, το οποίο θα μπορούσε να είναι ένα πρόγραμμα, ένα
  προϊόν λογισμικού, μια εφαρμογή, μια εφαρμογή προσανατολισμένη στις υπηρεσίες 
  (π.χ. υπηρεσίες ιστού, μικροϋπηρεσίες), ενδιάμεσο λογισμικό (Υλικό/Λογισμικό), 
  μια σύνθεση υπηρεσιών, ένα σύστημα, ένα σύστημα συστημάτων ή ένα Οικοσύστημα. 

  * Δοκιμαστική Περίπτωση: Μια δοκιμαστική περίπτωση αποτελεί τον προσδιορισμό όλων
  των οντοτήτων που είναι απαραίτητες για την εκτέλεση, όπως οι τιμές εισόδου, 
  οι συνθήκες εκτέλεσης και οι χρονικές συνθήκες, η διαδικασία δοκιμής και τα αναμενόμενα
  αποτελέσματα (π.χ. παραγόμενες τιμές, αλλαγές κατάστασης, μηνύματα εξόδου).
  Οι τιμές εισόδου από μόνες τους δεν είναι πάντα αρκετές για την περιγραφή των 
  δοκιμαστικών περιπτώσεων, διότι το σύστημα υπό δοκιμή μπορεί να αντιδράσει με 
  διαφορετικές συμπεριφορές στην ίδια είσοδο, ανάλογα, για παράδειγμα, με την κατάσταση
  του συστήματος ή τις συνθήκες του περιβάλλοντος. Ένα σύνολο δοκιμαστικών περιπτώσεων
  ονομάζεται συνήθως *σύνολο δοκιμών* (test suite).

  * Δυναμική: Η δυναμική επικύρωση απαιτεί την εκτέλεση του συστήματος υπό δοκιμή 
  σε ένα σύνολο δοκιμών. Οι στατικές τεχνικές συμπληρώνουν τις δυναμικές δοκιμές
  και καλύπτονται στην ενότητα Ποιότητα Λογισμικού.

  * Πεπερασμένο: Ακόμα και σε ένα απλό σύστημα υπό δοκιμή, η εκτέλεση όλων των 
  δυνατών δοκιμαστικών περιπτώσεων (δηλαδή η εξαντλητική δοκιμή) θα μπορούσε να 
  διαρκέσει μήνες ή και χρόνια. Συνεπώς, στην πράξη, οι δοκιμές στοχεύουν σε ένα
  υποσύνολο από όλες τις δυνατές δοκιμαστικές περιπτώσεις που καθορίζονται από διαφορετικά
  κριτήρια. Η δοκιμή αποτελεί πάντα έναν συμβιβασμό μεταξύ περιορισμένων πόρων και 
  προγραμματισμένων χρονοδιαγραμμάτων αφενός και απαραίτητων απεριόριστων απαιτήσεων δοκιμής αφετέρου.

  * Επιλεγμένες: Ο εντοπισμός του καταλληλότερου κριτηρίου επιλογής υπό δεδομένες 
  συνθήκες είναι ένα πολύπλοκο πρόβλημα. Διάφορες τεχνικές μπορούν να ληφθούν υπόψη και 
  να συνδυαστούν για να αντιμετωπιστεί αυτό το πρόβλημα, όπως η ανάλυση κινδύνου, 
  οι απαιτήσεις λογισμικού, η μείωση κόστους, η ικανοποίηση χαρακτηριστικών ποιότητας, ο καθορισμός 
  προτεραιότητας και η ανίχνευση αποτυχιών. Οι πολλές προτεινόμενες τεχνικές ελέγχου διαφέρουν 
  στον τρόπο με τον οποίο επιλέγεται το σύνολο δοκιμών, και οι μηχανικοί λογισμικού πρέπει να
  γνωρίζουν ότι διαφορετικά κριτήρια επιλογής μπορεί να οδηγήσουν σε πολύ διαφορετικούς βαθμούς αποτελεσματικότητας.

  * Αναμενόμενες: Για κάθε εκτελεσθείσα δοκιμή, πρέπει να είναι δυνατό, αν και 
  δεν είναι πάντα εύκολο, να αποφασιστεί εάν τα παρατηρούμενα αποτελέσματα του 
  συστήματος υπό δοκιμή αντιστοιχούν στα αναμενόμενα. Πράγματι, η παρατηρούμενη
  συμπεριφορά μπορεί να ελεγχθεί έναντι των αναγκών του χρήστη (συνήθως αναφέρεται
  ως έλεγχος επικύρωσης), έναντι μιας προδιαγραφής (έλεγχος επαλήθευσης) ή ίσως έναντι
  της προβλεπόμενης συμπεριφοράς από τις σιωπηρές απαιτήσεις ή προσδοκίες.
 (βλ. Ενότητα 4.3, Προδιαγραφή Απαιτήσεων Βασισμένη σε Κριτήρια Αποδοχής στο 
 γνωστικό πεδίο Απαιτήσεις λογισμικού).

Όπως φαίνεται και από αυτήν τη συζήτηση, ο έλεγχος λογισμικού είναι μια διαδεδομένη 
και ολιστική δραστηριότητα που περιλαμβάνει όλα τα βήματα του κύκλου ζωής ανάπτυξης
μιας διεργασίας (π.χ. παραδοσιακή ανάπτυξη ή ανάπτυξη αριστερής μετατόπισης). 
Το υπόλοιπο του κεφαλαίου παρουσιάζει τα βασικά στοιχεία του ελέγχου λογισμικού και 
τις προκλήσεις του, θέματα και κοινώς αποδεκτές πρακτικές και λύσεις.


## Κατανομή των θεμάτων για τον έλεγχο λογισμικού

{id="fig-softtest-tree"}
![Σχήμα 5.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Έλεγχος λογισμικού.](images/5-SoftTest.png)

Στο [Σχήμα 1](#fig-softtest-tree) απεικονίζεται η κατανομή των θεμάτων
για τα γνωστικά πεδία του ελέγχου λογισμικού.

Ο πίνακας των Θεμάτων έναντι των Αναφορικών Υλικών παρέχει μια πιο 
λεπτομερή ανάλυση στο τέλος αυτής της ενότητας.

Το πρώτο θέμα, οι βασικές αρχές στον έλεγχο λογισμικού, καλύπτει
τους βασικούς ορισμούς στο πεδίο Έλεγχος Λογισμικού, τη βασική
ορολογία, τα βασικά ζητήματα και τη σχέση των δοκιμών λογισμικού με
άλλες δραστηριότητες.

Το δεύτερο θέμα, Επίπεδα Δοκιμών, περιλαμβάνει δύο (ορθογώνια)
υποθέματα. Το πρώτο υπο-θέμα, o στόχος του ελέγχου, καταγράφει 
τα επίπεδα στα οποία παραδοσιακά διαχωρίζονται οι δοκιμές μεγάλων 
λογισμικών, και το δεύτερο υπο-θέμα, οι Στόχοι Ελέγχου, αφορά
τις δοκιμές υπό συγκεκριμένων συνθηκών ή ιδιοτήτων.
Δεν εφαρμόζονται όλοι οι τύποι δοκιμών σε κάθε προϊόν λογισμικού,
ούτε και καταγράφεται κάθε πιθανός τύπος.

Ο στόχος και ο σκοπός του ελέγχου μαζί καθορίζουν πως ορίζεται το
σύνολο δοκιμών, αναφορικά με την συνοχή του (πόσες δοκιμές είναι
αρκετές για την επίτευξη του καθορισμένου σκοπού;) όσο και  με τη
σύνθεση του (ποιες περιπτώσεις δοκιμών πρέπει να επιλεχθούν για την
επίτευξη του καθορισμένου σκοπού;). (Παρ'όλα αυτά, συνήθως, η τοποθέτηση 
« για την επίτευξη του καθορισμένου σκοπού » παραμένει υπονοουμένη και
τίθεται μόνο το πρώτο μέρος των δύο παραπάνω ερωτήσεων).
Τα κριτήρια, που απευθύνονται στην πρώτη ερώτηση, είναι τα κριτήρια
επάρκειας ελέγχου, ενώ αυτά που απευθύνονται στη δεύτερη ερώτηση
είναι τα κριτήρια επιλογής ελέγχου.

Αρκετές Τεχνικές Δοκιμών έχουν αναπτυχθεί τις τελευταίες δεκαετίες
και ακόμη προτείνονται νέες.
Συνεπώς, το τρίτο θέμα καλύπτει γενικώς αποδεκτές και τυποποιημένες τεχνικές.

Οι μετρικές, που σχετίζονται με τον έλεγχο, αντιμετωπίζονται στο τέταρτο
θέμα, ενώ θέματα σχετικά με τη διεργασία ελέγχου καλύπτονται στο πέμπτο.

Ο Έλεγχος Λογισμικού στις Διαδικασίες Ανάπτυξης και τους Τομείς Εφαρμογής 
περιγράφεται στο έκτο θέμα, και ο Έλεγχος των και μέσω Αναδυόμενων Τεχνολογιών 
περιγράφεται στο έβδομο θέμα.

Τέλος, τα εργαλεία ελέγχου λογισμικού παρουσιάζονται στο όγδοο θέμα.

## Βασικές αρχές  στον έλεγχο λογισμικού

Αυτή η ενότητα παρέχει μια επισκόπηση των ζητημάτων που αφορούν το κύριο έλεγχοο 
και τη σχέση του ελέγχου με τις άλλες δραστηριότητες. Οι περισσότεροι όροι ελέγχου που 
χρησιμοποιούνται εδώ επίσης ορίζονται. 
Μια πιο κατανοητική επισκόπηση της ορολογίας που σχετίζεται με τον έλεγχο μπορεί 
να βρεθεί στις αναφορές.

### Σφάλματα έναντι αποτυχιών

Πολλοί όροι χρησιμοποιούνται στη βιβλιογραφία τεχνολογίας λογισμικού
για να περιγράψουν μια δυσλειτουργία: ιδίως η έννοια του **σφάλματος** 
(βλ. για σύγκριση, τον όρο **ελάττωμα** στην Ενότητα 3.2, Χαρακτηρισμός Ελαττωμάτων
στην Ποιότητα Λογισμικού), της **αποτυχίας** και του **λάθους**. 

Είναι απαραίτητος ο ξεκάθαρος διαχωρισμός μεταξύ της **αιτίας** μιας δυσλειτουργίας 
(για την οποία χρησιμοποιείται ο όρος **σφάλμα**) και ενός ανεπιθύμητου
αποτελέσματος που παρατηρείται στη διανεμόμενη υπηρεσία του συστήματος (μια **αποτυχία**). 
Πράγματι, μπορεί να υπάρχουν σφάλματα στο λογισμικό, τα οποία δεν εκδηλώνονται 
ποτέ ως αποτυχίες (βλ. θέμα [Θεωρητικοί και πρακτικοί περιορισμοί του ελέγχου](#theor-practical-limit-testing),
στην Ενότητα 1.2.8).
Ως εκ τούτου, οι δοκιμές μπορούν να αποκαλύψουν αποτυχίες, αλλά τα
σφάλματα που τα προκαλούν είναι αυτά που μπορούν και πρέπει να αφαιρεθούν.

Πάραυτα, πρέπει να αναγνωριστεί ότι η αιτία της αποτυχίας δεν μπορεί
να καθοριστεί απερίφραστα. Γενικά, δεν υπάρχουν θεωρητικά κριτήρια
τα οποία να μπορούν να προσδιορίσουν οριστικά το σφάλμα που προκάλεσε
μια παρατηρούμενη αποτυχία. Το σφάλμα μπορεί να πρέπει να τροποποιηθεί 
για να αφαιρεθεί η αποτυχία, αλλά και άλλες τροποποιήσεις μπορεί να δουλεύουν.
Για να αποφευχθεί η **ασάφεια**, μπορεί κάποιος να αναφερθεί σε **αποτυχίες
προκαλούμενες από εισροές** αντί σφαλμάτων, αυτά τα σύνολα εισόδων
που προκάλεσαν την αποτυχία.


### Βασικά ζητήματα 

Αυτή η υποκατηγορία παρέχει μία επισκόπηση των κύριων θεμάτων ελέγχου.

#### Δημιουργία Περιπτώσεων Ελέγχου

Η **δημιουργία** ή **παραγωγή περιπτώσεων ελέγχου** (test case) δημιουργεί το σύνολο 
δοκιμών (test suite) που είναι χρήσιμο για τον έλεγχο του συστήματος υπό δοκιμή (SUT) 
για συγκεκριμένους σκοπούς (π.χ. καταλληλότητα, ακρίβεια ή αξιολόγηση).
Καθώς η παραγωγή περιπτώσεων ελέγχου είναι μία από τις πιο σημαντικές και εντατικές 
δραστηριότητες του ελέγχου λογισμικού, συνήθως υποστηρίζεται από προσεγγίσεις, 
τεχνικές και εργαλεία για την αυτοματοποίηση της διαδικασίας.

#### Κριτήρια επιλογής και επάρκειας ελέγχου 

Ένα κριτήριο επιλογής ελέγχου είναι ένα μέσο για την επιλογή των περιπτώσεων
ελέγχου ή για τον καθορισμό ότι ένα σύνολο δοκιμών είναι
επαρκές για έναν συγκεκριμένο σκοπό. Η επιλογή των περιπτώσεων ελέγχου,
αποσκοπεί στο να μειώσει την πληθικότητα (cardinality) του συνόλου δοκιμών ενώ
ταυτόχρονα να διατηρήσει την ίδια αποτελεσματικότητα σε όρους κάλυψης ή 
ρυθμού ανίχνευσης αποτυχιών. Τα κριτήρια επάρκειας ελέγχου μπορούν να 
χρησιμοποιηθούν για να αποφασιστεί πότε επιτεύχθηκε επαρκής δοκιμή.

#### Προτεραιοποίηση/Ελαχιστοποίηση

Μπορούν να υιοθετηθούν κατάλληλες στρατηγικές για την επιλογή ή 
την προτεραιοποίηση των δοκιμαστικών περιπτώσεων προκειμένου να βελτιωθεί 
η αποτελεσματικότητα της δοκιμής. Η **προτεραιοποίηση** των δοκιμαστικών περιπτώσεων 
αποσκοπεί στον καθορισμό μιας σειράς εκτέλεσης ελέγχων σύμφωνα με κάποια κριτήρια 
(π.χ. κάλυψη, ρυθμός ανίχνευσης αποτυχιών, ομοιότητα και κίνδυνος), ώστε 
τα τεστ με υψηλότερη προτεραιότητα να εκτελούνται πριν από αυτά με χαμηλότερη προτεραιότητα.
Η ελαχιστοποίηση των περιπτώσεων δοκιμής συνήθως στοχεύει στο να μειώσει ένα σύνολο δοκιμών 
αφαιρώντας τα περιττά τεστ σύμφωνα με κάποιο κριτήριο ή σκοπό.

#### Σκοπός του Ελέγχου

Διαφορετικοί καλά ορισμένοι σκοποί μπορούν να καθοδηγήσουν τη δραστηριότητα των ελέγχων:
είναι μόνο μέσω της εξέτασης ενός συγκεκριμένου σκοπού ότι ένα σύνολο δοκιμών μπορεί να 
δημιουργηθεί (επιλεγεί), εκτελεστεί, και αξιολογηθεί (βλ. Ενότητα 2 για περισσότερες λεπτομέρειες).

#### Αξιολόγηση και Πιστοποίηση

Ο έλεγχος πρέπει να επικεντρώνεται σε συγκεκριμένες (υποχρεωτικές) προδιαγραφές, όπως απαιτήσεις, 
νόμους και πρότυπα. Οι περιπτώσεις δοκιμών πρέπει να δημιουργούνται και να εκτελούνται για να 
παρέχουν αποδείξεις που είναι χρήσιμες για την αξιολόγηση και/ή την πιστοποίηση της συμμόρφωσης
με τις επιλεγμένες προδιαγραφές. Συνήθως, η αξιολόγηση και η πιστοποίηση των αποτελεσμάτων των ελέγχων
περιλαμβάνουν την επαλήθευση ότι οι περιπτώσεις δοκιμών έχουν προέλθει και δημιουργηθεί χρησιμοποιώντας 
τις αρχικές απαιτήσεις, υιοθετώντας ένα διαδικαστικό έλεγχο διαμόρφωσης (configuration control process) 
και χρησιμοποιώντας επαναλήψιμες διαδικασίες.

#### Διαδικασία ελέγχου για την Βελτίωση/Εξασφάλιση της ποιότητας

Η διαδικασία ελέγχου (testing) έχει πολλές πτυχές, συμπεριλαμβανομένων της βελτίωσης και εξασφάλισης της ποιότητας.
Αυτά τα χαρακτηριστικά περιλαμβάνουν σχεδιασμένες και συστηματικές διαδικασίες υποστήριξης και δραστηριότητες 
που επιδιώκουν να επιτύχουν εμπιστοσύνη ότι το σύστημα υπό δοκιμή (SUT) πληροί καθορισμένες τεχνικές ή ποιοτικές 
απαιτήσεις. Έτσι, η **βελτίωση** και **εξασφάλιση** της ποιότητας περιλαμβάνουν τον καθορισμό μεθόδων, εργαλείων, 
δεξιοτήτων και πρακτικών για την επίτευξη συγκεκριμένου επιπέδου ποιότητας και στόχων. Η λίστα των κύριων 
χαρακτηριστικών ποιότητας που μπορεί να μετρήσει ή να αξιολογήσει η διαδικασία ελέγχου αναφέρεται στο 
πρότυπο ISO/IEC 25010:2011 [9]. (βλ. Ενότητα 1.3.2, Ποιότητα Προϊόντος Λογισμικού, στο γνωστικό πεδίο Ποιότητα Λογισμικού.)

#### Το πρόβλημα του χρησμού (The Oracle Problem)

Ένα σημαντικό στοιχείο της διαδικασίας ελέγχου είναι ο χρησμός (oracle). Πράγματι, μια δοκιμή έχει νόημα μόνο αν είναι 
δυνατόν να αποφανθεί η παρατηρηούμενη έκβασή της. Ο χρησμός μπορεί να είναι οποιοσδήποτε ανθρώπινος ή μηχανικός παράγοντας 
που αποφασίζει εάν το σύστημα υπό δοκιμή (SUT) συμπεριφέρθηκε σωστά σε κάθε δοκιμή και σύμφωνα με τα αναμενόμενα αποτελέσματα.
Συνεπώς, ο χρησμός παρέχει μια απόφαση "επιτυχίας" ή "αποτυχίας". Ο χρησμός δεν μπορεί πάντα να αποφασίσει: σε αυτές τις 
περιπτώσεις, το αποτέλεσμα της δοκιμής κατατάσσεται ως ακατάληκτο. Υπάρχουν πολλοί τύποι χρησμών - για παράδειγμα, 
σαφής προσδιορισμός προδιαγραφών, συμπεριφορικά μοντέλα και σημειώσεις κώδικα. Η αυτοματοποίηση των μηχανοποιημένων χρησμών
μπορεί να είναι δύσκολη και ακριβή.

#### Θεωρητικοί και πρακτικοί περιορισμοί {#theor-practical-limit-testing}

Η θεωρία των δοκιμών προειδοποιεί για απόδοση αδικαιολόγητης
εμπιστοσύνης σε μία σειρά επιτυχημένων δοκιμών. Δυστυχώς,
τα περισσότερα καθιερωμένα αποτελέσματα της θεωρίας των δοκιμών είναι τα
αρνητικά αποτελέσματα στα οποία αναφέρουν ό,τι δεν έχει επιτευχθεί,
σε αντίθεση με ότι πραγματικά έχει επιτευχθεί. Το πιο διάσημο σχετικό
απόσπασμα είναι το απόφθεγμα του Dijkstra ότι «οι δοκιμές του προγράμματος
μπορούν να χρησιμοποιηθούν για να δείξουν την παρουσία σφαλμάτων,
αλλά ποτέ για να δείξουν την απουσία τους». Ο προφανής λόγος γι' αυτό
είναι ότι πλήρεις δοκιμές δεν είναι εφικτές σε ρεαλιστικό λογισμικό.

#### Το πρόβλημα των ανέφικτων μονοπατιών

Τα ανέφικτα μονοπάτια είναι διαδρομές ροών ελέγχου, που δεν μπορούν να
εξεταστούν από κανένα δεδομένο εισόδου (π.χ. δοκιμές ελέγχου).
Η διαχείριση των ανέφικτων μονοπατιών μπορεί να βοηθήσει στη μείωση 
του χρόνου και των πόρων που απαιτούνται για τον έλεγχο του λογισμικού.
Είναι σημαντικό πρόβλημα οι δοκιμές που είναι βασισμένες σε μονοπάτια,
κυρίως σε αυτοματοποιημένη παραγωγή δοκιμαστικών δοκιμών ελέγχου
για την εξέταση διαδρομών ροών ελέγχου. Επιπλέον, οι ανέφικτες διαδρομές 
μπορούν επίσης να συνδεθούν με τη διαδικασία ανάλυσης και ανίχνευσης ευπαθειών ασφαλείας και 
μπορούν να βελτιώσουν την ακρίβεια.

#### Ελεγξιμότητα (Testability)

Ο όρος **ελεγξιμότητα λογισμικού** έχει δύο σχετικές μεταξύ τους αλλά
διαφορετικές ερμηνείες. Από τη μία πλευρά, αναφέρεται στην ευκολία
με την οποία ένα δεδομένο κριτήριο κάλυψης ελέγχου μπορεί να ικανοποιηθεί:
από την άλλη πλευρά, ορίζεται ως η πιθανότητα, πιθανόν μετρημένη στατιστικά,
ότι ένα σύνολο δοκιμών θα εκθέσει αστοχία εάν το λογισμικό
είναι ελαττωματικό. Και οι δύο ερμηνείες είναι σημαντικές.

#### Εκτέλεση και Αυτοματοποίηση Ελέγχου

Μια σημαντική πρόκληση της διαδικασίας ελέγχου είναι η βελτίωση της εφικτής αυτοματοποίησης,
είτε με την ανάπτυξη προηγμένων τεχνικών για τη δημιουργία των εισόδων ελέγχου είτε, πέρα ​​από τη δημιουργία των τεστ,
με την εύρεση καινοτόμων διαδικασιών υποστήριξης για την (πλήρη) αυτοματοποίηση των διαφορετικών δραστηριοτήτων του 
ελέγχου -  για παράδειγμα, για να αυξηθεί ο αριθμός των παραγόμενων ή εκτελούμενων περιπτώσεων ελέγχου.

#### Επεκτασιμότητα

Η επεκτασιμότητα αφορά την ικανότητα του λογισμικού να αυξάνει και να κλιμακώνει τις μη λειτουργικές του απαιτήσεις, 
όπως το oad, τον αριθμό των συναλλαγών και τον όγκο δεδομένων. Η επεκτασιμότητα συνδέεται επίσης με την πολυπλοκότητα 
της πλατφόρμας και του περιβάλλοντος στο οποίο εκτελείται το πρόγραμμα, όπως τα κατανεμημένα ασύρματα δίκτυα και τα 
εικονικά περιβάλλοντα, μεγάλης κλίμακας συμπλέγματα (large-scale clusters) και κινητά νέφη (mobile cloud).

#### Αποτελεσματικότητα ελέγχου

Η αξιολόγηση του συστήματος υπό δοκιμή (SUT), η μέτρηση της αποτελεσματικότητας μιας τεχνικής δοκιμής 
και η κρίση για το εάν η δοκιμή μπορεί να σταματήσει είναι σημαντικά ζητήματα για τον έλεγχο λογισμικού και 
μπορεί να απαιτήσουν τον καθορισμό και την επιλογή κατάλληλων μέτρων αποτελεσματικότητας δοκιμής.

#### Ελεγξιμότητα, Αναπαραγωγή και Γενίκευση 

* H **Ελεγξιμότητα** αναφέρεται στη μετάβαση των δραστηριοτήτων ελέγχου από το εργαστήριο 
(δηλαδή ελεγχόμενες συνθήκες) στην πραγματικότητα (δηλαδή ανεξέλεγκτες συνθήκες).
* Η **Αναπαραγωγή** αναφέρεται στην ικανότητα διαφορετικών ανθρώπων να εκτελούν τις ίδιες δοκιμαστικές δραστηριότητες. 
Ο σκοπός είναι να επαληθεύσουμε εάν μια δεδομένη θεωρία δοκιμών λειτουργεί, τουλάχιστον στο εργαστήριο.
* Η **γενίκευση** του τεστ είναι συνδεδεμένη με την εξωτερική έγκυροτητα - δηλαδή το μέτρο με το οποίο η προσέγγιση δοκιμών 
μπορεί να εφαρμοστεί σε ευρύτερες ρυθμίσεις ή στοχευμένους πληθυσμούς. Η γενικότητα του λογισμικού δοκιμής μπορεί να είναι 
σημαντική για τη διαχείριση των δραστηριοτήτων δοκιμής (σε όρους κόστους και προσπάθειας) και για την αύξηση της 
εμπιστοσύνης στα αποτελέσματα των δοκιμών.

#### Έλεγχος εκτός σύνδεσης (offline) έναντι ελέγχου σε πραγματικό χρόνο (online)

Η διαδικασία ελέγχου μπορεί να εκτελεστεί σε δύο περιβάλλοντα: έλεγχος *εκτός σύνδεσης* (offline) και έλεγχος σε *πραγματικό χρόνο* (online).
Συνήθως, το σύστημα υπό δοκιμή (SUT) επικυρώνεται σε ένα περιβάλλον χωρίς εξωτερική αλληλεπίδραση στον έλεγχο εκτός σύνδεσης,
ενώ το σύστημα υπό δοκιμή (SUT) αλληλεπιδρά με το πραγματικό περιβάλλον εφαρμογής στον έλεγχο σε πραγματικό χρόνο. 
Οι περιπτώσεις ελέγχου εξάγονται είτε χειροκίνητα είτε αυτόματα και στις δύο περιπτώσεις, και οι αναμενόμενοι έξοδοι χρησιμοποιούνται 
για να αξιολογηθεί το σύστημα υπό δοκιμή (SUT).

### Σχέση ελέγχου με άλλες δραστηριότητες

* Ο έλεγχος λογισμικού είναι συσχετισμένος, αλλά διαφορετικός από στατικές
  τεχνικές διοίκησης ποιότητας λογισμικού, αποδείξεις ορθότητας, αποτελμάτωση
  και κατασκευή προγράμματος.
  Ωστόσο, είναι κατατοπιστικό να αντιμετωπίσουμε τον έλεγχο από την
  οπτική των αναλυτών ποιότητας λογισμικού και όσων την πιστοποιούν.
  Για περισσότερη συζήτηση δείτε τα παρακάτω:

    * Δοκιμές έναντι Τεχνικών διαχείρισης ποιότητας στατικού λογισμικού:βλ. Ενότητα 2.2.1, 
    Τεχνικές Στατικής Ανάλυσης, στο γνωστικό πεδίο Ποιότητα λογισμικού.
    * Δοκιμές έναντι Βελτίωση/Βεβαιότητα Ποιότητας: βλ. Ενότητα 1.3.2, Ποιότητα Προϊόντος Λογισμικού,
    στο γνωστικό πεδίο Ποιότητα Λογισμικού.
    * Δοκιμές έναντι Αποδείξεων ορθότητας και επίσημης επαλήθευσης: βλ.
    στο γνωστικό πεδίο Μοντέλα και μέθοδοι τεχνολογίας λογισμικού.
    * Δοκιμές έναντι Διόρθωσης: βλ. Έλεγχοι κατασκευής στο γνωστικό πεδίο Κατασκευή λογισμικού
    και Εργαλεία και Τεχνικές Διόρθωσης στο γνωστικό πεδίο Υπολογιστικά Θεμέλια.
    * Δοκιμές έναντι Κατασκευής Προγράμματος: βλ. Έλεγχοι κατασκευής στο γνωστικό πεδίο Κατασκευή λογισμικού.
    * Δοκιμές έναντι Ασφάλειας: βλ. το νέο γνωστικό πεδίο: Ασφάλεια Λογισμικού.
    * Δοκιμές έναντι Εκτίμησης προσπάθειας: βλ. το γνωστικό πεδίο Διοίκηση Τεχνολογιών Λογισμικού.
    * Δοκιμές έναντι Νομικών Θεμάτων: βλ. το γνωστικό πεδίο Επαγγελματική Πρακτική Τεχνολογιών Λογισμικού.

## Επίπεδα ελέγχου {#level-test}

Οι δοκιμές λογισμικού συνήθως εκτελούνται σε διαφορετικά επίπεδα
κατά τις διαδικασίες ανάπτυξης και συντήρησης.
Τα *επίπεδα* μπορούν να διαχωριστούν βάσει του αντικειμένου των δοκιμών,
το οποίο ονομάζεται *στόχος*, ή βάσει της πρόθεσης, το οποίο ονομάζεται
*σκοπός* (των επιπέδων δοκιμών).

### Ο στόχος του ελέγχου 

Ο στόχος της δοκιμής μπορεί να ποικίλει ανάλογα με το σύστημα υπό δοκιμή (SUT), 
τις συνθήκες περιβάλλοντος και τον προϋπολογισμό/χρόνο που αφιερώνεται στη δραστηριότητα δοκιμών. 
Τέσσερα στάδια δοκιμών μπορούν να διακριθούν: μονάδα, ολοκλήρωση, σύστημα και αποδοχή. 
Αυτά τα τέσσερα στάδια δοκιμής δεν συνεπάγονται καμία διαδικασία ανάπτυξης, ούτε κανένα 
από αυτά θεωρείται ότι είναι πιο σημαντικό από τα άλλα τρία.

####  Έλεγχος μονάδας (Unit Testing)

Η δοκιμή μονάδας επαληθεύει τη λειτουργία σε απομόνωση των στοιχείων του συστήματος υπό δοκιμή 
που μπορούν να ελεγχθούν ξεχωριστά. Ανάλογα με το πλαίσιο, αυτά θα μπορούσαν να είναι τα μεμονωμένα 
υποπρογράμματα ή συστατικά, ένα υποσύστημα ή μια σύνθεση συστατικών του SUT. Συνήθως, αλλά όχι πάντα, 
το άτομο που έγραψε τον κώδικα διεξάγει τη δοκιμή μονάδας.

####  Έλεγχος ενσωμάτωσης (Integration Testing)

Ο *έλεγχος ενσωμάτωσης* επαληθεύει τις αλληλεπιδράσεις μεταξύ των στοιχείων του συστήματος υπό δοκιμή 
(για παράδειγμα, συστατικά,ενότητες, ή υποσυστήματα). Οι στρατηγικές ολοκλήρωσης περιλαμβάνουν την προοδευτική 
(και συστηματική) ενσωμάτωση των στοιχείων του συστήματος υπό δοκιμή λαμβάνοντας υπόψη είτε τα προσδιορισμένα 
λειτουργικά θέματα είτε τις αρχιτεκτονικές προδιαγραφές. Οι τυπικές στρατηγικές δοκιμών ενσωμάτωσης είναι από 
πάνω προς τα κάτω (top-down), από κάτω προς τα πάνω (bottom-up), μικτές (ή σάντουιτς) και η μεγάλη έκρηξη (big bang). 
Εστιάζουν σε διαφορετικές προοπτικές του επιπέδου στο οποίο ενσωματώνονται τα στοιχεία του συστήματος υπό δοκιμή. 
Οι έλεγχοι ενσωμάτωσης είναι μια συνεχής δραστηριότητα που μπορεί να πραγματοποιηθεί σε κάθε στάδιο ανάπτυξης. 
Μπορεί να στοχεύει σε διαφορετικές πτυχές, όπως η διαλειτουργικότητα (π.χ. συμβατότητα ή διαμόρφωση) των στοιχείων 
του συστήματος υπό δοκιμή ή με το εξωτερικό περιβάλλον. Μπορούν επίσης να εξεταστούν εξωτερικές διεπαφές με άλλες 
εφαρμογές, βοηθήματα, συσκευές υλικού ή λειτουργικά περιβάλλοντα.


#### Έλεγχος συστήματος

Ο *έλεγχος συστήματος* αφορά τη δοκιμή της συμπεριφοράς του συστήματος υπό δοκιμή (σύμφωνα με τον ορισμό της Ενότητας 1). 
Οι αποτελεσματικές δοκιμές μονάδας και ολοκλήρωσης θα έπρεπε να έχουν εντοπίσει πολλά ελαττώματα του συστήματος υπό δοκιμή. 
Επιπλέον, η δοκιμή συστήματος θεωρείται συνήθως κατάλληλη για την αξιολόγηση μη λειτουργικών απαιτήσεων συστήματος, 
όπως η ασφάλεια, η ιδιωτικότητα, η ταχύτητα, η ακρίβεια και η αξιοπιστία. (βλ. Λειτουργικές και Μη-Λειτουργικές Απαιτήσεις στο γνωστικό πεδίο
Απαιτήσεις λογισμικού και στις απαιτήσεις ποιότητας λογισμικού στο γνωστικό πεδίο Ποιότητα Λογισμικού.)

#### Δοκιμή αποδοχής 

Οι δοκιμές αποδοχής στοχεύουν στην ανάπτυξη ενός συστήματος υπό δοκιμή. 
Κύριος στόχος του είναι να διαπιστώσει ότι το σύστημα υπό δοκιμή ικανοποιεί 
τις απαιτήσεις και τις προσδοκίες των τελικών χρηστών. 
Γενικά, εκτελείται από ή με τους τελικούς χρήστες για να εκτελέσουν 
τις λειτουργίες και τα καθήκοντα για τα οποία το λογισμικό 
χτίστηκε. Για παράδειγμα, αυτή η δραστηριότητα δοκιμών θα μπορούσε να στοχεύει 
σε δοκιμές χρησιμότητας ή στην λειτουργική αποδοχή. Ο Ορισμός των δοκιμών αποδοχής πριν από την εφαρμογή της
αντίστοιχης λειτουργικότητας είναι μια βασική δραστηριότητα της δοκιμαστικής ανάπτυξης αποδοχής (ATDD). (βλ. το γνωστικό πεδίο Απαιτήσεις Λογισμικού, Ενότητα 4.3.) 

### Σκοποί ελέγχου 

Η δοκιμή διεξάγεται λαμβάνοντας υπόψη συγκεκριμένους *στόχους*, που δηλώνονται (περισσότερο ή λιγότερο) ρητά 
και με ποικίλο βαθμό ακρίβειας. Ο καθορισμός των στόχων δοκιμών με ακριβείς, ποσοτικούς όρους υποστηρίζει 
τη μέτρηση και τον έλεγχο της διαδικασίας δοκιμής.

Η δοκιμή μπορεί να στοχεύει στην επαλήθευση διαφορετικών ιδιοτήτων. Για παράδειγμα, οι περιπτώσεις δοκιμών 
μπορούν να σχεδιαστούν για να ελέγξουν ότι οι λειτουργικές προδιαγραφές εφαρμόζονται σωστά, η οποία αναφέρεται 
ποικίλα στη βιβλιογραφία ως δοκιμή συμμόρφωσης, δοκιμές ορθότητας ή λειτουργικές δοκιμασίες. Ωστόσο, αρκετές 
άλλες μη λειτουργικές ιδιότητες μπορούν επίσης να ελεγχθούν, συμπεριλαμβανομένων των επιδόσεων, της αξιοπιστίας 
και της χρηστικότητας. (βλ. τα μοντέλα και τα χαρακτηριστικά ποιότητας στο γνωστικό πεδίο Ποιότητα Λογισμικού.)

Άλλοι σημαντικοί σκοποί ελέγχου περιλαμβάνουν, αλλά δεν περιορίζονται
σε αυτούς, την μέτρηση αξιοπιστίας, τον προσδιορισμό των τρωτών σημείων
της ασφάλειας, την αξιολόγηση χρηστικότητας, και την αποδοχή του λογισμικού,
για τα οποία θα πρέπει να ληφθούν υπόψη διαφορετικές προσεγγίσεις.
Σημειώστε ότι, σε γενικές γραμμές, οι σκοποί ελέγχου ποικίλουν ανάλογα
με τον στόχο των δοκιμών, διαφορετικές επιδιώξεις απευθύνονται σε διαφορετικά
επίπεδα ελέγχου.

Τα επιμέρους θέματα, που αναγράφονται παρακάτω, είναι τα πλέον συχνά
αναφερόμενα στη βιβλιογραφία.

#### Δοκιμές συμμόρφωσης (Conformance Testing)

Η *δοκιμή συμμόρφωσης* αποσκοπεί στο να επαληθεύσει ότι το σύστημα υπό δοκιμή συμμορφώνεται με πρότυπα, 
κανόνες, προδιαγραφές, απαιτήσεις, σχεδιασμό, διαδικασίες ή πρακτικές. 

#### Δοκιμές συμμόρφωσης (Compliance Testing)

Οι *δοκιμές συμμόρφωσης* αποσκοπούν στην απόδειξη της τήρησης από το σύστημα υπό δοκιμή ενός νόμου ή 
κανονισμού. Συνήθως, η δοκιμή συμμόρφωσης επιβάλλεται από εξωτερικό ρυθμιστικό φορέα.

####  Έλεγχος εγκατάστασης

Συχνά, μετά την ολοκλήρωση του συστήματος και την αποδοχή των δοκιμών,
και το σύστημα υπό δοκιμή έχει εγκατασταθεί στο στοχευόμενο περιβάλλον,
το σύστημα υπό δοκιμή επαληθεύεται.
Οι *δοκιμές εγκατάστασης* μπορούν να θεωρηθούν ως δοκιμές του συστήματος
διεξαγόμενες στο λειτουργικό περιβάλλον των διαμορφώσεων υλικών και
άλλων λειτουργικών περιορισμών.
Οι διαδικασίες εγκατάστασης μπορούν επίσης να επαληθεύονται.

####  Έλεγχος άλφα βήτα

Πριν την κυκλοφορία του συστήματος υπό δοκιμή, μερικές φορές δίνεται σε μια μικρή,
επιλεγμένη ομάδα δυνητικών χρηστών για δοκιμαστική χρήση (δοκιμή άλφα)
και/ή σε ένα μεγαλύτερο σύνολο αντιπροσωπευτικών χρηστών (δοκιμή βήτα).
Αυτοί οι χρήστες αναφέρουν προβλήματα σχετικά με το προϊόν.
Οι δοκιμές άλφα και βήτα είναι συχνά μη ελεγχόμενες και δεν αναφέρεται
πάντα σε ένα σχέδιο δοκιμής.

####  Έλεγχος παλινδρόμησης 

Σύμφωνα με τον ορισμό που διατυπώθηκε στο [7],ο έλεγχος παλινδρόμησης 
είναι η «επιλεκτική επανεξέταση του συστήματος υπό δοκιμή για να 
επαληθευτεί πως οι τροποποιήσεις δεν έχουν
προκαλέσει ακούσια επίδραση και ότι το σύστημα υπό δοκιμή
(που εξετάζεται) εξακολουθεί να συμμορφώνεται με τις καθορισμένες
απαιτήσεις του». Στην πράξη, η προσέγγιση θέλει να δείξει ότι το σύστημα υπό δοκιμή
εξακολουθεί να περνά ελέγχους που έχει περάσει και στο παρελθόν σε
μια σειρά ελέγχων (στην πραγματικότητα, επίσης μερικές φορές αναφέρεται
ως έλεγχος μη παλινδρόμησης). Σε μερικές περιπτώσεις, πρέπει να γίνει
ένα αντιστάθμισμα μεταξύ της διαβεβαίωσης από τον έλεγχο παλινδρόμησης
κάθε φορά που γίνεται μια αλλαγή και των πόρων που απαιτούνται για
την εκτέλεση των ελέγχων παλινδρόμησης. Αυτό μπορεί να είναι αρκετά
χρονοβόρο λόγω του μεγάλου αριθμού των δοκιμών που μπορούν να εκτελεστούν.
Οι έλεγχοι παλινδρόμησης μπορούν να εκτελεστούν σε καθένα από τα επίπεδα
ελέγχων που περιγράφονται στην ενότητα 2.1. Μπορεί να περιλαμβάνει λειτουργικές 
και μη λειτουργικές δοκιμές, όπως η αξιοπιστία, η προσβασιμότητα, η χρηστικότητα, 
η συντήρηση, η μετατροπή, η μετανάστευση και οι δοκιμές συμβατότητας.

Η δοκιμή παλινδρόμησης μπορεί να περιλαμβάνει την επιλογή (βλ. Ενότητα 1.2.2) 
και την ελαχιστοποίηση (βλ. ενότητα 1.2.3) των περιπτώσεων δοκιμών, καθώς και 
την υιοθέτηση προσεγγίσεων προτεραιότητας (βλέπε ενότητα 2.2.6) σε υπάρχουσες δοκιμαστικές σουίτες.

Η δοκιμή παλινδρόμησης είναι μια θεμελιώδης δραστηριότητα του ευέλικτου, 
DevOps, της ανάπτυξης οδηγούμενης από έλεγχο (Test-Driven Development) και της συνεχούς ανάπτυξης. 
Συνήθως εκτελείται μετά από δοκιμές ολοκλήρωσης και πριν από την ανάπτυξη στην παραγωγή ή στην λειτουργία. 

#### Δοκιμές προτεραιότητας 

Η *προτεραιοποίηση των περιπτώσεων δοκιμών* αποσκοπεί στο να προγραμματίσει τις περιπτώσεις δοκιμής για να αυξήσει 
το ποσοστό ανίχνευσης σφαλμάτων, την πιθανότητα αποκάλυψης λαθών, την κάλυψη του κώδικα που δοκιμάζεται και την 
αξιοπιστία του συστήματος υπό δοκιμή. Συνήθως, η δοκιμή προτεραιότητας βασίζεται στην ευρετική και η απόδοσή της 
μπορεί να διαφέρει ανάλογα με το σύστημα υπό δοκιμή, το περιβάλλον και τις διαθέσιμες περιπτώσεις δοκιμών. 
Μεταξύ των διαφορετικών προτάσεων προτεραιοποίησης, η προτεραιότητα με βάση την ομοιότητα είναι μία από τις πιο συχνά υιοθετούμενες. 
Σε αυτή την προσέγγιση προτεραιοποίησης, οι περιπτώσεις δοκιμών δίδονται προτεραιότητα ξεκινώντας από τις πιο 
διαφορετικές σύμφωνα με μία προκαθορισμένη απομακρυσμένη λειτουργία.

#### Μη λειτουργικές δοκιμές 

Οι *μη λειτουργικές δοκιμές* στοχεύουν στην επικύρωση μη λειτουργικών πτυχών (όπως η απόδοση, 
η χρηστικότητα ή αξιοπιστία) και διεξάγεται σε όλα τα επίπεδα δοκιμών. Στο στάδιο της πρακτικής, 
υπάρχουν εκατοντάδες μη λειτουργικές τεχνικές δοκιμών που περιλαμβάνουν, αλλά δεν περιορίζονται στα εξής:

* Δοκιμές επιδόσεων [4, μέρος 1]: Οι δοκιμές απόδοσης επαληθεύουν ότι το λογισμικό πληροί τις καθορισμένες 
απαιτήσεις επιδόσεως και αξιολογούν τα χαρακτηριστικά επιδόσης (π.χ. χωρητικότητα και χρόνος απάντησης).

* Δοκιμή φορτίου [4, μέρος 1]: Οι δοκιμές φορτίου επικεντρώνονται στην επικύρωση της συμπεριφοράς του 
συστήματος υπό δοκιμή υπό συνθήκες πίεσης φορτίου για την ανίχνευση προβλημάτων (π.χ. αδιέξοδα (deadlocks) , 
racing, υπερχείλιση προσωρινής μνήμης (buffer overflow) και διαρροές μνήμης) ή παραβιάσεις της αξιοπιστίας, 
της σταθερότητας ή της αντοχής. Στόχος του είναι να εκτιμηθεί ο ρυθμός με τον οποίο υποβάλλονται 
διαφορετικά αιτήματα υπηρεσιών στο σύστημα υπό δοκιμή.

* Δοκιμές στρες: Η δοκιμή στρες στοχεύει να ωθήσει το σύστημα υπό δοκιμή πέρα από τις δυνατότητές του, 
δημιουργώντας ένα φορτίο μεγαλύτερο από αυτό που αναμένεται να χειριστεί το σύστημα.

* Δοκιμή όγκου [4, μέρος 1]: Ο όγκος δοκιμής στοχεύει στην αξιολόγηση των περιορισμών της 
εσωτερικής αποθήκευσης του συστήματος υπό δοκιμή και της ικανότητάς του να ανταλλάσσει δεδομένα και πληροφορίες.

* Δοκιμή σφάλματος (Failover Testing): Η δοκιμή σφάλματος επικυρώνει την ικανότητα του συστήματος υπό δοκιμή να διαχειρίζεται 
βαριά φορτία ή απροσδόκητη αποτυχία να συνεχίσει τις τυπικές λειτουργίες (π.χ. με την κατανομή πρόσθετων πόρων). 
Η δοκιμή αποτυχίας συνδέεται επίσης με την επικύρωση της ανάκτησης.

* Δοκιμές αξιοπιστίας: Η δοκιμή αξιοπισίας αξιολογεί την αξιοπιστία του συστήματος υπό δοκιμή με τον εντοπισμό και 
τη διόρθωση σφαλμάτων. Η δοκιμή αξιοπιστίας παρατηρεί το σύστημα υπό δοκιμή σε λειτουργία ή ασκεί το σύστημα υπό δοκιμή 
χρησιμοποιώντας δοκιμαστικές περιπτώσεις σύμφωνα με στατιστικά μοντέλα (λειτουργικά προφίλ) των διαφορετικών συμπεριφορών 
των χρηστών. Συνήθως, η αξιοπιστία αξιολογείται μέσω μοντέλων ανάπτυξης αξιοπιστίας. Οι διαδικασίες συνεχούς ανάπτυξης 
(όπως το DevOps) διευκολύνουν σήμερα την υιοθέτηση δοκιμών αξιοπιστίας στις διάφορες επαναλήψεις για τη βελτίωση της 
τελικής ποιότητας του συστήματος υπό δοκιμή.

* Δοκιμή συμβατότητας [4, μέρος 1]: Οι δοκιμές συμβατότητας χρησιμοποιούνται για να επαληθευτεί αν το λογισμικό 
μπορεί να συνεργαστεί με διαφορετικές εγκαταστάσεις υλικού και λογισμικού ή με διάφορες εκδόσεις ή κυκλοφορίες.

* Δοκιμές κλιμάκωσης: Η δοκιμή κλίμακωσης αξιολογεί την ικανότητα χρήσης και εκμάθησης του συστήματος και 
της τεκμηρίωσης του χρήστη. Εστιάζεται επίσης στην αποτελεσματικότητα του συστήματος στην υποστήριξη των 
εργασιών του χρήστη και στην ικανότητα ανάκτησης λαθών των χρηστών. Αυτή η δοκιμή είναι ιδιαίτερα σημαντική 
σε κατανεμημένα ή υψηλής απόδοσης συστήματα.

* Δοκιμές ελαστικότητας: Οι δοκιμές ελαστικότητας αξιολογούν την ικανότητα των συστημάτων υπό δοκιμή 
(όπως το cloud και τα κατανεμημένα συστήματα) να επεκτείνουν ή να συρρικνώνουν γρήγορα τους πόρους 
υπολογιστή, μνήμης και αποθήκευσης χωρίς να θέτουν σε κίνδυνο τη δυνατότητα να ανταποκριθούν στη μέγιστη χρήση. 
Ορισμένοι στόχοι δοκιμών ελαστικότητας είναι ο έλεγχος των συμπεριφορών, ο προσδιορισμός των πόρων που πρέπει να (μη)κατανεμηθούν,
ο παράλληλος συντονισμός των γεγονότων και η αξιολόγηση της επεκτασιμότητας (scalability).

* Δοκιμές υποδομών [8, παράρτημα H]:  Οι δοκιμές υποδομών ελέγχουν και επικυρώνουν 
στοιχεία υποδομής για τη μείωση των πιθανών χρόνων διακοπής λειτουργίας και τη βελτίωση 
της απόδοσης των υποδομών πληροφορικής.

* Αναδρομικές δοκιμές (Back-to-back Testing): Το πρότυπο IEEE/ISO/IEC 24765 ορίζει τις δοκιμές 
αναδρομής ως «δοκιμές στις οποίες δύο ή περισσότερες παραλλαγές ενός προγράμματος εκτελούνται με 
τις ίδιες εισόδους, οι εξόδοι συγκρίνονται και τα σφάλματα αναλύονται σε περιπτώσεις διαφωνίας».

*Δοκιμές ανάκτησης: Οι δοκιμές ανάκτησης αποσκοπούν στην επαλήθευση των δυνατοτήτων επανεκκίνησης 
του λογισμικού μετά από κατάρρευση του συστήματος ή άλλες καταστροφές.

#### Δοκιμές ασφάλειας [Μέρος 4 Παράρτημα Α]

Οι *δοκιμές ασφάλειας* επικεντρώνονται στην επικύρωση ότι το σύστημα υπό δοκιμή προστατεύεται από εξωτερικές επιθέσεις. 
Πιο συγκεκριμένα, επαληθεύει την εμπιστευτικότητα, την ακεραιότητα και τη διαθεσιμότητα των συστημάτων και των δεδομένων 
τους. Συνήθως, οι δοκιμές ασφαλείας περιλαμβάνουν την επικύρωση κατά της κατάχρησης και της κακοποίησης του λογισμικού ή 
του συστήματος. (negative testing). (βλ. Έλεγχος ασφάλειας στο γνωστικό πεδίο Ασφάλεια Λογισμικού.)

#### Δοκιμές απορρήτου 

Οι *δοκιμές απορρήτου* είναι αφιερωμένες στην αξιολόγηση της ασφάλειας και της ιδιωτικότητας των προσωπικών δεδομένων 
των χρηστών για την πρόληψη τοπικών επιθέσεων. Αξιολογεί ειδικά τις πολιτικές απορρήτου και ανταλλαγής πληροφοριών, 
καθώς και την επικύρωση της αποκεντρωμένης διαχείρισης των κοινωνικών προφίλ των χρηστών και των λύσεων αποθήκευσης 
δεδομένων. (βλ. νομικά θέματα στο γνωστικό πεδίο επαγγελματική πρακτική τεχνολογιών λογισμικού.)

Δοκιμή διεπαφής και διεπαφής προγραμμάτων εφαρμογών (API) 

Τα ελαττώματα διεπαφής είναι κοινά σε πολύπλοκα συστήματα. Η *δοκιμή διεπαφής* αποσκοπεί στην επαλήθευση του κατά 
πόσον η διεπαφή των στοιχείων παρέχει την ορθή ανταλλαγή δεδομένων και πληροφοριών ελέγχου. Συνήθως, οι περιπτώσεις 
δοκιμών δημιουργούνται από τις προδιαγραφές της διεπαφής. Ένας συγκεκριμένος στόχος δοκιμών διεπαφής είναι η προσομοίωση 
της χρήσης των API από εφαρμογές τελικού χρήστη. Αυτό περιλαμβάνει τη δημιουργία παραμέτρων των κλήσεων API, τη ρύθμιση 
των συνθηκών του εξωτερικού περιβάλλοντος και τον καθορισμό των εσωτερικών δεδομένων που επηρεάζουν το API. 

#### Δοκιμές διαμόρφωσης 

Όταν το σύστημα υπό δοκιμή είναι κατασκευασμένο για να εξυπηρετεί διαφορετικούς χρήστες, 
η *δοκιμή διαμόρφωσης* επαληθεύει το λογισμικό κάτω από καθορισμένες διαμορφώσεις.

####  Έλεγχος ευχρηστίας και αλληλεπίδρασης ανθρώπου-υπολογιστή

Το κύριο καθήκον του *ελέγχου ευχρηστίας και αλληλεπίδρασης ανθρώπου-υπολογιστή*
είναι να αξιολογήσει πόσο εύκολο είναι για τους τελικούς χρήστες να
μάθουν και να χρησιμοποιούν το λογισμικό. Σε γενικές γραμμές, μπορεί
να περιλαμβάνει έλεγχο των λειτουργιών του λογισμικού που υποστηρίζει
τις εργασίες των χρηστών, τεκμηρίωση που βοηθά τους χρήστες, καθώς
και την ικανότητα του συστήματος να επανέλθει από τα λάθη των χρηστών.
(βλ. ενότητα Σχεδίαση εστιασμένη στον χρήστη, στο γνωστικό πεδίο Σχεδιασμός
λογισμικού)

## Τεχνικές ελέγχου 

Με την πάροδο των ετών, έχουν αναπτυχθεί διαφορετικές τεχνικές δοκιμών για την αύξηση της 
συνολικής ποιότητας του συστήματος υπό δοκιμή [4, μέρος 4]. Αυτές οι τεχνικές προσπαθούν 
να προτείνουν συστηματικές διαδικασίες και προσεγγίσεις για τη δημιουργία ή την επιλογή 
των πιο κατάλληλων δοκιμών για την ανίχνευση όσο το δυνατόν περισσότερων αποτυχιών.

Οι τεχνικές δοκιμών μπορούν να ταξινομηθούν λαμβάνοντας υπόψη διαφορετικές βασικές 
πτυχές όπως οι προδιαγραφές, η δομή και η εμπειρία [4, μέρος 4]. Πρόσθετες πηγές 
ταξινόμησης μπορεί να είναι τα ελαττώματα που πρέπει να ανακαλυφθούν, η προβλεπόμενη 
χρήση, τα μοντέλα, η φύση της εφαρμογής ή οι παραγόμενες γνώσεις. Για παράδειγμα, 
η δοκιμή με βάση το μοντέλο [4, μέρος 1] αναφέρεται σε όλες τις τεχνικές δοκιμών 
που χρησιμοποιούν την έννοια ενός μοντέλου που αντιπροσωπεύει τις προδιαγραφές 
συμπεριφοράς, τη δομή του συστήματος υπό δοκιμή ή τις διαθέσιμες γνώσεις και εμπειρίες. 
Ωστόσο, είναι δυνατή η επικάλυψη της ταξινόμησης και μια κατηγορία μπορεί να ασχολείται 
με τον συνδυασμό δύο ή περισσότερων τεχνικών.

Εναλλακτικές ταξινομήσεις που βασίζονται στον βαθμό πληροφόρησης για το σύστημα υπό δοκιμή 
είναι διαθέσιμες στη βιβλιογραφία. Πράγματι, στις τεχνικές που βασίζονται στις προδιαγραφές, 
γνωστές και ως τεχνικές *μαύρου κουτιού*, η παραγωγή δοκιμαστικών περιπτώσεων βασίζεται μόνο 
στην συμπεριφορά εισόδου/εξόδου του συστήματος υπό δοκιμή, ενώ στις τεχνικές με βάση τη δομή, 
που ονομάζονται επίσης τεχνικές *λευκού κουτιού* (ή *γυάλινο κουτί* ή *καθαρό κουτί*), οι περιπτώσεις 
δοκιμών δημιουργούνται χρησιμοποιώντας τις πληροφορίες για το πώς σχεδιάστηκε ή κωδικοποιήθηκε 
το σύστημα υπό δοκιμή.

Δεδομένου ότι ορισμένες τεχνικές δοκιμών χρησιμοποιούνται περισσότερο από άλλες, το υπόλοιπο τμήμα 
παρουσιάζει τις τυποποιημένες μεθόδους δοκιμής και εκείνες που υιοθετούνται συνήθως στο στάδιο της πρακτικής.

### Τεχνικές βασισμένες σε προδιαγραφές

Η βασική ιδέα των *τεχνικών που βασίζονται σε προδιαγραφές*
(που μερικές φορές αποκαλούνται επίσης τεχνικές ελέγχου τομέα) είναι 
η επιλογή μερικών περιπτώσεων δοκιμής από τον τομέα εισόδου που 
μπορούν να ανιχνεύσουν συγκεκριμένες κατηγορίες σφαλμάτων (που ονομάζονται επίσης σφάλματα τομέα). 
Αυτές οι τεχνικές ελέγχουν αν το σύστημα υπό δοκιμή μπορεί να διαχειριστεί εισόδους εντός ενός συγκεκριμένου 
εύρους και να επιστρέφει την απαιτούμενη έξοδο.

#### Κατάτμηση ισοδυναμίας 

Η *κατάτμηση ισοδυναμίας* (equivalence partioning) περιλαμβάνει την κατάτμηση των τομέων εισόδου σε μια συλλογή 
υποσυνόλων (ή κλάσεις ισοδυναμίας) με βάση ένα καθορισμένο κριτήριο ή σχέση. Αυτό το 
κριτήριο ή η σχέση μπορεί να είναι διαφορετικά
υπολογιστικά αποτελέσματα, μια σχέση βασισμένη στη ροή ελέγχου 
ή τη ροή δεδομένων, ή μια διάκριση μεταξύ έγκυρων 
εισόδων που γίνονται αποδεκτές και επεξεργάζονται από το σύστημα υπό δοκιμή και 
μη έγκυρες εισόδους, όπως τιμές εκτός εύρους, που δεν 
γίνονται δεκτές και πρέπει να παράγουν μήνυμα σφάλματος ή 
να ξεκινήσει επεξεργασία σφάλματος. Μια αντιπροσωπευτική σουίτα δοκιμών 
(που μερικές φορές περιέχει μόνο μία περίπτωση δοκιμής) συνήθως 
λαμβάνεται από κάθε κλάση ισοδυναμίας.

#### Ανάλυση οριακών τιμών 

Οι περιπτώσεις δοκιμής επιλέγονται πάνω ή κοντά στα όρια του 
τομέα εισόδου των μεταβλητών, με την υποκείμενη 
λογική ότι πολλά σφάλματα τείνουν να συγκεντρώνονται κοντά στα 
ακραίες τιμές των εισόδων. Μια επέκταση αυτής της 
τεχνική είναι ο *έλεγχος ευρωστίας* (robustness testing), όπου οι περιπτώσεις δοκιμής 
επιλέγονται επίσης εκτός του πεδίου εισόδου των μεταβλητών για να 
να ελεγχθεί η ευρωστία του προγράμματος στην επεξεργασία απροσδόκητων ή 
λανθασμένων εισόδων. 

#### Δοκιμή σύνταξης

Οι τεχνικές ελέγχου σύνταξης, γνωστές και ως τυπικές 
τεχνικές που βασίζονται στις προδιαγραφές, βασίζονται στις
προδιαγραφές του συστήματος υπό δοκιμή σε μια τυπική γλώσσα. (βλ. 
Επίσημοι Μέθοδοι στο γνωστικό πεδίο Μοντέλα  και Μέθοδοι Μηχανικής Λογισμικού.) 
Αυτή η αναπαράσταση επιτρέπει την αυτόματη παραγωγή περιπτώσεων λειτουργικών δοκιμών και, ταυτόχρονα 
παρέχει ένα μαντείο (oracle) για τον έλεγχο των αποτελεσμάτων των δοκιμών.

#### Συνδυαστικές τεχνικές δοκιμών 

Οι τεχνικές συνδυαστικής δοκιμής συστηματικά 
προκύπτουν οι περιπτώσεις δοκιμής που καλύπτουν συγκεκριμένες παραμέτρους τιμών ή συνθηκών. 
Σύµφωνα µε το [4, µέρος 4], οι συνήθως χρησιµοποιούµενες τεχνικές συνδυαστικών δοκιµών είναι οι εξής: 
έλεγχος όλων των συνδυασμών (All-Combinations Testing), έλεγχος κατά ζεύγη (Pair-Wise Testing), 
έλεγχος κάθε επιλογής (Each Choice Testing) και έλεγχος βασικής επιλογής (Base Choice Testing). 
Η δοκιμή όλων των συνδυασμών επικεντρώνεται σε όλες τις πιθανούς συνδυασμούς εισόδων, ενώ το υποσύνολό του, 
που ονομάζεται επίσης t-wise δοκιμή, εξετάζει κάθε πιθανό συνδυασμό των t εισόδου. Στην περίπτωση αυτή, 
προκύπτουν περισσότερα από ένα ζεύγη (δηλ, με τη συμπερίληψη συνδυασμών υψηλότερου επιπέδου). Ο έλεγχος κατά ζεύγη
είναι μια ειδική τεχνική συνδυαστικής δοκιμής όπου οι περιπτώσεις δοκιμής προκύπτουν από το συνδυασμό τιμών των 
κάθε ζεύγους ενός συνόλου εισόδου. Αυτές οι τεχνικές είναι επίσης 
γνωστές ως δοκιμές ορθογώνιων συστοιχιών (OAT).

#### Πίνακας αποφάσεων

Οι *πίνακες αποφάσεων* (ή δέντρα) αναπαριστούν λογικές 
σχέσεις μεταξύ συνθηκών (περίπου, εισροών) και 
ενέργειες (κατά προσέγγιση, έξοδοι). Συνήθως, 
υιοθετούνται ευρέως για την αναπαράσταση γνώσης (π.χ., Μηχανική Μάθηση). 
Οι περιπτώσεις δοκιμών προκύπτουν συστηματικά εξετάζοντας κάθε πιθανό συνδυασμό 
συνθηκών και τις αντίστοιχες ενέργειες που προκύπτουν. Μια  
συναφής τεχνική είναι η *γραφική απεικόνιση αιτίου-αποτελέσματος* (cause-effect graphing). Επί του παρόντος, 
οι διαδικασίες ανάπτυξης με αριστερή μετατόπιση (shift-left development) εκμεταλλεύονται 
αυτού του είδους της τεχνικής δοκιμών επειδή αυτές οι 
τεχνικές είναι χρήσιμες για την τεκμηρίωση των αποτελεσμάτων των δοκιμών 
και των παραγόντων που μπορούν να τα επηρεάσουν.

#### Γραφική παράσταση αιτίου-αποτελέσματος

Οι τεχνικές *γραφικών παραστάσεων αιτίου-αποτελέσματος* βασίζονται σε λογικά δίκτυα που αντιστοιχίζουν ένα 
σύνολο αιτιών σε ένα σύνολο αποτελεσμάτων εξερευνώντας συστηματικά τους πιθανούς συνδυασμούς των 
συνθηκών εισόδου. Προσδιορίζουν τα αποτελέσματα και συνδέουν τα αποτελέσματα με τις αιτίες τους μέσω γραφικών παραστάσεων μοντέλων. 
Οι τεχνικές γραφικών παραστάσεων αιτίου-αποτελέσματος χρησιμοποιούνται στις δοκιμές επειδή 
επιτρέπουν την ανάλυση προδιαγραφών, τον εντοπισμό των σχετικών συνθηκών εισόδου ή αιτιών, των επακόλουθων 
μετασχηματισμών και των συνθηκών εξόδου.

#### Δοκιμές μετάβασης καταστάσεων 

Τεχνικές που βασίζονται σε μηχανές πεπερασμένης κατάστασης (*Κατάσταση 
τεχνικών ελέγχου μετάβασης* στο [4, μέρος 4]) επικεντρώνονται 
στην αναπαράσταση του συστήματος υπό δοκιμή με μια μηχανή πεπερασμένων καταστάσεων. 
Σε αυτή την περίπτωση, η σουίτα δοκιμών προκύπτει για να καλύψει τις καταστάσεις και 
τις μεταβάσεις σύμφωνα με ένα συγκεκριμένο επίπεδο κάλυψης. 

#### Δοκιμές βασισμένες σε σενάρια 

Ένα μοντέλο σε αυτό το πλαίσιο είναι μια αφηρημένη (τυπική) αναπαράσταση του συστήματος υπό 
δοκιμή ή των απαιτήσεων του λογισμικού. (βλ. μοντελοποίηση στο γνωστικό πεδίο
Μοντέλα και Μέθοδοι Τεχνολογίας Λογισμικού.) Η *δοκιμή βάσει σεναρίων* χρησιμοποιείται για την 
επικύρωση απαιτήσεων, τον έλεγχο των συνέπειών τους, και τη δημιουργία περιπτώσεων δοκιμών που 
εστιάζουν στις πτυχές συμπεριφοράς του συστήματος υπό δοκιμή. (Βλέπε Τύποι μοντέλων 
στο γνωστικό πεδίο Μοντέλα και μέθοδοι μηχανικής λογισμικού.) Τα βασικά συστατικά στοιχεία της δοκιμής βάσει σεναρίου 
είναι ο συμβολισμός που χρησιμοποιείται για την αναπαράσταση του μοντέλου του 
λογισμικού ή των απαιτήσεών του, τα μοντέλα ροής εργασιών ή 
παρόμοια μοντέλα, η στρατηγική δοκιμής ή ο αλγόριθμος που χρησιμοποιείται για 
τη δημιουργία περιπτώσεων δοκιμής, η υποστηρικτική υποδομή για 
την εκτέλεση της δοκιμής, και η αξιολόγηση των αποτελεσμάτων της δοκιμής
συγκριτικά με τα αναμενόμενα αποτελέσματα. Λόγω της 
πολυπλοκότητας των τεχνικών, η δοκιμή βάσει σεναρίου 
χρησιμοποιούνται συχνά με εργαλεία αυτοματοποίησης δοκιμών.

Μεταξύ των δοκιμών βάσει σεναρίων, τα μοντέλα ροής εργασιών μπορούν 
επίσης να χρησιμοποιηθούν για τη γραφική αναπαράσταση της ακολουθίας των 
δραστηριοτήτων που εκτελούνται από ανθρώπους ή/και  
εφαρμογές λογισμικού. Στην περίπτωση αυτή, κάθε ακολουθία ενεργειών 
αποτελεί μια ροή εργασίας (που ονομάζεται επίσης σενάριο). 
Συνήθως, είναι σημαντικό να διασφαλίζεται ότι τόσο οι τυπικές όσο και οι 
εναλλακτικές ροές εργασίας επίσης δοκιμάζονται . Για παράδειγμα, 
η δοκιμή επιχειρησιακών διαδικασιών αποτελεί μέρος αυτής της βασισμένης σε σενάρια 
τεχνική. Στην περίπτωση αυτή, η ιδιαίτερη έμφαση δίνεται στους ρόλους 
σε μια προδιαγραφή ροής εργασίας.

#### Τυχαία δοκιμή 

Σε αυτή την προσέγγιση, οι περιπτώσεις δοκιμής παράγονται καθαρά 
τυχαία. Αυτή η δοκιμή εμπίπτει στην κατηγορία της εισόδου 
επειδή ο τομέας εισόδου πρέπει να είναι 
γνωστός για να είναι δυνατή η επιλογή τυχαίων σημείων εντός αυτού. 
Η *τυχαία δοκιμή* (random testing) παρέχει μια σχετικά απλή προσέγγιση 
στην αυτοματοποίηση δοκιμών. Ενισχυμένες μορφές τυχαίας δοκιμής 
(όπως η προσαρμοστική τυχαία δοκιμή) έχουν προταθεί 
στις οποίες άλλα κριτήρια επιλογής εισόδου κατευθύνουν την 
τυχαία δειγματοληψία εισόδου.

Επί του παρόντος, με την ονομασία ασαφής δοκιμή (fuzzy testing), η τυχαία 
επιλογή μη έγκυρων και απροσδόκητων εισόδων και δεδομένων 
χρησιμοποιείται εκτενώς στην ασφάλεια στον κυβερνοχώρο για την εύρεση παραβιάσιμων 
σφαλμάτων λογισμικού, λαθών κωδικοποίησης και κενά ασφαλείας. 
(βλ. επίσης τις ενότητες 2.2.8 και 8.2).

#### Βασισμένο σε στοιχεία (Evidence-Based)

Η *βασισμένη σε αποδείξεις μηχανική λογισμικού* (EBSE), η οποία 
ακολουθεί μια αυστηρή ερευνητική προσέγγιση, είναι η καλύτερη 
λύση για ένα πρακτικό πρόβλημα. Η EBSE περιλαμβάνει την 
τις ακόλουθες φάσεις: 
* Προσδιορισμός των αποδεικτικών στοιχείων και διαμόρφωση ερώτησης
* Εντοπισμός των καλύτερων αποδεικτικών στοιχείων για να απαντηθεί η 
ερώτηση
* Κριτική ανάλυση των αποδεικτικών στοιχείων υπό το πρίσμα της 
προβλήματος στο οποίο τα αποδεικτικά στοιχεία θα πρέπει να συμβάλουν στην επίλυση.
Οι αρχές της EBSE μπορούν επίσης να εφαρμοστούν στη  
διαδικασία ελέγχου. Για το σκοπό αυτό, οι ευρέως χρησιμοποιούμενες προσεγγίσεις 
που επιτρέπουν τον εντοπισμό και τη συγκέντρωση αποδεικτικών στοιχείων είναι 
οι μελέτες συστηματικής χαρτογράφησης και οι συστηματικές ανασκοπήσεις.

#### Εξαναγκαστική Εξαίρεση (Forcing Exception)
[5] 
Οι περιπτώσεις δοκιμής σχεδιάζονται ειδικά για τον έλεγχο 
αν το σύστημα υπό δοκιμή μπορεί να διαχειριστεί ένα προκαθορισμένο σύνολο 
εξαιρέσεων/σφαλμάτων, όπως εξαίρεση δεδομένων, λειτουργία 
εξαίρεση, εξαίρεση υπερχείλισης, εξαίρεση προστασίας ή 
εξαίρεση υπερχείλισης. Οι τεχνικές δοκιμών συνήθως επικεντρώνονται 
σε αρνητικά σενάρια δοκιμών (δηλαδή, περιπτώσεις δοκιμών που είναι σε θέση να 
να εξαναγκάσουν τη δημιουργία μηνυμάτων σφάλματος).

### Τεχνικές δοκιμών βασισμένες στη δομή
[4, μέρος 4]
Οι *τεχνικές δοκιμών βασισμένες στη δομή* (μερικές φορές αποκαλούμενες 
*τεχνικές δοκιμής με βάση τον κώδικα*) εστιάζουν στον κώδικα και την 
δομή του. Οι τεχνικές δοκιμής με βάση τη δομή μπορούν να εκτελούνται σε διαφορετικά επίπεδα 
(όπως η ανάπτυξη κώδικα, η επιθεώρηση κώδικα ή η δοκιμή μονάδας) και μπορούν να 
περιλαμβάνουν στατικές δοκιμές (όπως επιθεώρηση κώδικα, έλεγχο κώδικα 
και αναθεώρηση κώδικα), δυναμικές δοκιμές (όπως 
κάλυψη εντολών, κάλυψη διακλαδώσεων και κάλυψη διαδρομής), ή μέτρηση της πολυπλοκότητας του 
κώδικα (π.χ, χρησιμοποιώντας τεχνικές όπως η κυκλωματική πολυπλοκότητα [12]). 

#### Δοκιμή ροής ελέγχου 

Ο *έλεγχος ροής ελέγχου* καλύπτει όλες τις δηλώσεις, 
διακλαδώσεις, αποφάσεις, συνθήκες διακλαδώσεων, τροποποιημένες 
κάλυψη απόφασης συνθήκης (MC/DC), μπλοκ δηλώσεων
ή συγκεκριμένους συνδυασμούς δηλώσεων σε ένα 
σύστημα υπό δοκιμή. Το ισχυρότερο από τα κριτήρια που βασίζονται στη ροή ελέγχου 
είναι η δοκιμή διαδρομής, η οποία στοχεύει στην εκτέλεση όλων των εισόδων-εξόδων 
διαδρομών ροής ελέγχου στο γράφημα ροής ελέγχου ενός συστήματος υπό δοκιμή. 
Επειδή ο εξαντλητικός έλεγχος διαδρομής δεν είναι γενικά  εφικτός λόγω βρόχων, άλλα λιγότερο αυστηρά κριτήρια 
επικεντρώνονται στην κάλυψη διαδρομών που περιορίζουν τις επαναλήψεις βρόχων, 
όπως η κάλυψη εντολών, η κάλυψη διακλαδώσεων και 
δοκιμή συνθηκών/αποφάσεων. Η επάρκεια αυτών των δοκιμών 
μετράται σε ποσοστά- για παράδειγμα, όταν όλες οι 
διακλαδώσεις έχουν εκτελεστεί τουλάχιστον μία φορά από τις δοκιμές, 
έχει επιτευχθεί 100% κάλυψη διακλαδώσεων.

#### Δοκιμές ροής δεδομένων 

Στη *δοκιμή ροής δεδομένων*, το γράφημα ροής ελέγχου είναι 
με πληροφορίες σχετικά με τον τρόπο με τον οποίο οι μεταβλητές 
ορίζονται, χρησιμοποιούνται και σκοτώνονται (απροσδιόριστες). Συνηθισμένες 
υιοθετούμενες τεχνικές ελέγχου ροής δεδομένων είναι η δοκιμή όλων των ορισμών, 
η δοκιμή όλων των χρήσεων C, η δοκιμή όλων των χρήσεων P, η δοκιμή όλων των χρήσεων 
και η δοκιμή όλων των μονοπατιών DU. Το ισχυρότερο κριτήριο δοκιμής ροής δεδομένων είναι 
η δοκιμή όλων των μονοπατιών DU , όπου πρέπει να καλύπτονται όλες οι διαδρομές ορισμού και 
χρήσης (DU). Αυτό οφείλεται στο γεγονός ότι απαιτεί την εκτέλεση, για κάθε μεταβλητή, 
κάθε διαδρομής ροής ελέγχου από τον ορισμό αυτής της μεταβλητής έως της χρήσης 
του ορισμού αυτού. Ωστόσο, χρησιμοποιούνται ασθενέστερες στρατηγικές, όπως οι η δοκιμή 
όλων των ορισμών και η δοκιμή όλων των χρήσεων, για να μειωθεί ο αριθμός 
των απαιτούμενων διαδρομών.

#### Μοντέλα αναφοράς για τεχνικές δοκιμής με βάση τη δομή 

Αν και δεν αποτελεί τεχνική, η δομή ελέγχου ενός συστήματος υπό δοκιμή (SUT)
μπορεί να αναπαρασταθεί γραφικά χρησιμοποιώντας ένα γράφημα ροής  
για την οπτικοποίηση *τεχνικών δοκιμών βασισμένων στη δομή*. Ένα γράφημα ροής  είναι 
ένας κατευθυνόμενος γράφος, οι κόμβοι και τα τόξα του οποίου 
αντιστοιχούν σε στοιχεία του προγράμματος. (Βλέπε Γράφοι και 
Δέντρα στο γνωστικό πεδίο Μαθηματικά θεμέλια.) Για 
παράδειγμα, οι κόμβοι μπορεί να αντιπροσωπεύουν εντολές ή 
αδιάκοπες ακολουθίες δηλώσεων, και τα τόξα μπορεί να 
αντιπροσωπεύουν τη μεταφορά ελέγχου μεταξύ κόμβων.

### *Τεχνικές βασισμένες στην εμπειρία*
[4, μέρος 1, μέρος 4]
Η δημιουργία της καταλληλότερης σουίτας δοκιμών μπορεί να 
εξαρτηθεί από διάφορους παράγοντες, όπως η ανθρώπινη γνώση 
του συστήματος υπό δοκιμή και του περιβάλλοντός του και της εμπειρίας και διαίσθησης του/της. 
Στην ενότητα που ακολουθεί, οι συνήθεις τεχνικές που βασίζονται στην εμπειρία 
παρουσιάζονται συνοπτικά.

#### *Εικασία σφαλμάτων* (Error Guessing)

Στην *εικασία σφάλματος*, οι μηχανικοί λογισμικού σχεδιάζουν περιπτώσεις δοκιμών 
ειδικά για να προβλέψουν τα πιο πιθανά σφάλματα στο 
κάθε SUT. Καλές πηγές πληροφοριών είναι το ιστορικό 
των σφαλμάτων που ανακαλύφθηκαν σε προηγούμενα έργα και 
η τεχνογνωσία του μηχανικού λογισμικού.

#### *Διερευνητική δοκιμή*
[4, μέρος 1]
Η *διερευνητική δοκιμή* ορίζεται ως η ταυτόχρονη 
μάθηση, ο σχεδιασμός δοκιμών και η εκτέλεση δοκιμών. Οι περιπτώσεις δοκιμής 
δεν ορίζονται εκ των προτέρων αλλά δυναμικά 
σχεδιάζονται, εκτελούνται και τροποποιούνται ανάλογα με τα
συγκεντρωμένα στοιχεία και αποτελέσματα των δοκιμών, όπως οι παρατηρούμενες 
συμπεριφορά του προϊόντος, οι ιδιαιτερότητες του SUT, ο τομέας 
και το περιβάλλον, η διαδικασία αποτυχίας, οι τύποι των 
πιθανών σφαλμάτων και αστοχιών, και ο κίνδυνος που συνδέεται 
με ένα συγκεκριμένο προϊόν. Συνήθως, η διαίσθηση, 
οι γνώσεις και η εμπειρογνωμοσύνη του προσωπικού που είναι υπεύθυνο για 
την εκτέλεση των διερευνητικών δοκιμών μπορεί να επηρεάσει την 
αποτελεσματικότητα των δοκιμών. Η διερευνητική δοκιμή 
χρησιμοποιείται ευρέως στην ανάπτυξη με αριστερή μετατόπιση (όπως η ευέλικτη). 
(Βλ. Ενότητα 5.4.2.) 

#### *Περαιτέρω τεχνικές βασισμένες στην εμπειρία*

Στην κατάσταση της πρακτικής, οι *βασισμένες στην εμπειρία 
τεχνικές* μπορεί να περιλαμβάνουν περαιτέρω προσεγγίσεις όπως οι επί-τούτο βασισμένες (Ad-Hoc), 
οι βασισμένες στη γνώση και οι δοκιμές βασισμένες στην Μηχανική Μάθηση (ML). 

Η δοκιμή Ad Hoc είναι μια ευρέως χρησιμοποιούμενη τεχνική στην οποία 
περιπτώσεις δοκιμών προκύπτουν βασιζόμενες στην
δεξιότητα, τη διαίσθηση και την εμπειρία του μηχανικού λογισμικού με παρόμοια 
προγράμματα. Μπορεί να είναι χρήσιμη για τον εντοπισμό περιπτώσεων δοκιμής 
που δεν παράγονται εύκολα από πιο τυποποιημένες 
τεχνικές. Τυπικές Ad Hoc μεθοδολογίες είναι οι 
ακόλουθες:

* Η δοκιμή μαϊμού εκτελεί τυχαία παραγόμενες δοκιμές 
περιπτώσεων για να προκαλέσει τη διακοπή του προγράμματος. 
* Η δοκιμή Buddy δημιουργεί περιπτώσεις δοκιμών χρησιμοποιώντας 
εσωτερικής γνώσης της αρχιτεκτονικής και των δοκιμών 
ειδικών γνώσεων.
* Η δοκιμή ζεύγους περιλαμβάνει δύο άτομα. Το ένα 
παράγει και εκτελεί τις περιπτώσεις δοκιμών- το άλλο 
παρατηρεί και αναλύει τη διαδικασία δοκιμής. Η δοκιμή ζεύγους 
επιτρέπει τη δημιουργία περιπτώσεων δοκιμής με ευρεία και καλύτερη κάλυψη δοκιμών.
*Η παιχνιδοποίηση (gamification) αποσκοπεί στη μετατροπή των καθηκόντων δοκιμής σε 
συστατικά του παιχνιδιού. Με την εφαρμογή συγκεκριμένων 
τεχνικών (όπως η εμπλοκή των επαγγελματιών ή η 
εξωτερική ανάθεση πολύπλοκων εργασιών δοκιμών), 
η παιχνιδοποίηση μπορεί να βελτιώσει σημαντικά 
την πρακτική της δοκιμής λογισμικού και, κατά συνέπεια, την ποιότητα του SUT.
* Γρήγορη δοκιμή, κατά την οποία μια πολύ μικρή σουίτα δοκιμών 
επιλέγεται και εκτελείται, εγγυάται ότι καμία αποτυχία δεν
μπορεί να παρουσιαστεί εξαιτίας των στοιχείων του συστήματος υπό δοκιμή
που δεν είναι πλήρως λειτουργικά.
* Δοκιμές καπνού (επίσης γνωστές ως επαλήθευση δοκιμών κατασκευής) διασφαλίζει ότι οι κεντρικές 
λειτουργικότητες του συστήματος υπό δοκιμή συμπεριφέρονται σωστά. Επίσης 
εγγυάται ότι το σύστημα υπό δοκιμή είναι λειτουργικό πριν από την 
έναρξη των προγραμματισμένων δοκιμών. Επιπλέον, η δοκιμή καπνού 
αποτρέπει τις αποτυχίες λόγω του περιβάλλοντος δοκιμής 
(π.χ. επειδή τα αντικείμενα ή τα πακέτα
δεν έχουν κατασκευαστεί σωστά). Η δοκιμή καπνού θεωρείται επίσης 
μια ειδική περίπτωση γρήγορης δοκιμής.

Οι δοκιμές με βάση τη γνώση και οι δοκιμές με βάση την Μηχανική Μάθηση
εκμεταλλεύονται (τυπικά ή άτυπα) γνώσεις σχετικά με το σύστημα υπό δοκιμή
ή τις αντλούν από παρατηρήσεις των εκτελέσεων του SUT για 
τον ορισμό των μοντέλων συμπεριφοράς του (όπως οντολογίες ή 
πίνακες αποφάσεων) (βλ. ενότητα 3.6.1), κανόνων και μη λειτουργικών ιδιοτήτων. 
Επιπλέον, οι βασισμένες στη γνώση δοκιμές και οι δοκιμές που βασίζονται στην Μηχανική Μάθηση 
καθορίζουν τις ανάγκες δοκιμής και προσδιορίζουν τους στόχους δοκιμής για τους οποίους οι 
περιπτώσεις δοκιμής παράγονται.

### Τεχνικές βασισμένες σε σφάλματα και μετάλλαξη 

Με διαφορετικούς βαθμούς τυποποίησης, οι *βασισμένες σε σφάλματα*
τεχνικές δοκιμών επινοούν περιπτώσεις δοκιμών ειδικά για να 
να αποκαλύψουν πιθανές ή προκαθορισμένες κατηγορίες σφαλμάτων. Ένα *μοντέλο σφάλματος* μπορεί να εισαχθεί που ταξινομεί τα διάφορα
σφάλματα για την καλύτερη εστίαση της δημιουργίας περιπτώσεων δοκιμής ή 
επιλογής. Σε αυτό το πλαίσιο, μια ποικιλία από πλατφόρμες και 
διαδικασίες ανάπτυξης (π.χ. καταρράκτης, σπειροειδής και 
ευέλικτη) θεωρούν την ορθογώνια ταξινόμηση ελαττωμάτων 
(ODC) μια έγκυρη μεθοδολογία για τη συλλογή σημασιολογικών 
πληροφοριών σχετικά με τα διάφορα ελαττώματα και τη μείωση 
του χρόνου και της προσπάθειας της ανάλυσης της αιτίας.

Ο *έλεγχος μετάλλαξης* (Mutation Testing) σχεδιάστηκε αρχικά ως μια τεχνική για την αξιολόγηση των σουιτών δοκιμών 
(βλ. Ενότητα 4.2, Αξιολόγηση των δοκιμών που εκτελούνται) στην οποία μια μετάλλαξη είναι μια 
ελαφρώς τροποποιημένη έκδοση του συστήματος υπό δοκιμή (που ονομάζεται επίσης *χρυσός*), που διαφέρει από αυτήν από 
μια μικρή συντακτική αλλαγή. Κάθε δοκιμαστική περίπτωση ασκεί τόσο τη χρυσή έκδοση όσο και όλες 
τις παραγόμενες μεταλλάξεις.Εάν μια δοκιμαστική περίπτωση καταφέρει να εντοπίσει τη διαφορά μεταξύ της χρυσής έκδοσης 
και μίας μετάλλαξης, το τελευταίο λέγεται ότι «σκοτώθηκε». Η βασική υπόθεση του ελέγχου μετάλλαξης, το φαινόμενο σύζευξης, 
είναι ότι πιο περίπλοκα αλλά πραγματικά σφάλματα θα βρεθούν αναζητώντας απλά συντακτικά σφάλματα. Για να είναι αποτελεσματική 
η τεχνική, πολλές μεταλλάξεις πρέπει να παράγονται αυτόματα και να εκτελούνται συστηματικά [6]. Ο έλεγχος μετάλλαξης είναι επίσης 
ένα κριτήριο δοκιμής από μόνο του. Οι δοκιμαστικές περιπτώσεις δημιουργούνται τυχαία μέχρι να σκοτωθούν αρκετές μεταλλάξεις ή οι 
δοκιμές έχουν σχεδιαστεί ειδικά για να σκοτώσουν τις επιζήσασες μεταλλάξεις. Στην τελευταία περίπτωση, ο έλεγχος μετάλλαξης μπορεί 
επίσης να κατηγοριοποιηθεί ως τεχνική βασισμένη στη δομή. Ο έλεγχος μετάλλαξης έχει χρησιμοποιηθεί αποτελεσματικά για τη δημιουργία 
ασαφών δοκιμών (Fuzzy Testing). Μια πιο πρόσφατη εφαρμογή της διαδικασίας μετάλλαξης είναι η μεταμορφική δοκιμή, μια τεχνική που έχει 
γίνει όλο και πιο δημοφιλής στην αντιμετώπιση των προκλήσεων δοκιμών ορισμένων συστημάτων Μηχανικής Μάθησης. Σε αυτήν την περίπτωση, οι 
τροποποιήσεις (που ονομάζονται επίσης morph) εφαρμόζονται στις εισόδους, έτσι ώστε μια σχέση να μπορεί να συνδέσει την προηγούμενη είσοδο 
(και την έξοδο της) με τη νέα μορφοποιημένη είσοδο (και την έξοδο της).

### Βασιζόμενοι στη διαίσθηση και την εμπειρία του μηχανικού λογισμικού

####  Ad Hoc

Ίσως, η πιο ευρέως διαδεδομένη πρακτική τεχνική είναι οι ad hoc δοκιμές:
οι δοκιμές που προέρχονται επικαλούμενες τις δεξιότητες του μηχανικού
λογισμικού, τη διαίσθηση και την εμπειρία με παρόμοια προγράμματα.
Οι ad hoc δοκιμές μπορούν να είναι χρήσιμες για την ταυτοποίηση των
περιπτώσεων ελέγχου που δεν παράγονται εύκολα από πιο επίσημες τεχνικές.

####  Διερευνητικές δοκιμές

Οι διερευνητικές δοκιμές ορίζονται ως η ταυτόχρονη μάθηση, σχεδιασμός
των δοκιμών, και εκτέλεση δοκιμών, δηλαδή, οι δοκιμές δεν είναι εκ
των προτέρων προσδιορισμένες σε ένα καθιερωμένο σχέδιο δοκιμών, αλλά
δυναμικά σχεδιάζονται, εκτελούνται, και τροποποιούνται.
Η αποτελεσματικότητα των διερευνητικών δοκιμών βασίζεται στη γνώση
του μηχανικού λογισμικού, η οποία μπορεί να προέρχεται από διάφορες
πηγές: παρατηρούμενη συμπεριφορά του προϊόντος κατά τη διάρκεια των
δοκιμών, η εξοικείωση με την εφαρμογή, την πλατφόρμα, την διεργασία
αποτυχίας, τον τύπο των πιθανών σφαλμάτων και αποτυχιών, τον κίνδυνο
που συνδέεται με ένα συγκεκριμένο προϊόν, και ούτω καθεξής.

### *Τεχνικές βασισμένες στη χρήση*

Οι *τεχνικές που βασίζονται στη χρήση* συνήθως βασίζονται σε ένα μοντέλο χρήσης 
ή προφίλ. Σε αυτήν την περίπτωση, το περιβάλλον δοκιμών χρειάζεται 
να αναπαραστά το πραγματικό επιχειρησιακό περιβάλλον, και 
η ακολουθία εκτέλεσης της δοκιμαστικής υπόθεσης πρέπει να αναπαράγει 
τη χρήση του συστήματος υπό δοκιμή από τον ενδιαφερόμενο-στόχο. 
Η  στατιστική δειγματοληψία χρησιμοποιείται για την προσομοίωση της εκτέλεσης πολλών 
δοκιμαστικών περιπτώσεων. Έτσι, μερικές φορές, ο όρος *τυχαία δοκιμή*
συνδέεται επίσης με αυτές τις τεχνικές. Ο στατιστικός έλεγχος βάσει χρήσης εφαρμόζεται περισσότερο κατά το στάδιο του ελέγχου αποδοχής.

#### Λειτουργικό προφίλ 

Η δοκιμή με βάση τα *λειτουργικά προφίλ* έχει ως στόχο 
τη δημιουργία περιπτώσεων δοκιμής που θα μπορούσαν να εκτιμήσουν την αξιοπιστία 
του SUT ή μέρους αυτού. Ως εκ τούτου, ο στόχος είναι να συναχθεί 
από τα παρατηρούμενα αποτελέσματα των δοκιμών η μελλοντική αξιοπιστία του 
του λογισμικού (όταν είναι σε χρήση). Επειδή η 
διαπιστωμένη αξιοπιστία εξαρτάται αυστηρά από τη λειτουργία 
προφίλ, η κύρια δυσκολία (και το κόστος) στη χρήση αυτής της 
προσέγγισης δοκιμών προέρχεται από την παραγωγή του λειτουργικού προφίλ. Επομένως, μια πιθανή λύση είναι 
να αποδοθούν στην είσοδο οι πιθανότητες ή τα προφίλ 
σύμφωνα με τη συχνότητα εμφάνισής τους σε πραγματική 
λειτουργία

#### Ευρετικές μέθοδοι παρατήρησης χρηστών

#Εξειδικευμένα ευρετικά*, που ονομάζονται επίσης *μέθοδοι επιθεώρησης ευχρηστίας*, 
εφαρμόζονται για τη συστηματική παρατήρηση της χρήσης συστήματος υπό ελεγχόμενες συνθήκες για να προσδιοριστεί πόσο καλά 
οι άνθρωποι μπορούν να χρησιμοποιούν το σύστημα και τις διεπαφές του. Οι
ευρετικές μέθοδοι ευχρηστίας περιλαμβάνουν γνωστικούς περιπάτους, ισχυρισμούς 
ανάλυση, επιτόπιες παρατηρήσεις, φωναχτή σκέψη, ακόμη και 
έμμεσες προσεγγίσεις, όπως ερωτηματολόγια χρηστών και 
συνεντεύξεις. 
### *Τεχνικές με βάση τη φύση της εφαρμογής*

Οι παραπάνω τεχνικές εφαρμόζονται σε όλα τα είδη λογισμικού. 
Πρόσθετες τεχνικές εξαγωγής και εκτέλεσης δοκιμών 
βασίζονται στη φύση του υπό δοκιμή λογισμικού. 
Παραδείγματα είναι τα ακόλουθα:

* Αντικειμενοστραφές λογισμικό 
* Λογισμικό βασισμένο σε συστατικά
* Λογισμικό βασισμένο στον Ιστό
* Ταυτόχρονα προγράμματα 
* Λογισμικό βασισμένο σε πρωτόκολλο
* Συστήματα επικοινωνίας
* Συστήματα πραγματικού χρόνου 
* Συστήματα κρίσιμης ασφάλειας
* Λογισμικό προσανατολισμένο στην υπηρεσία 
* Λογισμικό ανοικτού κώδικα 
* Ενσωματωμένο λογισμικό 
* Λογισμικό βασισμένο στο σύννεφο (cloud)
* Λογισμικό βασισμένο στo blockchain
* Λογισμικό βασισμένο σε μεγάλα δεδομένα
* Λογισμικό βασισμένο σε AI/ML/DL
* Εφαρμογές για κινητά
* Λογισμικό ασφάλειας και διατήρησης της ιδιωτικότητας

Σε ορισμένες περιπτώσεις, πρότυπα όπως το ISO/IEC/IEEE 29119 
[4, μέρος 4, μέρος 5] παρέχουν παραδείγματα και υποστήριξη για 
τον προσδιορισμό περιπτώσεων δοκιμών, την αυτοματοποίηση της εκτέλεσής τους και 
τη συντήρηση των συνόλων δοκιμών, όπως στην περίπτωση των
δοκιμών με βάση λέξεις-κλειδιά [4, μέρος 5].

### Επιλογή και συνδυασμός τεχνικών 

Ο συνδυασμός διαφορετικών τεχνικών δοκιμών έχει πάντα 
ένα καλά θεμελιωμένο μέσο για τη διασφάλιση των απαιτούμενων 
επίπεδο ποιότητας του SUT. Επί του παρόντος, ειδικά στην ανάπτυξη με αριστερή μετατόπιση, οι μεθοδολογίες για προσαρμοστικούς 
συνδυασμούς τεχνικών δοκιμών αποτελούν μέρος της κατάστασης 
της πρακτικής. Ο στόχος είναι η βελτίωση της 
αποτελεσματικότητας των διαδικασιών δοκιμών με τη μάθηση από 
εμπειρία και, ταυτόχρονα, την προσαρμογή της 
επιλογής της τεχνικής στην τρέχουσα περίοδο δοκιμών.

### *Επιλογή και συνδυασμός τεχνικών* 

Ο συνδυασμός διαφορετικών τεχνικών δοκιμών έχει πάντα 
ένα καλά τεκμηριωμένο μέσο για τη διασφάλιση της απαιτούμενης 
επίπεδο ποιότητας του SUT. Επί του παρόντος, ειδικά στην ανάπτυξη με αριστερή μετατόπιση, οι μεθοδολογίες για προσαρμοστικούς 
συνδυασμούς τεχνικών δοκιμών αποτελούν μέρος της κατάστασης 
της πρακτικής. Ο στόχος είναι η βελτίωση της 
αποτελεσματικότητας των διαδικασιών δοκιμών με τη μάθηση από 
εμπειρία και, ταυτόχρονα, την προσαρμογή των 
επιλογών της τεχνικής στην τρέχουσα περίοδο δοκιμών.

#### Συνδυασμός λειτουργικών και διαρθρωτικών

Οι τεχνικές δοκιμών που βασίζονται σε σενάρια και δομές 
συχνά αντιπαραβάλλονται ως *λειτουργικής* έναντι *δομικής* δοκιμής. 
Αυτές οι δύο προσεγγίσεις για την επιλογή περιπτώσεων δοκιμής 
σήμερα θεωρούνται συμπληρωματικές, καθώς χρησιμοποιούν διαφορετικές 
πηγές πληροφοριών και έχει αποδειχθεί ότι 
αναδεικνύουν διαφορετικά προβλήματα. Ανάλογα με τους 
διαφορετικούς οργανωτικούς περιορισμούς, όπως ο προϋπολογισμός,
θα μπορούσαν να συνδυαστούν.

#### Ντετερμινιστική vs. Τυχαία 

Οι περιπτώσεις δοκιμής μπορούν να επιλεγούν με ντετερμινιστικό τρόπο, 
σύμφωνα με πολλές τεχνικές, ή με τυχαίο τρόπο 
από κάποια κατανομή των εισόδων, όπως  συνήθως 
γίνεται στον έλεγχο αξιοπιστίας. Αρκετές αναλυτικές και 
εμπειρικές συγκρίσεις έχουν διεξαχθεί για να 
να αναλύσουν τις συνθήκες που καθιστούν μια προσέγγιση περισσότερο 
αποτελεσματική από την άλλη.

### Τεχνικές βασισμένες σε παράγωγη γνώση 

Οι τεχνικές δοκιμών μπορούν να ενσωματώσουν στοιχεία και 
γνώσεις από διαφορετικούς ερευνητικούς τομείς και πλαίσια. 
Για το σκοπό αυτό, χρησιμοποιούνται προσεγγίσεις και μεθοδολογίες για την
υποστήριξη της δραστηριότητας δοκιμών και τη βελτίωση της αποτελεσματικότητάς της. 
Επί του παρόντος, οι καινοτόμες προσεγγίσεις περιλαμβάνουν τη χρήση ψηφιακών 
δίδυμων ή μεθοδολογιών και πλαισίων προσομοίωσης, 
την αξιοποίηση δυνατοτήτων Μηχανικής Μάθησης και παιχνιδοποίησης και τη χρήση 
(προσομοιωμένων) νευρωνικών δικτύων.

## **Μέτρα που σχετίζονται με τις εξετάσεις**

Οι τεχνικές δοκιμών είναι σαν εργαλεία που βοηθούν στην επίτευξη 
συγκεκριμένων στόχων της δοκιμής. Για να αξιολογηθεί κατά πόσον 
επιτυγχάνεται ο στόχος της δοκιμής, απαιτούνται σαφώς καθορισμένα μέτρα. 
Οι μετρήσεις θεωρούνται συνήθως θεμελιώδεις για την ανάλυση της ποιότητας. Η μέτρηση μπορεί 
επίσης να χρησιμοποιηθεί για τη βελτιστοποίηση του σχεδιασμού και της εκτέλεσης δοκιμών. 
Η διαχείριση δοκιμών μπορεί να χρησιμοποιεί διάφορες διαδικασίες 
μέτρα για την παρακολούθηση της προόδου. (βλ. Μέτρηση Τεχνολογιών Λογισμικού στο 
γνωστικό πεδίο Διοίκηση Τεχνολογιών Λογισμικού για πληροφορίες σχετικά με
προγράμματα μέτρησης. Βλ. Μέτρηση λογισμικού στο γνωστικό πεδίο
Διαδικασία Τεχνολογιών Λογισμικού για πληροφορίες 
για τα μέτρα). 

Σύμφωνα με τον ορισμό στο [4, μέρος 4], οι τεχνικές δοκιμών 
μπορούν να ταξινομηθούν ανάλογα με το βαθμό 
κάλυψης που μπορούν να επιτύχουν. Η κάλυψη μπορεί να κυμαίνεται από 
0% έως 100%, εξαιρουμένων των πιθανών μη εφικτών δοκιμών (δηλ, 
δοκιμές που δεν μπορούν να εκτελεστούν). Έτσι, για κάθε 
τεχνική δοκιμών που βασίζεται στις προδιαγραφές, στη δομή και στην εμπειρία, τα σχετικά μέτρα κάλυψης 
και η διαδικασία για την αξιολόγηση της κάλυψης αυτής πρέπει να είναι 
καθορισμένη. Παραδείγματα μέτρων κάλυψης θα μπορούσαν να είναι 
το ποσοστό των κλάδων που καλύπτονται στο πρόγραμμα 
ροής ή το ποσοστό των λειτουργικών 
απαιτήσεων που ασκούνται μεταξύ εκείνων που απαριθμούνται στο 
έγγραφο προδιαγραφών.

Είναι σημαντικό να ληφθεί υπόψη ότι οι εγκαταστάσεις παρακολούθησης 
μπορούν να υπολογίζουν δυναμικά την αναλογία μεταξύ των καλυπτόμενων 
στοιχείων, και ο συνολικός αριθμός μπορεί επίσης να ληφθεί 
υπόψη. Επιπλέον, ειδικά στην περίπτωση των 
τεχνικών δοκιμών που βασίζονται στη δομή, απαραίτητα όργανα του συστήματος υπό δοκιμή μπορεί επίσης να είναι απαραίτητα.

Ωστόσο, το προτεινόμενο σύνολο μέτρων ελέγχου μπορεί να 
να ταξινομηθεί από διαφορετικές οπτικές γωνίες - από 
από τη σκοπιά εκείνων που παρέχουν και επιτρέπουν μια 
αξιολόγηση του SUT με βάση την παρατηρούμενη δοκιμή 
εκροών και εκείνων που αξιολογούν την πληρότητα ή την 
αποτελεσματικότητα των εκτελεσμένων σειρών δοκιμών. 

### *Αξιολόγηση του συστήματος υπό δοκιμή (SUT)* 

Συνήθως, οι δείκτες (δηλαδή οι μετρήσιμες πληροφορίες) μπορούν να 
να χρησιμοποιηθούν για να προσδιοριστεί κατά πόσον ένα SUT αποδίδει όπως αναμένεται
και επιτυγχάνει τα αναμενόμενα αποτελέσματά του. Οι
δείκτες, μερικές φορές γνωστοί ως βασικοί δείκτες απόδοσης (KPIs), συνδέονται στενά με τα
υιοθετημένα μέτρα αξιολόγησης, τις μεθόδους, την ανάλυση δεδομένων 
και την υποβολή εκθέσεων.

#### Μετρήσεις SUT που βοηθούν στον προγραμματισμό και τον σχεδιασμό δοκιμών 

Όλα τα μέτρα δοκιμών που προτείνονται στο [4, μέρος 4] μπορούν να 
να χρησιμοποιηθούν για το σχεδιασμό και την καθοδήγηση των δραστηριοτήτων δοκιμών.
Επιπλέον, κατά τη διαδικασία ανάπτυξης αριστερής μετατόπισης, συγκεκριμένα μέτρα, όπως η συχνότητα ανάπτυξης (Deployment Frequency), ο 
χρόνος προετοιμασίας, ο μέσος χρόνος αποκατάστασης (MTTR), και το 
ποσοστό αποτυχίας αλλαγής, υιοθετούνται επίσης συνήθως για να 
να σχεδιάζουν και να διαχειρίζονται τις δραστηριότητες και τα αποτελέσματα των δοκιμών.

#### Τύποι σφαλμάτων, ταξινόμηση και στατιστικά στοιχεία

Η βιβλιογραφία για τις δοκιμές είναι πλούσια σε ταξινομήσεις και 
ταξινομίες σφαλμάτων που μπορεί να είναι γενικές ή ειδικές για 
ένα πλαίσιο ή χαρακτηριστικά ποιότητας (όπως η ευχρηστία 
ταξινόμησης ελαττωμάτων, η ταξινόμηση του υλικού/λογισμικού, τα
τρωτά σημεία και επιθέσεις ασφάλειας και προστασίας της ιδιωτικής ζωής, και 
η ταξινόμηση των κινδύνων κυβερνοασφάλειας). Για να γίνουν 
οι δοκιμές πιο αποτελεσματικές, είναι σημαντικό να γνωρίζουμε ποιοι
τύποι σφαλμάτων μπορεί να βρεθούν στο SUT και την
σχετική συχνότητα με την οποία τα σφάλματα αυτά έχουν 
εμφανιστεί στο παρελθόν. Αυτές οι πληροφορίες μπορούν να είναι χρήσιμες στην πραγματοποίηση προβλέψεων ποιότητας και στη διαδικασία 
βελτίωσης (βλ. Χαρακτηρισμός στο γνωστικό πεδίο Ποιότητα Λογισμικού).

#### Πυκνότητα σφαλμάτων 

Παραδοσιακά, ένα SUT μπορεί να αξιολογηθεί με την καταμέτρηση 
ανακαλυφθέντων σφαλμάτων ως ο λόγος μεταξύ του αριθμού των 
σφαλμάτων που βρέθηκαν και του μεγέθους του SUT. Λόγω του
σημασιολογικού ορισμού των σφαλμάτων, πρόσθετες 
μετρήσεις μπορούν να ληφθούν υπόψη, όπως το βάθος του σφάλματος 
(ο ελάχιστος αριθμός αφαίρεσης σφαλμάτων που απαιτείται για να γίνει 
ένα SUT σωστό) και η πολλαπλότητα των σφαλμάτων (ο αριθμός των 
ατομικών αλλαγών που απαιτούνται για την επιδιόρθωση ενός σφάλματος).

### Τεχνικές βάσει πεδίου ορισμού εισόδου


#### Ισοδυναμία διαμερισμών

Η ισοδυναμία διαμερισμών συνεπάγεται την κατάτμηση του τομέα εισόδου
σε μια συλλογή από υποσύνολα (ή ισοδύναμες κλάσεις) με βάση ένα συγκεκριμένο
κριτήριο ή σχέση. Αυτό το κριτήριο ή η σχέση μπορεί να είναι διαφορετικά
υπολογιστικά αποτελέσματα, μια σχέση που βασίζεται στην ροή ελέγχου
ή δεδομένων ή μια διάκριση που γίνεται μεταξύ έγκυρων εισροών, οι
οποίες είναι αποδεκτές και επεξεργασμένες από το σύστημα, και άκυρων
εισροών, όπως τιμές εκτός του πεδίου τιμών, που δεν είναι αποδεκτές
και θα πρέπει να δημιουργήσουν ένα λάθος μήνυμα ή να ξεκινήσει η διαδικασία
σφάλματος.
Ένα αντιπροσωπευτικό σύνολο δοκιμών (μερικές φορές μόνο ένα) λαμβάνεται
συνήθως από κάθε κλάση ισοδυναμίας.

#### Ζεύγη ελέγχου

Οι περιπτώσεις ελέγχου προκύπτουν από το συνδυασμό ενδιαφερουσών τιμών
για κάθε ζεύγος ενός συνόλου μεταβλητών εισόδου αντί να λαμβάνονται
υπόψη όλοι οι δυνατοί συνδυασμοί.
Τα ζεύγη ελέγχου ανήκουν στις συνδυαστικές δοκιμές, οι οποίες σε γενικές
γραμμές περιλαμβάνουν επίσης συνδυασμούς υψηλότερου επιπέδου από τα
Ζεύγη (pairwise): οι τεχνικές αυτές αναφέρονται ως t-wise,
δηλαδή, κάθε πιθανός συνδυασμός t μεταβλητών εισόδου λαμβάνεται
υπόψη.

#### Ανάλυση ακραίων τιμών

Οι περιπτώσεις ελέγχου επιλέγονται πάνω ή κοντά στα όρια των πεδίων
ορισμού των μεταβλητών εισόδου, με το σκεπτικό ότι πολλά λάθη τείνουν
να συγκεντρώνονται κοντά στις ακραίες τιμές εισόδου.
Μία επέκταση αυτής της τεχνικής είναι ο έλεγχος ευρωστίας, όπου οι
περιπτώσεις ελέγχου επίσης επιλέγονται έξω από το πεδίο ορισμού των
μεταβλητών εισόδου για να ελέγξουν την ευρωστία του προγράμματος με
την επεξεργασία απροσδόκητων ή εσφαλμένων εισόδων.

#### Έλεγχος τυχαίων τιμών

Οι δοκιμές δημιουργούνται καθαρά τυχαία (να μην συγχέεται με
τις στατιστικές δοκιμές από το λειτουργικό προφίλ, όπως περιγράφεται
στην ενότητα [Λειτουργικό προφίλ](#operat-profil)). Αυτή η μορφή ελέγχου εμπίπτει
στην κατηγορία έλεγχος πεδίου ορισμού εισόδου, δεδομένου ότι η είσοδος
του τομέα πρέπει να είναι γνωστή προκειμένου να είναι δυνατόν να επιλεχθούν
τυχαία σημεία μέσα σε αυτό. Ο έλεγχος τυχαίων τιμών παρέχει μια σχετικά
απλή προσέγγιση για την αυτοματοποίηση των δοκιμών. Πρόσφατα έχουν
προταθεί βελτιωμένες μορφές τυχαίων δοκιμών, στις οποίες η τυχαία
δειγματοληψία εισόδου κατευθύνεται από άλλα κριτήρια επιλογής εισόδου.
Ο έλεγχος Fuzz (σημ.
χνούδι) ή fuzzing είναι μια ειδική μορφή των ελέγχων τυχαίων τιμών,
που στοχεύει να σπάσει το λογισμικό, πιο συχνά χρησιμοποιείται για
τον έλεγχο ασφαλείας.

### Τεχνικές βασισμένες στον κώδικα


#### Κριτήρια βάσει ροής ελέγχου

Τα κριτήρια κάλυψης ροών ελέγχου έχουν ως στόχο την κάλυψη όλων των
καταστάσεων, των μπλοκ των καταστάσεων, ή συγκεκριμένους συνδυασμούς
των καταστάσεων σε ένα πρόγραμμα. Το ισχυρότερο από τα κριτήρια με
βάση τη ροή του ελέγχου είναι ο έλεγχος μονοπατιού, ο οποίος έχει
ως στόχο να εκτελέσει όλες τις διαδρομές ροής ελέγχου από την είσοδο
μέχρι την έξοδο στο γράφο/διάγραμμα ροής ελέγχου ενός προγράμματος. Εφόσον οι
εξαντλητικές δοκιμές μονοπατιού δεν είναι εφικτές εξαιτίας βρόγχων,
άλλα λιγότερο αυστηρά κριτήρια επικεντρώνονται στην κάλυψη των μονοπατιών,
που περιορίζουν τις επαναλήψεις στον βρόχο όπως κάλυψη δήλωσης, κάλυψη
μέρους και δοκιμές κατάστασης/απόφασης.
Η επάρκεια αυτών των δοκιμών μετράται σε ποσοστά, για παράδειγμα όταν
όλα τα μέρη έχουν εκτελεστεί τουλάχιστον μία φορά από τις δοκιμές,
έχει επιτευχθεί 100% κάλυψη μέρους.

#### Κριτήρια βάσει ροής δεδομένων

Στις δοκιμές ροών δεδομένων, το διάγραμμα ροής ελέγχου περιέχει πληροφορίες
σχετικά με το πώς οι μεταβλητές του προγράμματος δηλώνονται, χρησιμοποιούνται
και «σκοτώνονται».
Το πιο ισχυρό κριτήριο, τα μονοπάτια όλων των δηλώσεων-χρήσεων (alldefinition-usepaths),
απαιτεί, για κάθε μεταβλητή, κάθε ακμή του μονοπατιού του ελέγχου ροής
από τη δήλωση της μεταβλητής μέχρι και τη χρήση της δήλωσης αυτής,
να εκτελείται. Προκειμένου να περιοριστεί ο αριθμός των μονοπατιών 
που απαιτούνται, χρησιμοποιούνται πιο αδύναμες στρατηγικές, όπως τα
μονοπάτια όλων των δηλώσεων (all-definitions) και τα μονοπάτια
όλων των χρήσεων (all-uses).

#### Μοντέλα αναφοράς για έλεγχο βάσει κώδικα

Αν και δεν αποτελεί τεχνική από μόνη της, η δομή του ελέγχου ενός
προγράμματος μπορεί να αναπαρασταθεί γραφικά χρησιμοποιώντας ένα διάγραμμα
ροής ώστε να οπτικοποιηθούν τεχνικές ελέγχου βάσει κώδικα. Ένα διάγραμμα
ροής είναι ένας κατευθυνόμενος γράφος, του οποίου οι κόμβοι και οι
ακμές αντιστοιχούν στα στοιχεία του προγράμματος.
Για παράδειγμα, οι κόμβοι μπορεί να αναπαριστούν καταστάσεις ή συνεχόμενες
ακολουθίες καταστάσεων, ενώ οι ακμές μπορεί να αναπαριστούν τη μεταφορά
του ελέγχου μεταξύ των κόμβων.

### Τεχνικές βάσει σφαλμάτων {#techn-test-error}


Με διαφορετικούς βαθμούς τυποποίησης, οι τεχνικές ελέγχου που βασίζονται
σε σφάλματα αναπτύσσουν περιπτώσεις ελέγχου με ειδικό στόχο την αποκάλυψη
κατηγοριών πιθανών ή προκαθορισμένων σφαλμάτων.
Για να επικεντρωθεί καλύτερα η παραγωγή ή επιλογή περιπτώσεων ελέγχου,
ένα μοντέλο σφαλμάτων μπορεί να εισαχθεί έτσι ώστε να γίνεται η κατηγοριοποίηση
των διαφορετικών ειδών σφαλμάτων.

#### Πρόβλεψη σφαλμάτων

Σε αυτή την τεχνική, οι περιπτώσεις ελέγχου είναι ειδικά σχεδιασμένες
από τους μηχανικούς λογισμικού που προσπαθούν να προβλέψουν τα πιο
πιθανά σφάλματα σε ένα ήδη γνωστό πρόγραμμα.
Μια καλή πηγή πληροφορίας είναι το ιστορικό των σφαλμάτων που εντοπίστηκαν
σε παλαιότερα έργα, καθώς και η εμπειρία του μηχανικού λογισμικού.

#### Έλεγχος μετάλλαξης {#mutation-testing}


Μια μετάλλαξη είναι μια ελαφρά τροποποιημένη έκδοση του προγράμματος
υπό δοκιμή, η οποία διαφέρει κατά μια μικρή συντακτική αλλαγή από
το αρχικό πρόγραμμα. Κάθε περίπτωση ελέγχου εκτελεί και το αρχικό
πρόγραμμα και όλες τις παραγόμενες μεταλλάξεις. Συγκεκριμένα, αν μια
περίπτωση ελέγχου είναι επιτυχής στο να βρίσκει τη διαφορά μεταξύ
του αρχικού προγράμματος και της μετάλλαξης, η μετάλλαξη θεωρείται
ότι έχει «σκοτωθεί». Αν και αρχικά είχε αναπτυχθεί ως τεχνική για
την αξιολόγηση συνόλων ελέγχου (βλ. παράγραφο [Αξιολόγηση 
πραγματοποιημένων ελέγχων](#eval-perf-test)), ο έλεγχος μετάλλαξης αποτελεί και ένα
κριτήριο δοκιμών από μόνος του. Αυτό συμβαίνει γιατί είτε οι δοκιμές
παράγονται τυχαία μέχρις ότου όλες οι μεταλλάξεις να έχουν σκοτωθεί,
είτε οι δοκιμές σχεδιάζονται ειδικά για να σκοτώσουν μεταλλάξεις που
επιζούν ακόμη. Στην τελευταία περίπτωση, η δοκιμή μετάλλαξης μπορεί,
επίσης, να κατηγοριοποιηθεί ως μια τεχνική βασισμένη σε κώδικα.
Η βασική παραδοχή του ελέγχου μετάλλαξης (το αποτέλεσμα της σύζευξης)
είναι ότι ψάχνοντας για απλά συντακτικά σφάλματα, πιο σύνθετα αλλά
πραγματικά σφάλματα μπορεί να εντοπιστούν.
Για να είναι αποτελεσματική η τεχνική, ένας μεγάλος αριθμός μεταλλάξεων
πρέπει να παραχθεί αυτόματα και να εκτελεστεί με συστηματικό τρόπο.


### Τεχνικές βάσει χρήσης {#techn-use}

#### Λειτουργικό προφίλ {#operat-profil}


Στις δοκιμές για την αξιολόγηση της αξιοπιστίας (γνωστοί και ως λειτουργικοί
έλεγχοι), το περιβάλλον ελέγχου αναπαράγει το λειτουργικό περιβάλλον
του λογισμικού ή αλλιώς το λειτουργικό προφίλ, όσο το δυνατόν καλύτερα.
Ο στόχος είναι, από τα δεδομένα που θα παρατηρηθούν από την δοκιμή,
να μπορεί κανείς να αποφανθεί για τη μελλοντική αξιοπιστία του λογισμικού,
όταν θα βρίσκεται σε πραγματική χρήση. Για να επιτευχθεί αυτό,
στις εισόδους έχουν εκχωρηθεί πιθανότητες ή προφίλ, ανάλογα με τη
συχνότητα εμφάνισής τους στην πραγματική λειτουργία.
Τα λειτουργικά προφίλ μπορούν να χρησιμοποιηθούν κατά τη διάρκεια
του ελέγχου του συστήματος για να καθοδηγήσουν την παραγωγή περιπτώσεων
ελέγχου, οι οποίες θα αξιολογήσουν την επίτευξη των στόχων αξιοπιστίας,
καθώς και θα εξετάσουν τη σχετική χρήση και κρισιμότητα των διαφόρων
λειτουργιών παρόμοιων με αυτά που θα συναντήσουμε στο λειτουργικό περιβάλλον.

#### Ευρετικοί μηχανισμοί παρατήρησης χρήστη

Οι αρχές ευχρηστίας μπορούν να παρέχουν κατευθυντήριες γραμμές για
την ανακάλυψη προβλημάτων στον σχεδιασμό της διεπαφής χρήστη (βλ. ενότητα
[Σχεδίαση διεπαφής χρήστη](#design-us-interface), στο γνωστικό πεδίο Σχεδιασμός λογισμικού).
Εξειδικευμένες ευρετικές, που αποκαλούνται και μέθοδοι ελέγχου ευχρηστίας,
εφαρμόζονται για τη συστηματική παρατήρηση της χρήσης του συστήματος
κάτω από ελεγχόμενες συνθήκες, έτσι ώστε να προσδιοριστεί πόσο καλά
οι χρήστες μπορούν να χρησιμοποιήσουν το σύστημα και τις διεπαφές
του.
Οι ευρετικές ευχρηστίας περιλαμβάνουν το γνωστικό περιδιάβασμα, την
ανάλυση ισχυρισμών, την παρατήρηση πεδίου, τα ομιλούντα υποκείμενα,
καθώς και έμμεσες προσεγγίσεις, όπως ερωτηματολόγια και συνεντεύξεις
χρηστών.

### Τεχνικές βάσει μοντέλου

Ένα μοντέλο σε αυτή την περίπτωση είναι μία αφηρημένη (τυπική) αναπαράσταση
του λογισμικού που ελέγχεται ή των απαιτήσεων λογισμικού του (βλ.
ενότητα [Μοντελοποίηση](#modeling) στο γνωστικό πεδίο Μοντέλα και μέθοδοι της
τεχνολογίας λογισμικού). Ο έλεγχος βάσει μοντέλου χρησιμοποιείται
για την επικύρωση των απαιτήσεων, τον έλεγχο της συνέπειας τους, καθώς
και για την παραγωγή περιπτώσεων ελέγχου, που επικεντρώνονται στις
πτυχές της συμπεριφοράς του λογισμικού. Τα βασικά συστατικά στοιχεία
του ελέγχου με βάση το μοντέλο είναι: ο συμβολισμός που χρησιμοποιείται
για την αναπαράσταση του μοντέλου του λογισμικού ή των απαιτήσεων
του, τα μοντέλα ροής εργασίας ή παρόμοια μοντέλα, η στρατηγική ελέγχου
ή ο αλγόριθμος που χρησιμοποιήθηκε για την παραγωγή περιπτώσεων ελέγχου,
η υποστηρικτική δομή για την εκτέλεση του ελέγχου, καθώς και η αξιολόγηση
των αποτελεσμάτων της δοκιμής σε σύγκριση με τα αναμενόμενα αποτελέσματα.
Λόγω της πολυπλοκότητας των τεχνικών, οι προσεγγίσεις του ελέγχου
βάσει μοντέλου συχνά χρησιμοποιούνται σε συνδυασμό με αυτόματες δοκιμές. 
Οι τεχνικές ελέγχου με βάση το μοντέλο περιλαμβάνουν τα παρακάτω.

#### Πίνακες αποφάσεων

Οι πίνακες αποφάσεων αντιπροσωπεύουν λογικές συσχετίσεις μεταξύ συνθηκών
(εισόδων) και ενεργειών (εξόδων). Οι περιπτώσεις ελέγχου προέρχονται
συστηματικά από την εξέταση κάθε πιθανού συνδυασμού συνθηκών και των
αντίστοιχων ενεργειών που προκύπτουν.
Μια σχετική τεχνική είναι το γράφημα αίτιου-αιτιατού (Cause-effect graphing).

#### Μηχανή πεπερασμένων καταστάσεων

Μοντελοποιώντας ένα πρόγραμμα ως μια μηχανή πεπερασμένων καταστάσεων,
οι δοκιμές μπορούν να επιλεχθούν έτσι ώστε να καλύπτουν όλες τις καταστάσεις
και τις μεταβάσεις.

#### Τυπικές προδιαγραφές

Η δήλωση των προδιαγραφών σε μια τυπική γλώσσα (βλ.
παράγραφο [Τυπικές μέθοδοι](#formal-meth) στο γνωστικό πεδίο Μοντέλα και μέθοδοι
της τεχνολογίας λογισμικού) επιτρέπει την αυτόματη παραγωγή περιπτώσεων
λειτουργικών ελέγχων και, την ίδια στιγμή, παρέχει έναν χρησμό για την
αξιολόγηση των αποτελεσμάτων τους.

Η TTCN3 (Testing and Test Control Notation version 3) είναι μια γλώσσα
που αναπτύχθηκε για τη συγγραφή περιπτώσεων ελέγχου. Ο συμβολισμός
επινοήθηκε για τις ανάγκες ελέγχου ενός συγκεκριμένου τηλεπικοινωνιακού
συστήματος.
Για τον λόγο αυτό, είναι ιδιαίτερα κατάλληλη για τη δοκιμή πολύπλοκων
επικοινωνιακών πρωτοκόλλων.

#### Μοντέλα ροών εργασίας

Τα μοντέλα ροών εργασίας καθορίζουν τη σειρά των δραστηριοτήτων που
εκτελούνται από τους ανθρώπους ή/και τις εφαρμογές του λογισμικού
και συνήθως αποτυπώνονται μέσω γραφικών συμβολισμών. Κάθε σειρά δραστηριοτήτων
αποτελεί μια ροή εργασίας (ονομάζεται και σενάριο). Τόσο η τυπική
όσο και η εναλλακτική ροή εργασίας πρέπει να ελέγχονται.
Ιδιαίτερη έμφαση δίνεται στους ρόλους των προδιαγραφών της ροής εργασίας
κατά τη διαδικασία του επιχειρηματικού ελέγχου.

### Τεχνικές βάσει της φύσης της εφαρμογής

Οι παραπάνω τεχνικές εφαρμόζονται σε όλα τα είδη λογισμικού. Αντίστοιχες
τεχνικές για την παραγωγή και εκτέλεση ελέγχων βασίζονται στη φύση
του λογισμικού που ελέγχεται.
Για παράδειγμα:

  * αντικειμενοστραφές λογισμικό (object-oriented)
  * λογισμικό που βασίζεται σε συστατικά στοιχεία(component-based)
  * λογισμικό βασισμένο στο διαδίκτυο (web-based)
  * συντρέχοντα προγράμματα (concurrent) 
  * λογισμικό που βασίζεται σε πρωτόκολλα (protocol-based)
  * συστήματα πραγματικού χρόνου (real-time)
  * συστήματα κρίσιμα για την ασφάλεια (safety-critical)
  * λογισμικό υπηρεσιακοστραφές (service-oriented)
  * λογισμικό ανοιχτού κώδικα (open-source)
  * ενσωματωμένο λογισμικό (embedded)

### Επιλογή και συνδυασμός τεχνικών

#### Συνδυάζοντας λειτουργικότητα και δομή

Οι τεχνικές δοκιμών βάσει μοντέλου και κώδικα αντιπαραβάλλονται συνήθως
ως λειτουργικός έναντι δομικού ελέγχου. Οι δύο αυτές προσεγγίσεις
για την επιλογή ελέγχου δεν θα πρέπει να θεωρηθούν ως εναλλακτικές,
αλλά ως συμπληρωματικές. Στην πραγματικότητα, χρησιμοποιούν διαφορετικές
πηγές πληροφοριών και έχει αποδειχθεί ότι τονίζουν διαφορετικά είδη
προβλημάτων.
Οι τεχνικές αυτές θα μπορούσαν να χρησιμοποιηθούν σε συνδυασμό, ανάλογα
με τις εκτιμήσεις του προϋπολογισμού.


#### Ντετερμινιστική και τυχαία επιλογή

Οι περιπτώσεις ελέγχου μπορεί να επιλεχθούν με ντετερμινιστικό τρόπο,
σύμφωνα με μία από τις πολλές τεχνικές ή τυχαία προερχόμενες από την
κατανομή εισόδων, όπως γίνεται συνήθως στις δοκιμές αξιοπιστίας.
Αρκετές αναλυτικές και εμπειρικές συγκρίσεις έχουν διεξαχθεί για να
αναλύσουν τις συνθήκες που κάνουν τη μια προσέγγιση πιο αποτελεσματική
από την άλλη.

## Μετρικές σχετικές με τον έλεγχο

Μερικές φορές οι τεχνικές ελέγχου συγχέονται με τους στόχους των δοκιμών.
Οι τεχνικές ελέγχου μπορούν να θεωρηθούν ως βοηθήματα για τη διασφάλιση
της επίτευξης των στόχων της δοκιμής. Για παράδειγμα, η κάλυψη των
διακλαδώσεων είναι μια δημοφιλής τεχνική ελέγχου. Η επίτευξη της κάλυψης
μιας συγκεκριμένης διακλάδωσης κατά ποσοστό, για παράδειγμα 95%, δεν
θα πρέπει να είναι ο μόνος στόχος της δοκιμής. Αντιθέτως, η δοκιμή
είναι ένας τρόπος για τη βελτίωση των πιθανοτήτων να βρεθούν σφάλματα
κατά τη συστηματική προσπάθεια να ελεγχθούν όλες οι διακλαδώσεις του
προγράμματος σε κάθε σημείο απόφασης.
Για την αποφυγή παρεξηγήσεων, θα πρέπει να γίνει μια σαφής διάκριση
μεταξύ των μετρικών που είναι σχετικές με τις δοκιμές, που παρέχουν
μια αξιολόγηση του προγράμματος υπό εξέταση με βάση τα παρατηρούμενα
αποτελέσματα του ελέγχου, καθώς και των μετρικών που αξιολογούν την
πληρότητα του συνόλου του ελέγχου.

Η μέτρηση θεωρείται συνήθως θεμελιώδης για την ανάλυση ποιότητας.
Η μέτρηση μπορεί επίσης να χρησιμοποιηθεί για την βελτιστοποίηση του
σχεδιασμού και της εκτέλεσης του ελέγχου. Η διαχείριση των δοκιμών
μπορεί να χρησιμοποιήσει πολλές διαφορετικές μετρικές διεργασιών για
να παρακολουθεί την πρόοδο (βλ.
παράγραφο [Πρακτικές θεωρήσεις](#prac-cons-test) για μια συζήτηση μετρικών των
διαδικασιών ελέγχου χρήσιμες για το σκοπό της διοίκησης).

### Αξιολόγηση του υπό εξέταση προγράμματος {#eval-test-prog}

#### Μετρικές προγράμματος υποστηρικτικές στον προγραμματισμό και σχεδιασμό των ελέγχων

Μετρικές βασισμένες στο μέγεθος του λογισμικού (για παράδειγμα στον
αριθμό γραμμών κώδικα ή στο λειτουργικό μέγεθος) ή μετρικές βασισμένες
στη δομή του προγράμματος, μπορούν να καθοδηγήσουν τον έλεγχο.
Δομικές μετρικές περιλαμβάνουν επίσης μετρήσεις που καθορίζουν τη
συχνότητα με την οποία δομοστοιχεία μπορούν να καλούν το ένα το άλλο.

#### Τύποι σφαλμάτων, ταξινόμηση και στατιστικά

Η βιβλιογραφία του ελέγχου είναι πλούσια σε κατηγοριοποιήσεις και
ταξινομήσεις σφαλμάτων. Για να γίνει πιο αποτελεσματική η δοκιμή,
είναι σημαντικό να γνωρίζουμε  ποια είδη σφαλμάτων μπορούν να βρεθούν
στο λογισμικό που ελέγχεται και τη σχετική συχνότητα με την οποία
αυτά τα σφάλματα έχουν εμφανιστεί στο παρελθόν. Αυτή η πληροφορία
μπορεί να είναι χρήσιμη για προβλέψεις ποιότητας, καθώς και για τη
βελτίωση της διαδικασίας (βλ.
παράγραφο [Χαρακτηρισμός σφαλμάτων](#charact-defect), στο γνωστικό πεδίο Ποιότητα
λογισμικού).

#### Πυκνότητα σφαλμάτων

Ένα πρόγραμμα υπό εξέταση μπορεί να αξιολογηθεί μετρώντας τα σφάλματα
που εντοπίστηκαν, ως ο λόγος μεταξύ των σφαλμάτων αυτών προς 
το μέγεθος του προγράμματος.

#### Δοκιμή ζωής/Αξιολόγηση αξιοπιστίας {#lifetest-reliabevaluat}      

Μια στατιστική εκτίμηση της αξιοπιστίας του λογισμικού, η οποία μπορεί
να αποκτηθεί από την παρατήρηση της αξιοπιστίας που έχει επιτευχθεί,
μπορεί να χρησιμοποιηθεί για την αξιολόγηση ενός προϊόντος λογισμικού
και για την απόφαση σχετικά με το αν θα πρέπει ή όχι να σταματήσουμε
τον έλεγχο (βλ.
θέμα [Επίτευξη και αξιολόγηση αξιοπιστίας](#reliab-achiev-eval)).

#### Μοντέλα αύξησης αξιοπιστίας

Τα μοντέλα αύξησης της αξιοπιστίας παρέχουν μια πρόβλεψη αξιοπιστίας
βασισμένη σε σφάλματα. Υποθέτουν, σε γενικές γραμμές, ότι όταν τα
σφάλματα, τα οποία προκάλεσαν την παρατηρούμενη αποτυχία, έχουν διορθωθεί
(αν και μερικά μοντέλα αποδέχονται ατελείς διορθώσεις), τότε η εκτιμώμενη
αξιοπιστία του προϊόντος εμφανίζει, κατά μέσο όρο, μια αυξανόμενη
τάση. Υπάρχουν πολλά δημοσιευμένα μοντέλα αύξησης της αξιοπιστίας.
Κυρίως, τα μοντέλα αυτά χωρίζονται σε μοντέλα που μετρούν την αποτυχία
(failure-count) και σε μοντέλα που μετράνε τον χρόνο μεταξύ
αποτυχίας (time-between-failure).

### Αξιολόγηση πραγματοποιημένων ελέγχων {#eval-perf-test}

#### Κάλυψη/Πληρότητα μέτρων

Διάφορα κριτήρια επάρκειας των δοκιμών απαιτούν ότι οι περιπτώσεις
ελέγχου συστηματικά ελέγχουν ένα σύνολο από στοιχεία, τα οποία προσδιορίζονται
στο πρόγραμμα ή στις προδιαγραφές (βλ. ενότητα [Τεχνικές ελέγχου](#tech-testing)).
Για να αξιολογηθεί η πληρότητα των εκτελεσμένων δοκιμών, οι μηχανικοί
λογισμικού μπορούν να παρακολουθούν τα στοιχεία που έχουν καλυφθεί
για να μπορούν δυναμικά να υπολογίζουν τον λόγο μεταξύ των καλυφθέντων
στοιχείων προς τον συνολικό αριθμό των στοιχείων. Για παράδειγμα, είναι
δυνατόν να υπολογιστεί το ποσοστό των διακλαδώσεων που καλύφθηκαν
στο διάγραμμα ροής του προγράμματος ή το ποσοστό των λειτουργικών
απαιτήσεων που ελέγχθηκαν σε σχέση με το σύνολο των απαιτήσεων που
απαριθμούνται στο έγγραφο Προδιαγραφών.
Τα κριτήρια επάρκειας που βασίζονται σε κώδικα απαιτούν κατάλληλη
οργάνωση του υπό δοκιμή προγράμματος.

#### Σπορά σφαλμάτων

Στη σπορά σφαλμάτων, μερικά σφάλματα εισάγονται τεχνητά σε ένα πρόγραμμα
πριν αυτό ελεγχθεί. Όταν εκτελεστεί η δοκιμή, μερικά από τα σπαρμένα
σφάλματα θα αποκαλυφθούν καθώς και κάποια άλλα σφάλματα που προϋπήρχαν.
Στη θεωρία, ανάλογα με το ποια και πόσα από τα τεχνητά σφάλματα εντοπίζονται,
μπορεί να αξιολογηθεί η αποτελεσματικότητα της δοκιμής καθώς και να
εκτιμηθεί ο αριθμός των υπολειπόμενων σφαλμάτων. Στην πράξη, οι στατιστικολόγοι
αμφισβητούν την κατανομή και την αντιπροσωπευτικότητα των σπαρμένων
σφαλμάτων σε σχέση με τα πραγματικά σφάλματα και το μικρό μέγεθος
του δείγματος στο οποίο βασίζονται οι αναγωγές.
Μερικοί, επίσης, ισχυρίζονται ότι αυτή η τεχνική θα πρέπει να χρησιμοποιείται
με μεγάλη προσοχή, καθώς η εισαγωγή σφαλμάτων στο λογισμικό περιλαμβάνει
τον προφανή κίνδυνο να ξεχάσουμε να τα αφαιρέσουμε μετά τη δοκιμή.

#### Βαθμός μετάλλαξης

Στον έλεγχο μετάλλαξης  (βλ.
[Έλεγχος μετάλλαξης](#mutation-testing) στην παράγραφο Τεχνικές βάσει σφαλμάτων),
ο λόγος των «σκοτωμένων» μεταλλάξεων  προς το συνολικό αριθμό των
παραγόμενων μεταλλάξεων μπορεί να αποτελέσει ένα μέτρο αποτελεσματικότητας
της εκτελούμενης δοκιμής.

#### Σύγκριση και σχετική αποτελεσματικότητα διάφορων τεχνικών

Διάφορες μελέτες έχουν διεξαχθεί προκειμένου να συγκριθεί η σχετική
αποτελεσματικότητα των διαφόρων τεχνικών ελέγχου. Είναι σημαντικό
να υπάρχει ακρίβεια ως προς την ιδιότητα με την οποία αξιολογούνται
οι τεχνικές. Ποια, για παράδειγμα, είναι η ακριβής έννοια του όρου
«αποτελεσματικότητα»; Πιθανές ερμηνείες περιλαμβάνουν τον αριθμό των
δοκιμών που απαιτούνται για να βρεθεί το πρώτο σφάλμα, το λόγο του
αριθμού των σφαλμάτων που εντοπίστηκαν κατά τη δοκιμή προς τον συνολικό
αριθμό των σφαλμάτων που εντοπίστηκαν κατά τη διάρκεια και μετά τη
δοκιμή, καθώς και κατά πόσο έχει βελτιωθεί η αξιοπιστία.
Αναλυτικές και εμπειρικές συγκρίσεις μεταξύ διαφόρων τεχνικών έχουν
διεξαχθεί σύμφωνα με καθεμία από τις παραπάνω έννοιες της αποτελεσματικότητας. 

## Διεργασία ελέγχου

Οι έννοιες του ελέγχου, οι στρατηγικές, οι τεχνικές και οι μετρικές
πρέπει να ενσωματωθούν σε μια καθορισμένη και ελεγχόμενη διεργασία.
Η διεργασία ελέγχου υποστηρίζει δραστηριότητες δοκιμών και παρέχει
καθοδήγηση στους ελεγκτές και στις ομάδες ελέγχου, από τον σχεδιασμό
των δοκιμών μέχρι την αξιολόγηση των αποτελεσμάτων τους, με τέτοιο
τρόπο, ώστε να παρέχεται διαβεβαίωση ότι οι στόχοι της δοκιμής θα καλυφθούν
με έναν οικονομικά αποδοτικό τρόπο.

### Πρακτικές θεωρήσεις {#prac-cons-test}


#### Συμπεριφορές/Προγραμματισμός χωρίς εγωκεντρισμό

Ένα σημαντικό στοιχείο μιας επιτυχημένης δοκιμής είναι η συνεργατική
συμπεριφορά προς τις δραστηριότητες ελέγχου και τη διασφάλιση ποιότητας.
Οι διευθυντές κατέχουν βασικό ρόλο στην προώθηση μιας, γενικά, ευνοϊκής
στάσης σχετικά με τον εντοπισμό σφαλμάτων και τη διόρθωση τους κατά
την ανάπτυξη και συντήρηση του λογισμικού.
Για παράδειγμα, αυτό μπορεί να επιτευχθεί ξεπερνώντας τη νοοτροπία
της ατομικής ιδιοκτησίας κώδικα ανάμεσα σε προγραμματιστές και προωθώντας
ένα περιβάλλον συνεργασίας με ομαδική ευθύνη για προβλήματα στον κώδικα.
Το ιδεατό αυτό ονομάζεται προγραμματισμός χωρίς εγωκεντρισμό
(egoless programming).

#### Οδηγοί ελέγχου

Οι φάσεις ελέγχου μπορούν να καθοδηγούνται από διάφορους στόχους.
Για παράδειγμα, δοκιμές βασισμένες στον κίνδυνο χρησιμοποιούν την επικινδυνότητα
του προϊόντος για να δώσουν προτεραιότητες και για να εστιάσουν στη
στρατηγική ελέγχου.
Από την άλλη, δοκιμές βασισμένες σε σενάρια καθορίζουν τις περιπτώσεις
ελέγχου βάσει καθορισμένων σεναρίων του λογισμικού.

#### Διοίκηση διεργασίας ελέγχου

Οι δραστηριότητες ελέγχου που πραγματοποιούνται σε διάφορα επίπεδα
(βλ.
ενότητα [Επίπεδα ελέγχου](#level-test)) πρέπει να οργανωθούν από κοινού με τους
ανθρώπους, τα εργαλεία, τις πολιτικές και τις μετρικές σε μία καλά
καθορισμένη διεργασία που αποτελεί αναπόσπαστο κομμάτι του κύκλου
ζωής.

#### Τεκμηρίωση ελέγχων και προϊόντα εργασίας

Η τεκμηρίωση αποτελεί αναπόσπαστο κομμάτι της τυποποίησης της διεργασίας
ελέγχου. Τα έγγραφα δοκιμών μπορούν να περιλαμβάνουν, μεταξύ άλλων,
το σχέδιο ελέγχου, τις προδιαγραφές σχεδιασμού ελέγχου, τις προδιαγραφές
διαδικασίας ελέγχου, τις προδιαγραφές των περιπτώσεων ελέγχου, το
αρχείο καταγραφής ελέγχου, καθώς και την έκθεση με τα περιστατικά που
συνέβησαν κατά τις δοκιμές. Το υπό δοκιμή λογισμικό τεκμηριώνεται
ως στοιχείο ελέγχου. Η τεκμηρίωση του ελέγχου πρέπει να παράγεται
και, συνεχώς, να ενημερώνεται στο ίδιο επίπεδο ποιότητας με τα άλλα
είδη εγγράφων τεκμηρίωσης της τεχνολογίας λογισμικού. Επιπλέον, η
τεκμηρίωση του ελέγχου θα πρέπει να είναι υπό τον έλεγχο της διοίκησης 
της σύνθεσης του λογισμικού (βλ. στο γνωστικό πεδίο [Διαχείριση Σχηματισμών
Λογισμικού](#softconfigmng)).
Επίσης, η τεκμηρίωση αυτή, περιλαμβάνει προϊόντα εργασίας που μπορούν
να προσφέρουν υλικό για εγχειρίδια χρηστών και για την εκπαίδευση
τους.

#### Ανάπτυξη οδηγούμενη από τον έλεγχο (TDD)

Η ανάπτυξη που καθοδηγείται από τον έλεγχο (TDD) ξεκίνησε ως μία από
τις βασικές πρακτικές του ακραίου προγραμματισμού (XP-extreme programming)
και περιλαμβάνει τη συγγραφή ελέγχου μονάδων πριν τη συγγραφή του
κώδικα που θα ελεγχθεί. Με αυτόν τον τρόπο, η καθοδηγούμενη από δοκιμές
ανάπτυξη, αναπτύσσει τις περιπτώσεις ελέγχου ως υποκατάστατο του εγγράφου
απαιτήσεων λογισμικού και όχι ως ανεξάρτητο έλεγχο που διαβεβαιώνει
ότι το λογισμικό έχει υλοποιήσει σωστά τις απαιτήσεις. Αντί μιας στρατηγικής
ελέγχου, η καθοδηγούμενη από τον έλεγχο ανάπτυξη είναι μια πρακτική,
όπου χρειάζεται οι προγραμματιστές να καθορίζουν και να διατηρούν
ελέγχους μονάδων.
Ως εκ τούτου, μπορεί να υπάρχει θετικό αντίκτυπο στην επεξεργασία
των αναγκών των χρηστών και στις προδιαγραφές των απαιτήσεων λογισμικού.

#### Εσωτερική έναντι ανεξάρτητης ομάδας ελέγχου

Η τυποποίηση της διεργασίας ελέγχου μπορεί επίσης να περιλαμβάνει
την τυποποίηση της οργάνωσης της ομάδας ελέγχου. Η ομάδα ελέγχου μπορεί
να αποτελείται από εσωτερικά μέλη (που ανήκουν στην ομάδα του έργου
και που μπορεί να συμμετέχουν ή όχι στην ανάπτυξη του λογισμικού),
από εξωτερικά μέλη (με την ελπίδα ότι θα φέρουν μια αμερόληπτη και 
ανεξάρτητη προοπτική) ή και από τα δύο.
Εκτιμήσεις κόστους, προγραμματισμού, επίπεδου ωριμότητας των εμπλεκόμενων
οργανισμών και κρισιμότητας της εφαρμογής, μπορούν να καθοδηγήσουν
την απόφαση.

#### Εκτίμηση κόστους/Προσπάθειας και μετρικές διεργασίας ελέγχου

Αρκετές μετρικές που σχετίζονται με τους πόρους που δαπανώνται κατά
τη διάρκεια του ελέγχου, όπως και αυτές που σχετίζονται με την αποτελεσματικότητα
εύρεσης σφαλμάτων στις διάφορες φάσεις των δοκιμών, χρησιμοποιούνται
από τους διευθυντές για τον έλεγχο και τη βελτίωση της διεργασίας
ελέγχου.
Αυτές οι μετρικές ελέγχου μπορούν να καλύπτουν πτυχές, όπως, μεταξύ
άλλων, τον αριθμό των περιπτώσεων ελέγχου που ορίζονται, τον αριθμό
των περιπτώσεων ελέγχου που πέρασαν με επιτυχία, καθώς και τον αριθμό
των περιπτώσεων ελέγχου που απέτυχαν.

Η αξιολόγηση των αναφορών των φάσεων ελέγχου, μπορεί να συνδυαστεί
με την ανάλυση γενεσιουργιών αιτιών έτσι ώστε να αξιολογηθεί η αποτελεσματικότητα
εύρεσης σφαλμάτων στη διεργασία ελέγχου, όσο το δυνατόν νωρίτερα.
Μια τέτοια αξιολόγηση μπορεί να συνδεθεί με την ανάλυση κινδύνου.
Επιπλέον, οι πόροι που αξίζει να δαπανηθούν στις δοκιμές πρέπει να
είναι ανάλογοι με τη χρήση/κρισιμότητα της εφαρμογής.
Αυτό σημαίνει ότι διαφορετικές τεχνικές έχουν διαφορετικά κόστη και
παρέχουν διαφορετικά επίπεδα εμπιστευτικότητας στην αξιοπιστία του
προϊόντος.

#### Τερματισμός {#termin-test}

Πρέπει να παρθεί η απόφαση για το πόσες δοκιμές είναι αρκετές και
για το πότε η φάση του ελέγχου μπορεί να τερματιστεί. Η πληρότητα
των μετρικών, όπως για παράδειγμα η επιτυχημένη κάλυψη κώδικα ή λειτουργική
κάλυψη, καθώς και οι εκτιμήσεις της πυκνότητας σφαλμάτων ή της λειτουργικής
αξιοπιστίας, παρέχει χρήσιμη υποστήριξη, η οποία όμως δεν είναι αρκετή
από μόνη της.
Η απόφαση περιλαμβάνει επίσης εκτιμήσεις σχετικά με το κόστος και
τον κίνδυνο που προκύπτει από πιθανές εναπομένουσες αποτυχίες, σε
αντίθεση με το κόστος που προκύπτει από τη συνέχιση των δοκιμών.

#### Επαναχρησιμοποίηση και πρότυπα ελέγχου

Για τη διεξαγωγή δοκιμών ή την συντήρηση με έναν οργανωμένο και οικονομικά
αποδοτικό τρόπο, τα μέσα που χρησιμοποιούνται για τον έλεγχο κάθε
μέρους του λογισμικού θα πρέπει να επαναχρησιμοποιούνται συστηματικά.
Ένα αποθετήριο υλικών για τις δοκιμές θα πρέπει να βρίσκεται υπό τον
έλεγχο της διαχείρισης σχηματισμών του λογισμικού, έτσι ώστε οι αλλαγές
στις απαιτήσεις λογισμικού ή στη σχεδίαση να μπορούν να αντικατοπτρίζονται
σε αλλαγές στις δοκιμές που διεξάγονται.

Οι λύσεις δοκιμών που υιοθετήθηκαν για τον έλεγχο μερικών ειδών εφαρμογών
υπό συγκεκριμένες συνθήκες, μαζί με τα κίνητρα πίσω από τις αποφάσεις
που πάρθηκαν, σχηματίζουν ένα πρότυπο ελέγχων που μπορεί να τεκμηριωθεί
για μεταγενέστερη επαναχρησιμοποίηση σε παρόμοια έργα.

### Δραστηριότητες ελέγχου

Όπως φαίνεται στην ακόλουθη περιγραφή, η επιτυχής διαχείριση των δραστηριοτήτων
ελέγχου εξαρτάται σε μεγάλο βαθμό από την διαδικασία διαχείρισης σχηματισμών
του λογισμικού.

#### Προγραμματισμός

Όπως όλες οι πτυχές της διαχείρισης ενός έργου, έτσι και οι δραστηριότητες
ελέγχου πρέπει να προγραμματίζονται. Οι κυριότερες πτυχές του προγραμματισμού
περιλαμβάνουν το συντονισμό του προσωπικού, τη διαθεσιμότητα των εγκαταστάσεων
και του εξοπλισμού ελέγχου, τη δημιουργία και τη συντήρηση εγγράφων
που σχετίζονται με τον έλεγχο, καθώς και τον προγραμματισμό για πιθανά
ανεπιθύμητα αποτελέσματα.
Αν παραπάνω από μια αρχική του λογισμικού συντηρείται, τότε κατά το
προγραμματισμό, πρέπει να ληφθεί υπόψη ο χρόνος και η προσπάθεια για
να διασφαλιστεί ότι το περιβάλλον ελέγχου είναι σωστά διαμορφωμένο.

#### Παραγωγή περιπτώσεων ελέγχου

Η παραγωγή των περιπτώσεων ελέγχου βασίζεται στο επίπεδο που εκτελείται
ο έλεγχος, καθώς και στη συγκεκριμένη τεχνική ελέγχου που χρησιμοποιείται.
Οι περιπτώσεις ελέγχου θα πρέπει να βρίσκονται υπό τον έλεγχο της
διαχείρισης σχηματισμών λογισμικού και να περιλαμβάνουν τα αναμενόμενα
αποτελέσματα για κάθε δοκιμή.

#### Ανάπτυξη περιβάλλοντος ελέγχου

Το περιβάλλον που χρησιμοποιείται κατά τις δοκιμές θα πρέπει να είναι
συμβατό με τα άλλα εργαλεία της τεχνολογίας λογισμικού που υιοθετήθηκαν.
Το περιβάλλον, επίσης, θα πρέπει να διευκολύνει την ανάπτυξη και τον
έλεγχο των περιπτώσεων ελέγχου, καθώς και την καταγραφή και την ανάκτηση
των αναμενόμενων αποτελεσμάτων, των σεναρίων και των άλλων υλικών
ελέγχου.

#### Εκτέλεση

Η εκτέλεση των δοκιμών πρέπει να ενσωματώνει μια βασική αρχή των επιστημονικών
πειραμάτων: οτιδήποτε πραγματοποιείται κατά τη διάρκεια του ελέγχου
πρέπει να εκτελείται και να τεκμηριώνεται με σαφήνεια, έτσι ώστε οποιοδήποτε
άλλο άτομο να μπορεί να αναπαράγει τα αποτελέσματα.
Ως εκ τούτου, ο έλεγχος θα πρέπει να εκτελείται σύμφωνα με τις τεκμηριωμένες
διαδικασίες, χρησιμοποιώντας μια σαφώς ορισμένη έκδοση του λογισμικού
υπό δοκιμή.

#### Αξιολόγηση αποτελεσμάτων ελέγχου

Τα αποτελέσματα ελέγχου πρέπει να αξιολογούνται έτσι ώστε να διαπιστώνεται
αν οι δοκιμές ήταν επιτυχείς ή όχι. Στις περισσότερες περιπτώσεις,
ο όρος «επιτυχής» σημαίνει ότι το λογισμικό εκτελέστηκε όπως αναμενόταν
και δεν υπήρχαν σημαντικά απροσδόκητα αποτελέσματα. Αξίζει να σημειωθεί
ότι δεν είναι όλα τα απροσδόκητα αποτελέσματα απαραιτήτως σφάλματα.
Μερικά από αυτά διαπιστώνονται ότι είναι, απλά, θόρυβος. Πριν αφαιρεθεί
ένα σφάλμα, απαιτείται να γίνει μια ανάλυση και μια προσπάθεια για
αποτελμάτωση, έτσι ώστε να απομονωθεί, να καθοριστεί και να περιγραφεί
το σφάλμα.
Όταν τα αποτελέσματα των δοκιμών είναι πολύ σημαντικά, μια επίσημη
επιτροπή αναθεώρησης μπορεί να συγκληθεί για την αξιολόγησή τους.

#### Αναφορά προβλημάτων/Καταγραφή δοκιμών

Οι δραστηριότητες ελέγχου μπορούν να καταγράφονται, έτσι ώστε να μπορεί
κανείς να προσδιορίζει πότε μια δοκιμή πραγματοποιήθηκε, ποιος εκτέλεσε
τη δοκιμή, ποια διαμόρφωση του λογισμικού χρησιμοποιήθηκε και άλλες
σχετικές πληροφορίες ταυτοποίησης της δοκιμής. Τα απροσδόκητα ή τα
εσφαλμένα αποτελέσματα ελέγχου μπορούν να καταγράφονται σε ένα σύστημα
αναφοράς προβλημάτων, τα δεδομένα του οποίου θα αποτελέσουν βάση για
μεταγενέστερη αποτελμάτωση και διόρθωση των προβλημάτων, που παρατηρήθηκαν
ως αποτυχίες κατά τη διάρκεια ελέγχου. Επίσης, ανωμαλίες που δεν θεωρούνται
σφάλματα, μπορούν να τεκμηριωθούν σε περίπτωση που αργότερα αποδειχθούν
πιο σοβαρές από ότι αρχικά είχαν θεωρηθεί.
Οι αναφορές ελέγχου είναι, επιπλέον, είσοδοι στη διαδικασία αιτήματος
αλλαγής διαχείρισης.

#### Ιχνηλάτηση σφαλμάτων

Τα σφάλματα μπορούν να ιχνηλατηθούν και να αναλυθούν, ώστε να διαπιστωθεί
πότε εισήχθησαν στο λογισμικό, για ποιον λόγο δημιουργήθηκαν (για παράδειγμα
λόγω κακώς ορισμένων απαιτήσεων, εσφαλμένης δήλωσης μεταβλητής, διαρροής
μνήμης, προγραμματιστικού συντακτικού λάθους), καθώς και πότε θα μπορούσαν
να παρατηρηθούν για πρώτη φορά στο λογισμικό.
Οι πληροφορίες από την ιχνηλάτηση σφαλμάτων χρησιμοποιούνται για να
διαπιστωθούν ποιες πτυχές του ελέγχου λογισμικού και των άλλων διαδικασιών
χρήζουν βελτίωσης και κατά πόσο είναι αποτελεσματικές οι προηγούμενες
προσεγγίσεις που χρησιμοποιήθηκαν.

## Εργαλεία ελέγχου λογισμικού

### Εργαλεία υποστήριξης ελέγχου

Ο έλεγχος απαιτεί πολλές εργασίες υψηλής έντασης εργασίας, οι οποίες
τρέχουν σε πολυάριθμες εκτελέσεις του προγράμματος και διαχειρίζονται
μεγάλη ποσότητα πληροφορίας. Κατάλληλα εργαλεία μπορούν να ελαφρύνουν
το βάρος μιας υπαλληλικής και κουραστικής λειτουργίας και να την
κάνουν λιγότερο επιρρεπή σε σφάλματα.
Επιπλέον, εξελιγμένα εργαλεία μπορούν να υποστηρίζουν το σχεδιασμό
του ελέγχου και την παραγωγή περιπτώσεων ελέγχου, καθιστώντας τα πιο
αποτελεσματικά.

#### Εργαλεία επιλογής

Ένα πολύ σημαντικό θέμα είναι η καθοδήγηση σε διευθυντές και
ελεγκτές, για το πως να διαλέγουν διαδικασίες και εργαλεία δοκιμών
που θα είναι χρήσιμα στον οργανισμό. Αυτό συμβαίνει γιατί η επιλογή
κατάλληλων εργαλείων ελέγχου επηρεάζει σημαντικά την απόδοση και την
αποτελεσματικότητα των ελέγχων. Επιπλέον, η επιλογή εργαλείων εξαρτάται
από διάφορες ενδείξεις, όπως οι επιλογές ανάπτυξης, οι σκοποί αξιολόγησης,
οι μηχανισμοί εκτέλεσης κτλ.
Γενικά, δεν μπορεί να υπάρχει ένα μοναδικό εργαλείο που να ικανοποιεί
τις ιδιαίτερες ανάγκες ενός οργανισμού, επομένως, μια σειρά εργαλείων
θα μπορούσε να είναι η κατάλληλη επιλογή.

#### Κατηγορίες εργαλείων

Παρακάτω κατηγοριοποιούνται τα διαθέσιμα εργαλεία ελέγχου ανάλογα
με τη λειτουργικότητά τους:

  * Ζυγός ελέγχου (οδηγοί, προσαρμογείς) παρέχουν ένα ελεγχόμενο
  περιβάλλον μέσα στο οποίο οι δοκιμές μπορούν να εκτελεστούν και τα
  αποτελέσματά τους να καταγραφούν.
  Προκειμένου να εκτελεστούν κομμάτια ενός προγράμματος, οι οδηγοί και
  οι προσαρμογείς παρέχονται για να προσομοιώσουν τις καλούμενες και
  κληθείσες μεθόδους, αντίστοιχα.
  * Γεννήτριες ελέγχου παρέχουν υποβοήθηση στην παραγωγή περιπτώσεων
  ελέγχου.
  Η παραγωγή μπορεί να είναι τυχαία, βάσει μονοπατιών, μοντέλου ή ενός
  συνδυασμού αυτών.
  * Εργαλεία εγγραφής και επανάληψης αυτόματα εκτελούν ξανά ή επαναλαμβάνουν,
  προηγουμένως εκτελεσμένες δοκιμές των οποίων έχουν καταγραφεί οι είσοδοι
  και τα αποτελέσματα (για παράδειγμα οθόνες).
  * Χρησμός/αρχείο σύγκρισης/ισχυρισμού εργαλείων ελέγχου βοηθούν
  στην απόφαση πότε το αποτέλεσμα του ελέγχου είναι επιτυχές ή όχι.
  * Αναλυτές κάλυψης και ενορχηστρωτές μπορούν να δουλεύουν μαζί.
  Οι αναλυτές κάλυψης εκτιμούν ποιες και πόσες οντότητες του γραφήματος
  ροής του προγράμματος έχουν εκτελεστεί ανάμεσα σε εκείνες που απαιτούνται
  από το επιλεγμένο κριτήριο κάλυψης της δοκιμής.
  Η ανάλυση μπορεί να γίνει χάρη στους ενορχηστρωτές, που εισάγουν ανιχνευτές
  εγγραφής μέσα στον κώδικα.
  * Ιχνηλάτες καταγράφουν το ιστορικό των εκτελέσεων των μονοπατιών
  ενός προγράμματος.
  * Εργαλεία ελέγχου παλινδρόμησης υποστηρίζουν την επανάληψη εκτέλεσης
  μιας σειράς ελέγχων μετά την τροποποίηση ενός τμήματος του λογισμικού.
  Μπορούν, επίσης, να βοηθήσουν στην επιλογή ενός υποσυνόλου δοκιμών
  ανάλογα με την αλλαγή που πραγματοποιήθηκε.
  * Εργαλεία αξιολόγησης αξιοπιστίας υποστηρίζουν την ανάλυση των
  αποτελεσμάτων των ελέγχων και τη γραφική οπτικοποίηση προκειμένου
  να αξιολογηθεί η αξιοπιστία, των σχετικών με αυτήν, μετρικών ανάλογα
  με τα επιλεγμένα μοντέλα.
