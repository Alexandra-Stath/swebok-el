# Υπολογιστικά Θεμέλια

## Ακρωνύμια

|**Ακρωνύμια** |**Ορισμοί** |
|ADT       |Abstract Data Type    				|
|AI        |Artificial Intelligence    				|
|ANSI      |American National Standards Institute    		|
|AVL Tree  |Adelson-Velskii and Landis Tree   			|
|BCNF      |Boyce-Codd Normal Form    				|
|BST       |Binary Search Tree    				|
|CASE      |Common Application Service Element  		|
|CDRAM     |Cache DRAM    					|
|CERT      |Computer Engineering Response Team   		|
|CISC      |Complex Instruction Set Computer    		|
|CRUD      |Create, Read, Update, Delete   			|
|CUDA      |Compute Unified Device Architecture    		|
|DAG       |Direct Acrylic Graph   				|
|DAL       |Database Access Language    			|
|DAS       |Direct Access Storage    				|
|DBCS      |Double Byte Character Set    			|
|DCL       |Data Control Language  				|
|DDL       |Data Definition Language   				|
|DDR SDRAM |Double data rate SDRAM    				|
|DKNF      |Domain/Key Normal Form    				|
|DMA       |Direct Memory Access   				|
|DML       |Data Manipulation Language    			|
|EDW       |Enterprise Data Warehouse   			|
|FCFS      |First come, First served    			|
|FIFO      |First In, First Out    				|
|FPU       |Floating Point Unit    				|		
|HCI       |Human-Computer Interface    			|
|HMPP      |Hybrid Multicore Parallel Programming		|
|HTTP      |Hyper Text Transfer Protocol			|
|IPC       |Inter-Process Communication				|
|ISA       |Instruction Set Architecture			|
|MIMD      |Multiple instruction, multiple data stream 		|
|MISD      |Multiple instruction, single data stream		|
|MISRA     |Motor Industry Software Reliability Association 	|
|ML        |Machine Learning					|
|NAS       |Network Access Storage				|
|OSI       |Open Systems Interconnection			|	
|PDU       |Protocol Data Unit 					|
|RDBMS     |Relational DBMS 					|	
|RDM       |Runtime Database Manager				|
|RDRAM     |Rambus DRAM 					|
|RISC      |Reduced Instruction Set Computer 			|
|RTOS      |Real Time Operating System 				|
|SAN       |Storage Area Network 				|
|SASE      |Specific Application Service Element 		|
|SDRAM     |Synchronous DRAM  					|
|SEI       |Software Engineering Institute  			|
|SIMD      |Single instruction, multiple data stream 		|
|SISD      |Single instruction, single data stream  		|
|SQL       |Structured Query Language 				|
|SRTF      |Shortest Remaining Time First 			|

## Εισαγωγή

Οι μηχανικοί λογισμικού πρέπει να κατανοήσουν και να εμπεδώσουν τις διαφορές
μεταξύ του ρόλου τους και του ρόλου ενός προγραμματιστή ηλεκτρονικών υπολογιστών.
Ένας τυπικός προγραμματιστής μετατρέπει έναν δεδομένο αλγόριθμο σε ένα σύνολο
εντολών υπολογιστή, μεταγλωττίζει τον κώδικα, δημιουργεί συνδέσεις με σχετικές
βιβλιοθήκες, δεσμεύει, φορτώνει το πρόγραμμα στο επιθυμητό σύστημα, εκτελεί το
πρόγραμμα και παράγει αποτελέσματα.

Από την άλλη πλευρά, ένας μηχανικός λογισμικού μελετά τις απαιτήσεις, την
αρχιτεκτονική και σχεδιάζει τα κύρια μέρη του συστήματος και αναγνωρίζει
τους βέλτιστους αλγορίθμους, τους μηχανισμούς επικοινωνίας, τα κριτήρια
απόδοσης, τα σχέδια ελέγχου και αποδοχής, τις μεθοδολογίες συντήρησης, τις
διεργασίες και τις μεθόδους μηχανικής που είναι κατάλληλες για τις εφαρμογές κ.ο.κ.

Ο βασικός σκοπός του *οδηγού SWEBOK (Software Engineering Body of Knowledge)* είναι
να αναγνωρίσει τα γνωστικά πεδία (KAs) που πρέπει να κατέχουν οι επαγγελματίες
μηχανικοί λογισμικού, σύμφωνα με τους ειδικούς του αντικειμένου που ασκούν το
επάγγελμα παγκοσμίως.

Οι μηχανικοί λογισμικού αναμένεται να έχουν βαθιά και ευρεία γνώση διαφόρων
εννοιών της επιστήμης των υπολογιστών και να είναι σε θέση να τις εφαρμόζουν.
Οι έννοιες αυτές συνθέτουν τα θεμέλια της πληροφορικής.

## Κατανομή των θεμάτων για τα Υπολογιστικά Θεμέλια

Η κατανομή των θεμάτων για το γνωστικό πεδίο (KA) των Υπολογιστικών Θεμελίων παρουσιάζεται στο Σχήμα 16.1.

![Σχήμα 1](figure1-path)
**Σχήμα 16.1. Κατανομή των θεμάτων του γνωστικού πεδίου των Υπολογιστικών Θεμελίων*

## 1 Βασικές Έννοιες ενός Συστήματος ή Επίλυσης

Το πρόβλημα που πρέπει να επιλυθεί θα πρέπει να αναλυθεί σε μεγαλύτερη λεπτομέρεια
σε σχέση με τις λειτουργικές απαιτήσεις, τις αλληλεπιδράσεις με τον χρήστη, τις
απαιτήσεις επιδόσεων, τις διεπαφές επικοινωνίας, την ασφάλεια, την ευπάθεια,
την ανθεκτικότητα και τη δυνατότητα αναβάθμισης. Ένα σύστημα είναι ένα ολοκληρωμένο
σύνολο υποσυστημάτων, ενοτήτων και συνιστωσών που εκτελούν συγκεκριμένες λειτουργίες
ανεξάρτητα. Η οριοθέτηση του προβλήματος και της λύσης είναι ζωτικής σημασίας.

Ένα κατασκευασμένο σύστημα εγγυάται ότι τα υποσυστήματα έχουν σχεδιαστεί έτσι
ώστε να είναι:

	* **Αρθρωτά:** Κάθε υποσύστημα (ενότητα) είναι ομοειδές (παρόμοιου μεγέθους).
	* **Συνεκτικά:** Κάθε υποσύστημα εκτελεί ένα συγκεκριμένο έργο. Ιδανικά, τα
	συστήματα πρέπει να είναι ισχυρά συνεκτικά μεταξύ τους.
	* **Συζευγμένα:** Κάθε υποσύστημα λειτουργεί ανεξάρτητα, όσο το δυνατόν
	περισσότερο. Ιδανικά, τα συστήματα θα πρέπει να είναι το δυνατόν
	χαλαρά συνδεδεμένα.

Τα υποσυστήματα μπορούν να τμηματοποιηθούν περαιτέρω σε ενότητες και υπο-ενότητες
που παρουσιάζουν επίσης τα παραπάνω χαρακτηριστικά.

Το σύστημα μπορεί να περιλαμβάνει υποσυστήματα τόσο λογισμικού όσο και υλικού.
Το υλικό πρέπει να είναι σχεδιασμένο ώστε να υποστηρίζει τα υποσυστήματα λογισμικού
και να ικανοποιεί όλες τις απαιτήσεις του χρήστη, ιδίως τις διεπαφές χρήστη
(είσοδος/έξοδος (I/O)) και τις επιδόσεις.

Η παρούσα ενότητα επικεντρώνεται στη σχεδίαση και την κατασκευή υποσυστημάτων
τεχνολογίας λογισμικού.

Οι εφαρμογές μπορεί να απαιτούν συστήματα που είναι χειροκίνητα ή πλήρως
ή ημιαυτόματα, πραγματικού χρόνου, σε απευθείας σύνδεση ή εκτός σύνδεσης,
διαμοιρασμένα ή σε μία τοποθεσία, κ.ο.κ.

Οι αρχιτέκτονες των υποσυστημάτων λογισμικού πρέπει να εξετάσουν μεταξύ
άλλων την κατάλληλη τεχνολογία, τα εργαλεία, τη δομή δεδομένων, το
λειτουργικό σύστημα, τη βάση δεδομένων (εάν απαιτείται), τις διεπαφές
χρήστη, τις γλώσσες προγραμματισμού και τους αλγορίθμους για τη βέλτιστη
επεξεργασία των λύσεων μεταξύ άλλων.

Οι απαιτήσεις λογισμικού, η αρχιτεκτονική, ο σχεδιασμός, η ανάπτυξη,
ο έλεγχος, οι μέθοδοι και τα μοντέλα, η διασφάλιση ποιότητας και η
ασφάλεια εξετάζονται λεπτομερώς σε άλλα κεφάλαια ως ανεξάρτητα γνωστικά
πεδία (KAs).

Το γνωστικό πεδίο (KA) των Υπολογιστικών Θεμελίων επικεντρώνεται στην επεξήγηση
των βασικών εννοιών της επιστήμης των υπολογιστών που πρέπει να γνωρίζει
καλά ένας μηχανικός λογισμικού για να στήνει την αρχιτεκτονική, να σχεδιάζει,
να αναπτύσσει, να μεταφέρει και να συντηρεί χρήσιμα υποσυστήματα λογισμικού
υψηλής ποιότητας.

## 2 Αρχιτεκτονική και Οργάνωση Υπολογιστών

Η αρχιτεκτονική υπολογιστών αναφέρεται στα συστατικά στοιχεία ενός συστήματος
υπολογιστών που έχουν σχεδιαστεί για συγκεκριμένους σκοπούς. Η οργάνωση του
υπολογιστή εξηγεί πώς οι μονάδες εντός του συστήματος συνδέονται και
αλληλεπιδρούν για την επίτευξη αυτών των σκοπών.

Οι αρχιτέκτονες συστημάτων πρέπει να αναλύσουν την εφαρμογή για την οποία
πρόκειται να σχεδιαστεί ή να αναπτυχθεί το σύστημα υπολογιστών, να αναγνωρίσουν
τα κρίσιμα στοιχεία, συμπεριλαμβανομένων των απαιτούμενων συσκευών εισόδου/εξόδου
(μαζί με τη διαπερατότητα), τους τύπους και την ποσότητα μνήμης, την επεξεργαστική
ισχύ και τους απαιτούμενους συνεπεξεργαστές, όπως επίσης και να επιλέξουν ή να
σχεδιάσουν την κατάλληλη αρχιτεκτονική και οργάνωση υπολογιστών. Όλες οι ενδεχόμενες
και μη περιπτώσεις θα πρέπει να προβλεφθούν για τους απαιτούμενους πόρους.

Αυτή η περιοχή περιεχομένου συζητά διάφορες αρχιτεκτονικές και οργανώσεις υπολογιστών 
που θα πρέπει να γνωρίζει ένας αρχιτέκτονας συστημάτων ή λογισμικού.

### 2.1 Αρχιτεκτονική Υπολογιστών

Η αρχιτεκτονική περιγράφει τι κάνει ο υπολογιστής ή το σύστημα και τα συστατικά του,
όπως η μνήμη, οι συσκευές αποθήκευσης δεδομένων, τα γραφικά και η υπολογιστική ισχύς
του υπολογιστή ή του επεξεργαστή. Ένα υπολογιστικό σύστημα διαθέτει συνήθως μνήμη,
συσκευές εισόδου/εξόδου και μια κεντρική μονάδα επεξεργασίας (CPU).

Αυτά τα εξαρτήματα συνδέονται μέσω φυσικών γραμμών σήματος που ονομάζονται *δίαυλοι*.
Συνήθως, χρησιμοποιούνται τρεις τύποι διαύλων για συγκεκριμένους σκοπούς:

	* Δίαυλος Διεύθυνσης, ο οποίος απευθύνεται ή προσπελαύνει μια συγκεκριμένη
	θέση μνήμης ή συσκευή εισόδου/εξόδου.
	* Δίαυλος Δεδομένων, ο οποίος αποθηκεύει (γράφει) ή ανακτά (διαβάζει) δεδομένα
	προς και από τη θέση μνήμης.
	* Δίαυλος ελέγχου, ο οποίος παρέχει σήματα ελέγχου από την ΚΜΕ σε συσκευές
	εισόδου/εξόδου (ανάγνωση ή εγγραφή, ενεργοποίηση ή απενεργοποίηση, διακοπή,
	κατάσταση, επαναφορά κ.λπ.).

Οι μηχανικοί λογισμικού αναμένεται να γνωρίζουν τις λεπτομέρειες της λειτουργίας και
του χρονισμού των διαφόρων τύπων διαύλων, διαύλων πρώτης, δεύτερης και τρίτης γενιάς,
εσωτερικών και εξωτερικών διαύλων, σειριακών και παράλληλων διαύλων, διαύλων simplex,
full-duplex και halfduplex- Mil-Std-1553Bbus, Wishbone buses, κ.λπ.

### 2.2 Τύποι Αρχιτεκτονικών Υπολογιστών

#### 2.2.1 Αρχιτεκτονική Von Neumann

Ο John von Neumann σχεδίασε μια αρχιτεκτονική συστήματος υπολογιστών με πέντε βασικά
συστατικά στοιχεία, όπως φαίνεται στο Σχήμα 16.2:

	* Αριθμητική λογική μονάδα (ALU) που εκτελεί αριθμητικούς και λογικούς
	υπολογισμούς. 
	* Μνήμη όπου φορτώνεται και εκτελείται το πρόγραμμα και τα δεδομένα
	(πρόγραμμα και δεδομένα βρίσκονται στον ίδιο χώρο μνήμης). 
	* Συσκευές εισόδου (π.χ. πληκτρολόγιο, ποντίκι, σειριακή θύρα, σκληρός
	δίσκος) που επιτρέπουν στο χρήστη να παρέχει εισόδους και εντολές ελέγχου. 
	* Συσκευές εξόδου (π.χ. οθόνη, εκτυπωτής) που μεταδίδουν ή κοινοποιούν
	τα υπολογισμένα αποτελέσματα. 
	* Η μονάδα ελέγχου συγχρονίζει όλες τις συσκευές, τη μνήμη και την ALU.

![Σχήμα 2](figure2-path)
**Σχήμα 16.2. Αρχιτεκτονική Υπολογιστή**

#### 2.2.2 Αρχιτεκτονική Χάρβαρντ

Η αρχιτεκτονική Harvard παρέχει ξεχωριστά μπλοκ μνήμης για τον κώδικα
(πρόγραμμα ή εντολές) και δεδομένα. Καθώς τα μπλοκ μνήμης κώδικα και
δεδομένων είναι διαφορετικά, τα περιεχόμενα της διεύθυνσης 0000 στο
μπλοκ κώδικα και τα περιεχόμενα της διεύθυνσης 0000 στο μπλοκ δεδομένων
είναι διαφορετικά. Η CPU διαβάζει εντολές από τις διευθύνσεις κώδικα και
διαβάζει δεδομένα από τις διευθύνσεις δεδομένων.

Ο σχεδιασμός και η υλοποίηση του συστήματος στην αρχική αρχιτεκτονική
Harvard ήταν σχετικά πολύπλοκος. Η τροποποιηµένη αρχιτεκτονική Harvard
παρέχει ένα µπλοκ µνήµης αλλά το χωρίζει σε τµήµατα κώδικα και δεδοµένων.
Τα τμήματα μνήμης δεδομένων έχουν δυνατότητα ανάγνωσης/εγγραφής, ενώ τα
τμήματα μνήμης κώδικα είναι μόνο για ανάγνωση (έτσι προστατεύεται ο κώδικας
από αλλοιώσεις κατά την εκτέλεση). Οι λειτουργίες εισόδου/εξόδου μπορούν
να εκτελούνται ταυτόχρονα.

#### 2.2.3 Αρχιτεκτονική Συνόλου Εντολών

Μια αρχιτεκτονική συνόλου εντολών (ISA) είναι ένα αφηρημένο μοντέλο του τρόπου
με τον οποίο μια CPU εκτελεί τα σύνολα εντολών που ορίζονται για το σύστημα.
Μια ISA ορίζει καταχωρητές (διεύθυνση, δεδομένα, σημαίες), τύπους δεδομένων,
εντολές που αφορούν ειδικά τον υπολογιστή ή το σύστημα, συστήματα διευθυνσιοδότησης
μνήμης (εσωτερικής και εξωτερικής) και μοντέλα χειρισμού εισόδου/εξόδου.

Η αρχιτεκτονική RISC (Reduced Instruction Set Computer) και η αρχιτεκτονική CISC
(Complex Instruction Set Computer) είναι οι δύο κύριοι τύποι ISA.

Στον RISC, οι εντολές εκτελούν μεμονωμένες εργασίες, όπως ανάγνωση από τη μνήμη ή
την είσοδο/έξοδο, εκτέλεση αριθμητικών ή λογικών υπολογισμών και αποθήκευση δεδομένων
στη μνήμη ή την είσοδο/έξοδο. Το υπολογιστικό σύστημα είναι απλό αλλά απαιτεί περισσότερες
εντολές για την εκτέλεση μιας εργασίας. Απαιτεί λιγότερους κύκλους ρολογιού ανά εντολή και
τα μεγέθη των εντολών τείνουν να είναι σταθερά. Καθώς το σύνολο εντολών είναι
μικρό (λιγότερες εντολές), είναι ευκολότερο να κατασκευαστεί ένας μεταγλωττιστής και
το πρόγραμμα μπορεί να είναι σχετικά μεγάλο. Οι αρχιτεκτονικές RISC σχεδιάζονται συνήθως
για επεξεργαστές γενικής χρήσης.

Οι εντολές είναι σχετικά πιο ισχυρές στο CISC και μπορούν να εκτελέσουν πολλαπλές εργασίες,
όπως ανάγνωση δεδομένων από τη μνήμη + εκτέλεση αριθμητικής πράξης + αποθήκευση του
αποτελέσματος στη μνήμη. Εδώ, απαιτούνται λιγότερες εντολές για την εκτέλεση μιας εργασίας,
αλλά οι εντολές χρειάζονται περισσότερους κύκλους ρολογιού για να ολοκληρωθούν.
Τα μεγέθη των εντολών ποικίλλουν σε μεγάλο βαθμό ανάλογα με τις λειτουργίες με
καταχωρητές, μνήμη και I/O. Τα προγράμματα είναι σχετικά μικρά. Οι CISC σχεδιάζονται
συνήθως για συγκεκριμένους σκοπούς, όπως η ψηφιακή επεξεργασία σήματος (DSP)
και τα γραφικά.

#### 2.2.4 Αρχιτεκτονική ή Ταξινομία του Flynn

Οι υπολογιστικές αρχιτεκτονικές που περιγράφηκαν παραπάνω εξετάζουν έναν
υπολογιστή κάθε φορά. Ο Michael J. Flynn πρότεινε παράλληλες αρχιτεκτονικές
υπολογιστών, όπου στο σύστημα χρησιμοποιούνται πολλαπλές ροές εντολών και
πολλαπλές ροές δεδομένων. Οι μηχανικοί λογισμικού πρέπει να γνωρίζουν τους
διάφορους τύπους της αρχιτεκτονικής του Flynn, με παραδείγματα,
συμπεριλαμβανομένων των ακόλουθων: 

	* Αρχιτεκτονική μίας εντολής, μίας ροής δεδομένων (SISD) 
	* Αρχιτεκτονική μίας εντολής, πολλαπλών ροών δεδομένων (SIMD) 
	* Αρχιτεκτονική πολλαπλών εντολών, μονής ροής δεδομένων (MISD) 
	* Αρχιτεκτονική πολλαπλών εντολών, πολλαπλών ροών δεδομένων (MIMD) 

Οι παραλλαγές αυτών των αρχιτεκτονικών περιλαμβάνουν την επεξεργασία συστοιχιών,
την παράλληλη επεξεργασία και τη συνδεδεμένη επεξεργασία - την επεξεργασία ενιαίου
προγράμματος πολλαπλών ροών δεδομένων και πολλαπλών προγραμμάτων πολλαπλών ροών
δεδομένων. Οι μηχανικοί λογισμικού αναμένεται να γνωρίζουν τις διαφορές μεταξύ
αυτών των αρχιτεκτονικών, μαζί με μελέτες περιπτώσεων, ώστε να μπορούν να επιλέξουν
την κατάλληλη αρχιτεκτονική για την επίλυση του εκάστοτε προβλήματος.

#### 2.2.5 Αρχιτεκτονική Συστήματος

Η αρχιτεκτονική συστήματος είναι ο συνολικός σχεδιασμός του συστήματος,
λαμβάνοντας υπόψη την αρχιτεκτονική υλικού, την αρχιτεκτονική λογισμικού,
τις ενότητες, τις διεπαφές, τη διαχείριση δεδομένων και την επικοινωνία
μεταξύ των ενοτήτων. Ο κατανεμημένος υπολογισμός έχει γίνει προσιτός με
την ανάπτυξη αποδοτικών, υψηλής απόδοσης εξυπηρετητών, αποθηκευτικών μέσων,
συσκευών δικτύου, λογισμικού και εργαλείων. Για κάθε δεδομένη εφαρμογή
διατίθενται διάφορα σχέδια ή αρχιτεκτονικές αναφοράς. 

Οι τυπικές αρχιτεκτονικές συστημάτων περιλαμβάνουν τα εξής: 

	* **Ολοκληρωμένη αρχιτεκτονική συστήματος:** Υπολογισμός, I/O, δεδομένα και
	δικτύωση είναι στενά συνδεδεμένα και διαθέσιμα σε ένα κουτί. Αυτή η
	αρχιτεκτονική χρησιμοποιείται συνήθως σε λύσεις που έχουν σχεδιαστεί
	για συγκεκριμένες εφαρμογές. 
	* **Αρχιτεκτονική κατανεμημένου συστήματος:** Ο υπολογισμός και η αποθήκευση
	βρίσκονται σε ξεχωριστά αλλά δικτυωμένα κουτιά. Αυτή η αρχιτεκτονική
	υποστηρίζει την κλιμάκωση, παρέχει κεντρική ή απομονωμένη αποθήκευση
	δεδομένων και μοιράζεται το υπολογιστικό φορτίο. 
	* **Αρχιτεκτονική συγκεντρωτικού συστήματος:** Διάφοροι υπολογιστικοί,
	αποθηκευτικοί και δικτυακοί πόροι είναι διαθέσιμοι σε δεξαμενές και
	παρέχονται ανάλογα με τη ζήτηση. Αυτή η αρχιτεκτονική παρέχει
	αποτελεσματική χρήση των κοινών πόρων. 
	* **Αρχιτεκτονική συγκλίνοντος συστήματος:** Όπως υποδηλώνει το όνομα,
	πρόκειται για τη σύγκλιση των κατανεμημένων και των συγκεντρωτικών
	αρχιτεκτονικών. Αυτή η αρχιτεκτονική υποστηρίζει την ευελιξία και
	την επεκτασιμότητα.

Οι μηχανικοί λογισμικού αναμένεται επίσης να γνωρίζουν και να είναι σε θέση
να εφαρμόζουν διάφορες άλλες αρχιτεκτονικές, συμπεριλαμβανομένης της
αρχιτεκτονικής .NET Framework, της αρχιτεκτονικής Unix και της αρχιτεκτονικής
εικονικών μηχανών.

### 2.3 Μικρο-αρχιτεκτονική ή Οργάνωση Υπολογιστών

Η μικρο-αρχιτεκτονική ή η οργάνωση του υπολογιστή εξηγεί πώς υλοποιείται η ISA
ενός υπολογιστή και πώς λειτουργούν και αλληλεπιδρούν μεταξύ τους τα διάφορα
στοιχεία του συστήματος για να παράγουν το επιθυμητό αποτέλεσμα. 

Οι αρχιτέκτονες και οι μηχανικοί συστημάτων πρέπει να γνωρίζουν τα διάφορα
στοιχεία που χρησιμοποιούνται στο σύστημα μαζί με τον τρόπο λειτουργίας τους.
Ορισμένα από αυτά τα στοιχεία εξετάζονται παρακάτω.

#### 2.3.1 Αριθμητική Λογική Μονάδα

Η ALU εκτελεί όλους τους αριθμητικούς υπολογισμούς και τις λογικές πράξεις.
Η CPU διαθέτει συνήθως μια ALU, έναν επεξεργαστή, μια μνήμη και μια μονάδα
ελέγχου. Οι ΚΜΕ υψηλής τεχνολογίας μπορεί επίσης να διαθέτουν και άλλες
μονάδες επεξεργασίας ειδικών λειτουργιών, όπως μια μονάδα κινητής υποδιαστολής
(FPU), για την εκτέλεση υπολογισμών που αφορούν κινητές μονάδες ή πραγματικούς
αριθμούς (κλάσματα). Οι ALU διαθέτουν καταχωρητές που είναι μνήμη υψηλής ταχύτητας
και εσωτερικοί στην ALU. Η ALU εκτελεί τα σύνολα εντολών του επεξεργαστή. Όλες
οι πράξεις εκτελούνται συνήθως στους καταχωρητές.

Μπορούν να εφαρμοστούν διάφορα συστήματα για τη βελτίωση της απόδοσης της ALU,
συμπεριλαμβανομένης της επεξεργασίας μέσω αγωγού και της παράλληλης επεξεργασίας.
Οι πιο πρόσφατες CPU παρέχουν πολλαπλούς πυρήνες και πολλαπλά νήματα που βοηθούν
στην επίτευξη μέγιστης απόδοσης. Οι μηχανικοί λογισμικού αναμένεται να γνωρίζουν
τις διαφορές μεταξύ των πολλαπλών πυρήνων και των πολλαπλών νημάτων, μαζί με
συγκεκριμένες περιπτώσεις που απεικονίζουν την καλύτερη χρήση τους.

Οι συνεπεξεργαστές ειδικού σκοπού και οι συνεργαζόμενοι επεξεργαστές χρησιμοποιούνται
με τους κύριους επεξεργαστές για την υποστήριξη ταχύτερης επεξεργασίας.

#### 2.3.2 Μονάδα Μνήμης

Οι μονάδες μνήμης χρησιμοποιούνται για την αποθήκευση δεδομένων ή πληροφοριών,
στις οποίες έχει πρόσβαση η ΚΜΕ. Η συνολική ποσότητα μνήμης που μπορεί να
διαθέτει ένας υπολογιστής προκύπτει από τον μέγιστο αριθμό γραμμών διευθύνσεων
που υποστηρίζει η ΚΜΕ. Οι διάφοροι τύποι μνήμης που χρησιμοποιούνται στο σύστημα
περιλαμβάνουν τη μνήμη μόνο για ανάγνωση (ROM) και τη μνήμη εγγραφής ή μνήμη
τυχαίας προσπέλασης (RAM). Η ROM είναι επίσης RAM. 

Οι μηχανικοί λογισμικού που εργάζονται σε εφαρμογές με κρίσιμες επιδόσεις
αναμένεται να γνωρίζουν τις διαφορές μεταξύ των διαφόρων τύπων μνήμης,
συμπεριλαμβανομένης της στατικής RAM (SRAM), της δυναμικής RAM (DRAM), της
ασύγχρονης DRAM (ADRAM), της σύγχρονης DRAM (SDRAM), της SDRAM διπλού
ρυθμού δεδομένων (DDR SDRAM), της rambus DRAM (RDRAM) και της cache DRAM (CDRAM),
μαζί με τα πλεονεκτήματα, τα μειονεκτήματα και τις περιπτώσεις χρήσης του καθενός.

#### 2.3.3 Συσκευές Εισόδου/Εξόδου

Όπως υποδηλώνουν τα ονόματα, οι συσκευές εισόδου είναι εκείνες που παρέχουν
εισροές στο σύστημα υπολογιστών και οι συσκευές εξόδου είναι εκείνες που παραδίδουν
τις εκροές των συστημάτων υπολογιστών στον χρήστη. Ενώ ορισμένες συσκευές είναι μόνο
εισόδου (πληκτρολόγιο, ποντίκι, μικρόφωνο, κ.λπ.) ή μόνο εξόδου (εκτυπωτής, οθόνη,
ηχεία, κ.λπ.), μερικές συσκευές χρησιμεύουν και ως συσκευές εισόδου και ως συσκευές
εξόδου (π.χ. οθόνες αφής, σκληροί δίσκοι, μονάδες USB). 

Οι μηχανικοί λογισμικού αναμένεται να κατανοήσουν τη διασύνδεση των συσκευών
εισόδου/εξόδου με το σύστημα, αν πρόκειται για συσκευές εισόδου/εξόδου με
χαρτογράφηση μνήμης ή με χαρτογράφηση εισόδου/εξόδου, καθώς και τους οδηγούς
συσκευών που απαιτούνται για την αλληλεπίδραση των χρηστών ή των εφαρμογών
με τις συσκευές μέσω του λειτουργικού συστήματος.

#### 2.3.4 Μονάδα Ελέγχου

Η μονάδα ελέγχου συγχρονίζει πολλαπλά στοιχεία στο σύστημα υπολογιστή. Συνήθως,
οι μονάδες ελέγχου αποτελούν μέρος της CPU. Ερμηνεύουν τις εντολές και συντονίζουν
την κίνηση δεδομένων μεταξύ διαφορετικών στοιχείων (μνήμη, συσκευές εισόδου/εξόδου
και ALU). Οι μονάδες ελέγχου χρησιμοποιούνται επίσης για την ενεργοποίηση ή
απενεργοποίηση στοιχείων ή συσκευών και την επαναφορά συσκευών. 

Οι μηχανικοί λογισμικού αναμένεται να γνωρίζουν τους διαφορετικούς τύπους μονάδων
ελέγχου, συμπεριλαμβανομένων των μονάδων ελέγχου υλικού και των μικροπρογραμματιζόμενων
μονάδων ελέγχου (αποθήκες ελέγχου ενός επιπέδου και δύο επιπέδων), καθώς και τα
πλεονεκτήματα και τις προκλήσεις του καθενός.

## 3 Δομές Δεδομένων και Aλγόριθμοι

Οι δομές δεδομένων είναι θεμελιώδους σημασίας για την επιστήμη των υπολογιστών
και τη μηχανική λογισμικού. Κάθε πρόγραμμα χρησιμοποιεί δεδομένα - λαμβάνει
δεδομένα εισόδου (δεδομένα), εκτελεί συγκεκριμένες λειτουργίες στα δεδομένα
και παράγει έξοδο. Οι δομές δεδομένων αφορούν την αποτελεσματική αναπαράσταση
διαφόρων τύπων δεδομένων, την αποτελεσματική εκτέλεση διαφόρων λειτουργιών στα
δεδομένα και την αποτελεσματική αποθήκευση και ανάκτηση δεδομένων. Οι μηχανικοί
λογισμικού πρέπει να εμπεδώσουν τις δομές δεδομένων, την επιλογή δομών δεδομένων
και τις λειτουργίες σε αυτές ειδικά για τις εφαρμογές.

Σε αυτό το κεφάλαιο, συζητούνται διάφοροι τύποι δομών δεδομένων και διάφορες
λειτουργίες σε αυτές. 

### 3.1 Τύποι Δομών Δεδομένων

Ο τύπος δεδομένων είναι ένα χαρακτηριστικό των δεδομένων. Οι διάφοροι τύποι
δεδομένων προσδιορίζονται και ορίζονται με βάση τα διάφορα χαρακτηριστικά των
δεδομένων, την ανάγκη ομαδοποίησης στοιχείων δεδομένων και τις διάφορες
λειτουργίες που εκτελούνται στα δεδομένα. Οι δομές δεδομένων ομαδοποιούνται
κυρίως με βάση τη φυσική και λογική διάταξη των στοιχείων δεδομένων.

Κατά κύριο λόγο, τα δεδομένα ομαδοποιούνται σε τρεις τύπους: βασικά, σύνθετα
ή πολύπλοκα και αφηρημένα.

Οι βασικοί ή πρωτόγονοι τύποι δεδομένων περιλαμβάνουν τους χαρακτήρες, τους
ακέραιους αριθμούς, τους κινητούς ή πραγματικούς αριθμούς, τα λογικά δεδομένα
Boolean και τους δείκτες.

Οι σύνθετοι τύποι δεδομένων αποτελούνται από πολλαπλούς βασικούς ή πρωτόγονους
ή ακόμη και από πολλαπλούς σύνθετους τύπους δεδομένων. Ορισμένοι από τους σύνθετους
τύπους δεδομένων περιλαμβάνουν σύνολα, γραφήματα, εγγραφές και κατατμήσεις.

Ένας αφηρημένος τύπος δεδομένων (ADT) ορίζεται από τη συμπεριφορά του (σημασιολογία)
από την οπτική γωνία του χρήστη, συγκεκριμένα από την άποψη των πιθανών τιμών και
πράξεων.

Οι σύνθετοι ή σύνθετοι τύποι δεδομένων ομαδοποιούνται περαιτέρω σε γραμμικούς και
ιεραρχικούς ή μη γραμμικούς τύπους δεδομένων. 

Οι γραμμικοί τύποι δεδομένων περιλαμβάνουν μονοδιάστατους και πολυδιάστατους πίνακες,
συμβολοσειρές, συνδεδεμένες λίστες (μονόπλευρα συνδεδεμένες λίστες, διπλά συνδεδεμένες
λίστες, κυκλικές λίστες), στοίβες, ουρές και πίνακες κατακερματισμού. 

Οι ιεραρχικοί ή μη γραμμικοί τύποι δεδομένων περιλαμβάνουν δέντρα, δυαδικά δέντρα,
δέντρα n-συστοιχιών, δέντρα B, δέντρα B+, σταθμισμένα ισορροπημένα δέντρα, δέντρα
κόκκινου-μαύρου, γραφήματα, σωρούς, δυαδικούς σωρούς και γραφήματα. 

Στη σημερινή εποχή των ερωτημάτων ελεύθερου κειμένου ή της επεξεργασίας φυσικής γλώσσας,
οι μηχανικοί λογισμικού μπορεί να χρειαστεί να κατανοήσουν τις συμβολοσειρές και τις
διάφορες πράξεις σε συμβολοσειρές και να είναι σε θέση να αναλύουν λίστες παραλείψεων. 

Οι μηχανικοί λογισμικού πρέπει να κατανοούν τις αποχρώσεις των διαφόρων τύπων δεδομένων
και των μεγεθών τους στη μνήμη (μικρός ακέραιος, ακέραιος, μακρύς ακέραιος, μακρύς
μακρύς ακέραιος, προσημασμένος και μη προσημασμένος ακέραιος, float, double,
long double, double byte character set (DBCS), Boolean κ.λπ.), καθώς και τον
τρόπο με τον οποίο οι διάφοροι τύποι δεδομένων αναπαρίστανται και αποθηκεύονται
στη μνήμη και πώς εκτελούνται διάφορες πράξεις σε αυτούς. Τα σύνολα, οι γραφικές
παραστάσεις και τα δέντρα εξετάζονται λεπτομερέστερα στο γνωστικό πεδίο (KA) των
Μαθηματικών Θεμελίων.

### 3.2 Πράξεις σε Δομές Δεδομένων 

Οι βασικές λειτουργίες που εκτελούνται στις δομές δεδομένων περιλαμβάνουν τη
δημιουργία, την ανάγνωση, την ενημέρωση και τη διαγραφή (CRUD). Οι σύνθετοι
τύποι δεδομένων απαιτούν επίσης διάφορους τρόπους διάσχισης συνόλων δεδομένων
για τον εντοπισμό συγκεκριμένων στοιχείων δεδομένων πριν από την εκτέλεση της
λειτουργίας. 

Είναι σημαντικό να διασφαλιστεί ότι οποιαδήποτε εισαγωγή ή διαγραφή στοιχείων
σε ένα σύνολο δεδομένων ή σε μια βάση δεδομένων δεν μεταβάλλει το σύνολο
δεδομένων ή τη βάση δεδομένων με τρόπο που παραβιάζει οποιαδήποτε πολιτική
βάσει της οποίας σχεδιάστηκε και κατασκευάστηκε η βάση δεδομένων. 

Πρόσθετες λειτουργίες που εκτελούνται στις δομές δεδομένων περιλαμβάνουν την
ταξινόμηση των στοιχείων δεδομένων σε μια συγκεκριμένη σειρά, την αναζήτηση
και τον εντοπισμό ενός στοιχείου δεδομένων και τη συγχώνευση δύο ή περισσότερων
συνόλων δεδομένων σε ένα σύνολο χωρίς να διαταράσσεται η πολιτική βάσει της
οποίας έχει κατασκευαστεί το σύνολο δεδομένων. Οι αλγόριθμοι αναζήτησης και
ταξινόμησης εξετάζονται στην επόμενη ενότητα. 

Δημιουργούνται διάφορες δομές δεδομένων για να ανταποκρίνονται σε συγκεκριμένες
εφαρμογές, όπως στοίβες, ουρές, δέντρα και γραφήματα. Οι μηχανικοί λογισμικού
ενθαρρύνονται να μάθουν τις διελεύσεις μέσω μη γραμμικών δομών δεδομένων,
οι οποίες περιλαμβάνουν διαφορετικούς αναλυτές δέντρων (διελεύσεις δέντρων
προ-διάταξης, εντός-διάταξης και μετά-διάταξης), λειτουργίες CRUD σε δέντρα,
εξισορρόπηση δέντρων, δυαδικά δέντρα αναζήτησης (BST), δέντρα AVL και δέντρα
κόκκινου-μαύρου, και να μάθουν αλγορίθμους αναζήτησης δέντρων (πρώτα βάθος,
πρώτα πλάτος, συντομότερες διαδρομές κ.λπ.). Μερικά από αυτά συζητούνται
στο γνωστικό πεδίο (KA)των Μαθηματικών Θεμελίων.

### 3.3 Αλγόριθμοι και Χαρακτηριστικά των Αλγορίθμων

Όλα τα λογισμικά υλοποιούν λογική για την εκτέλεση της απαιτούμενης λειτουργίας.
Αυτή η λογική ή ο αλγόριθμος για την εκτέλεση μιας συγκεκριμένης εργασίας πρέπει
να σχεδιάζεται ή να επιλέγεται με γνώμονα την απόδοση του συστήματος, την ασφάλεια,
τη φορητότητα, τη συντηρησιμότητα, την επεκτασιμότητα και την απλότητα, μεταξύ άλλων. 

Η πολυπλοκότητα ενός αλγορίθμου προσδιορίζεται με τη μέτρηση των υπολογιστικών
πόρων (υπολογιστική ισχύς και χώρος) που καταναλώνει ο εν λόγω αλγόριθμος για
ένα δεδομένο σύνολο δεδομένων. 

Η βαθιά κατανόηση των δομών δεδομένων είναι ζωτικής σημασίας για την ανάλυση και
το σχεδιασμό καλών αλγορίθμων. Ανατρέξτε στην περιοχή περιεχομένου "Δομές δεδομένων
και οργάνωση" για περισσότερες λεπτομέρειες. 

Τα χαρακτηριστικά των αλγορίθμων είναι πολλά και περιλαμβάνουν τη λειτουργικότητα,
την ορθότητα, την ευρωστία, την αρθρωτότητα, τη συντηρησιμότητα, τη φιλικότητα προς
τον προγραμματιστή (ευκολία ενσωμάτωσης στο έργο και ευκολία χρήσης), τη φιλικότητα
προς τον χρήστη (δηλαδή πόσο εύκολα γίνεται κατανοητός από τους ανθρώπους), την
ανάγκη για χρόνο του προγραμματιστή, την απλότητα και την επεκτασιμότητα. 

Ένα συνήθως τονισμένο χαρακτηριστικό των αλγορίθμων είναι η "απόδοση" ή η
"αποδοτικότητα". 

Οι παράμετροι που έχουν σημασία για την κατανάλωση πόρων ενός αλγορίθμου
περιλαμβάνουν, μεταξύ άλλων, τα εξής:

1. Υλικό 
2. Λογισμικό 
3. Επιλογή και σχεδιασμός αλγορίθμου για συγκεκριμένο πρόβλημα 
4. Αποτελεσματική υλοποίηση

### 3.4 Πολυπλοκότητα Αλγορίθμου

Η πολυπλοκότητα ενός αλγορίθμου είναι ένα μέτρο των πόρων που καταναλώνει
(υπολογιστική ισχύς ή μνήμη) για ένα συγκεκριμένο πρόβλημα και δεδομένο
σύνολο δεδομένων. 

Η επιλογή των σωστών δομών δεδομένων και των πράξεων σε δομές δεδομένων
και η εξασφάλιση της βέλτιστης υλοποίησης του αλγορίθμου επηρεάζουν
επίσης την πολυπλοκότητα του αλγορίθμου.

### 3.5 Μέτρηση της Πολυπλοκότητας

Συχνά, η πολυπλοκότητα ενός αλγορίθμου δηλώνεται από τους πόρους που καταναλώνονται
στο χειρότερο σενάριο. Η πολυπλοκότητα των αλγορίθμων μετράται συνήθως με ασυμπτωτικούς
συμβολισμούς για τα σενάρια καλύτερης περίπτωσης, χειρότερης περίπτωσης και μέσης
περίπτωσης όσον αφορά την κατανάλωση πόρων για ένα δεδομένο σύνολο δεδομένων. 

Οι δημοφιλείς ασυμπτωτικές σημειώσεις για αλγορίθμους παρατίθενται στον Πίνακα 16.1.

[Πίνακας 1](table1-path)
*Πίνακας 16.1. Ασυμπτωτικές Σημειώσεις για Αλγόριθμους*

Η εκμάθηση του υπολογισμού των αναφερόμενων συμβολισμών για διαφορετικά σύνολα
δεδομένων εισόδου (π.χ. ταξινομημένα, μη ταξινομημένα και ταξινομημένα με
αντίστροφη σειρά) είναι σημαντική. 

Η πολυπλοκότητα ενός αλγορίθμου μπορεί να είναι σταθερή, γραμμική, τετραγωνική,
κυβική, εκθετική ή λογαριθμική. Αυτές οι πολυπλοκότητες περιγράφονται στον
πίνακα 16.2. Συνήθως, οι σταθερές δεν λαμβάνονται υπόψη κατά τον υπολογισμό
της αποδοτικότητας ενός αλγορίθμου.

[Πίνακας 2](table2-path)
*Πίνακας 16.2. Λίστα Αλγοριθμικών Πολυπλοκότητων*

### 3.6 Σχεδιασμός Αλγορίθμων

Ο μηχανικός λογισμικού πρέπει να λάβει υπόψη του το σκοπό της συγκεκριμένης
εφαρμογής και τις απαιτήσεις απόδοσης προκειμένου να επιλέξει τον κατάλληλο
αλγόριθμο. Επιπλέον, ο μηχανικός λογισμικού πρέπει να εξετάσει τον γραμμικό
προγραμματισμό έναντι του παράλληλου προγραμματισμού και τον μονόπλευρο
έναντι του πολυνηματικού προγραμματισμού. 

Η αποδοτικότητα ενός αλγορίθμου μετράται από τους πόρους που καταναλώνει,
κυρίως υπολογιστικό χρόνο και μνήμη. 

Ένας μηχανικός λογισμικού πρέπει να γνωρίζει μερικούς τυπικούς αλγορίθμους
και σχετικές έννοιες, συμπεριλαμβανομένων των ακόλουθων: 

	* Συνήθεις τύποι αλγορίθμων: Αλγόριθμος ωμής βίας, αναδρομικός αλγόριθμος,
	αλγόριθμος διαίρει και βασίλευε, αλγόριθμοι δυναμικού προγραμματισμού,
	άπληστος αλγόριθμος, αλγόριθμοι οπισθοδρόμησης, τυχαιοποιημένοι αλγόριθμοι. 
	* Τυχαίοι αλγόριθμοι προσέγγισης, τυχαία στρογγυλοποίηση, αλγόριθμοι
	προσέγγισης, αλγόριθμοι κλάσης πολυπλοκότητας P και NP, θεώρημα του Cook,
	αναγωγές και αλγόριθμοι πληρότητας. 
	* Πολλαπλές πράξεις σύγκρισης που εκτελούνται ταυτόχρονα σε ένα δικτυακό
	μοντέλο υπολογισμού. Δημοφιλείς αλγόριθμοι δικτύου ταξινόμησης περιλαμβάνουν
	τα δίκτυα σύγκρισης, την αρχή μηδέν-ένα, το δίκτυο συγχώνευσης και τον bitonic
	sorter. 
	* Βελτιστοποιημένοι αλγόριθμοι για την εκτέλεση διαφόρων πράξεων σε έναν πίνακα,
	όπως ο πολλαπλασιασμός πινάκων, η μετάθεση, η αντιστροφή πινάκων, η διάμεσος
	και η εύρεση προσδιοριστών. 
	* Κρυπτογραφική πολυπλοκότητα και αλγόριθμοι: αλγόριθμοι κρυπτογράφησης με
	μυστικό κλειδί (συμμετρικό), αλγόριθμοι κρυπτογράφησης με δημόσιο κλειδί
	(ασύμμετρο) και συναρτήσεις κατακερματισμού. 
	* Μονόδρομες συναρτήσεις, κλάση UP, πολυπλοκότητα χώρου, ντετερμινιστικές
	και μη ντετερμινιστικές κλάσεις πολυπλοκότητας χώρου, η μέθοδος της
	προσπελασιμότητας και το θεώρημα του Savitch. 
	* Αναπαραστάσεις γραφημάτων, αλγόριθμοι γραφημάτων, αναζήτηση κατά πλάτος και
	κατά βάθος, τοπολογική ταξινόμηση, ελάχιστο δέντρο διάσχισης, αλγόριθμοι
	Kruskal και Prim και συντομότερα μονοπάτια μιας πηγής (αλγόριθμοι
	Bellman-Ford και Dijkstra). 
	* Πολυπλοκότητα τυχαιοποιημένων υπολογισμών, διαδραστικές αποδείξεις, πολυπλοκότητα
	καταμέτρησης, πολυπλοκότητα κυκλωμάτων Boole. Ιδιαίτερη σημασία σε πολλά συστήματα
	λογισμικού έχουν οι αλγόριθμοι ταξινόμησης και αναζήτησης, οι οποίοι συζητούνται
	λεπτομερέστερα.

### 3.7 Τεχνικές Ταξινόμησης

Η ταξινόμηση είναι η διαδικασία διάταξης των στοιχείων δεδομένων σε μια 
συγκεκριμένη σειρά.

Οι δημοφιλείς αλγόριθμοι ταξινόμησης περιλαμβάνουν τη Γραμμική ταξινόμηση,
τη Ταξινόμηση φυσαλίδων, τη Γρήγορη ταξινόμηση, τη Ταξινόμηση συγχώνευσης,
τη Ταξινόμηση ακτινωτών στοιχείων, τη Ταξινόμηση σωρού, τη Ταξινόμηση κάδου,
τη Ταξινόμηση περιστεριών, τη Μπιτονική ταξινόμηση, τη Ταξινόμηση δέντρων,
τη Ταξινόμηση καρτεσιανού δέντρου, τη Γρήγορη ταξινόμηση 3 τρόπων, τη
Ταξινόμηση συγχώνευσης 3 τρόπων και την Ταξινόμηση μοναδιαία / διπλά συνδεδεμένων 
λιστών. 

Κάθε αλγόριθμος ταξινόμησης έχει τα πλεονεκτήματα και τις ελλείψεις του.
Η επιλογή του κατάλληλου αλγορίθμου εξαρτάται από το μέγεθος των δεδομένων
εισόδου, τον τύπο των δεδομένων (γραμμικό ή μη γραμμικό) και τον τύπο του
συνόλου δεδομένων (εντελώς αταξινόμητο, μερικώς ταξινομημένο κ.λπ.). Οι
αλγόριθμοι υλοποιούνται τόσο με επαναληπτικές όσο και με αναδρομικές μεθόδους.
Συνήθως, οι επαναληπτικές μέθοδοι είναι καλύτερες από τις αναδρομικές μεθόδους
όσον αφορά την απόδοση της CPU και τη μνήμη. Ωστόσο, η αναδρομή παρέχει εύκολες
μεθόδους για την επίλυση συγκεκριμένων προβλημάτων, όπως οι πράξεις δέντρων.
Εάν υπάρχει επαρκής υπολογιστική ισχύς και μνήμη, η διαφορά μεταξύ αναδρομικών
και επαναληπτικών μεθόδων υλοποίησης είναι αμελητέα. 

Στην περίπτωση εφαρμογών όπου ορισμένοι αλγόριθμοι ταξινόμησης λειτουργούν
καλύτερα, οι μηχανικοί λογισμικού θα πρέπει να μάθουν και να προσαρμοστούν
σε τυχόν προϋποθέσεις και πολυπλοκότητες (απαιτήσεις σε μνήμη και υπολογιστική
ισχύ) που συνεπάγεται η χρήση τους.

### 3.8 Τεχνικές Αναζήτησης 

Η αναζήτηση είναι μια διαδικασία εύρεσης συγκεκριμένων στοιχείων δεδομένων
ή εγγραφών σε ένα σύνολο στοιχείων δεδομένων ή σε μια βάση δεδομένων. 

Οι αλγόριθμοι αναζήτησης κατηγοριοποιούνται κυρίως σε διαδοχική αναζήτηση
(το σύνολο δεδομένων διατρέχεται διαδοχικά μέχρι το τέλος του συνόλου δεδομένων)
και σε αναζήτηση διαστήματος (η αναζήτηση κινείται αποτελεσματικά μέσω μιας
ταξινομημένης λίστας, ενός ισορροπημένου δέντρου κ.λπ.), με βάση τον τρόπο
οργάνωσης των συνόλων δεδομένων. 

Ανάλογα με τον τύπο του στοιχείου δεδομένων και το μέγεθος του συνόλου
δεδομένων, χρησιμοποιούνται διάφορες τεχνικές αναζήτησης για την εύρεση
του επιθυμητού στοιχείου δεδομένων. Οι δημοφιλείς αλγόριθμοι αναζήτησης
περιλαμβάνουν γραμμική, δυαδική, άλμα, παρεμβολή, εκθετική, Fibonacci,
υπο-λίστα (αναζήτηση μιας συνδεδεμένης λίστας σε μια άλλη λίστα),
λογαριθμική, δέντρο και κατακερματισμό.

### 3.9 Κατακερματισμός

Η κατακερματισμός (hashing) είναι μια από τις πολύ σημαντικές και δημοφιλείς
τεχνικές στην οποία δεδομένα αυθαίρετου μεγέθους (τιμές κλειδιών) μετατρέπονται
σε τιμές σταθερού μεγέθους που ονομάζονται *τιμές κατακερματισμού*, οι οποίες
τοποθετούνται σε έναν πίνακα κατακερματισμού, ώστε οι εγγραφές δεδομένων να
εντοπίζονται εύκολα. Η συνάρτηση που χρησιμοποιείται για το σκοπό αυτό
ονομάζεται συνάρτηση κατακερματισμού και οι τιμές που επιστρέφονται ονομάζονται
τιμές κατακερματισμού, κωδικοί κατακερματισμού, σύνοψη ή κλειδιά κατακερματισμού. 

Διαφορετικές ιδιότητες των συναρτήσεων κατακερματισμού, όπως η ομοιομορφία,
η αποδοτικότητα, η καθολικότητα, η εφαρμοσιμότητα, η ντετερμινιστικότητα,
το καθορισμένο ή μεταβλητό εύρος, η κανονικοποίηση των δεδομένων, η δοκιμή
και η μέτρηση, πρέπει να γίνονται κατανοητές και να λαμβάνονται υπόψη κατά
το σχεδιασμό ή την επιλογή μιας συνάρτησης κατακερματισμού. 

Διάφοροι τύποι συναρτήσεων κατακερματισμού έχουν σχεδιαστεί για διαφορετικούς
τύπους τιμών κλειδιών, εφαρμογών και μεγεθών βάσεων δεδομένων. Οι τύποι
συναρτήσεων κατακερματισμού περιλαμβάνουν την τετριμμένη συνάρτηση κατακερματισμού,
τη μέθοδο διαίρεσης, τη μέθοδο μεσαίου τετραγώνου, τη μέθοδο αναδίπλωσης ψηφίων,
τον πολλαπλασιαστικό κατακερματισμό, τον διπλό κατακερματισμό, τον ανοικτό
και τον κλειστό κατακερματισμό, τον επανακατακερματισμό, τον επεκτάσιμο
κατακερματισμό και τις κρυπτογραφικές και μη κρυπτογραφικές συναρτήσεις
κατακερματισμού. 

Οι μηχανικοί λογισμικού αναμένεται να μάθουν, να υλοποιήσουν και να είναι σε θέση
να συγκρίνουν διαφορετικούς τύπους αλγορίθμων κατακερματισμού, διάφορες τεχνικές
επίλυσης συγκρούσεων, γραμμική ανίχνευση, τετραγωνική ανίχνευση, ξεχωριστή αλυσίδα 
και ανοικτή διευθυνσιοδότηση.

## 4 Βασικές Αρχές Προγραμματισμού και Γλώσσες

Τα προγράμματα υπολογιστών είναι διαδοχικά βήματα ή οδηγίες που λειτουργούν με
τις παρεχόμενες εισόδους και παράγουν τις επιθυμητές ή συγκεκριμένες εξόδους. 

Οι μηχανικοί λογισμικού πρέπει να εξετάζουν προσεκτικά διάφορες πτυχές πριν
επιλέξουν μια γλώσσα προγραμματισμού για την επίλυση ενός συγκεκριμένου
προβλήματος.

### 4.1 Τύποι Γλωσσών Προγραμματισμού

Ανάλογα με το υλικό, το λειτουργικό σύστημα και την εφαρμογή αναπτύσσονται
και χρησιμοποιούνται διάφοροι τύποι γλωσσών προγραμματισμού. Οι βασικοί
τύποι γλωσσών προγραμματισμού περιλαμβάνουν τον μικροπρογραμματισμό, τις
γλώσσες μηχανής, τον προγραμματισμό συναρμολόγησης και τον προγραμματισμό
υψηλού επιπέδου.

Ο μικρο-προγραμματισμός εκτελείται μέσα στα τσιπ μικροελεγκτών ή μικροεπεξεργαστών
για την εκτέλεση των εντολών της γλώσσας συναρμολόγησης.

Τα προγράμματα σε γλώσσα συναρμολόγησης (Assembly) χρησιμοποιούν το
μνημονικό που καθορίζεται από τον μικροελεγκτή ή τον μικροεπεξεργαστή.
Συνήθως, οι μικροελεγκτές ή οι μικροεπεξεργαστές σχεδιάζονται για να
απευθύνονται σε συγκεκριμένες εφαρμογές (επεξεργαστές DSP, τσιπ γραφικών,
ελεγκτές εισόδου/εξόδου, μαθηματικοί συνεπεξεργαστές, γενικοί επεξεργαστές
κ.λπ.).

Οι γλώσσες υψηλού επιπέδου επιτρέπουν τη συγγραφή προγραμμάτων με οδηγίες
παρόμοιες με την αγγλική γλώσσα, γεγονός που διευκολύνει τον προγραμματιστή
και τον συντηρητή στη συγγραφή και τη συντήρηση των προγραμμάτων. Οι διάφορες
γλώσσες προγραμματισμού υψηλού επιπέδου περιλαμβάνουν τις ακόλουθες:

	* Λειτουργικές γλώσσες προγραμματισμού 
	* Διαδικαστικές γλώσσες προγραμματισμού 
	* Γλώσσες αντικειμενοστραφούς προγραμματισμού 
	* Γλώσσες σεναρίων 
 	* Γλώσσες λογικού προγραμματισμού

Οι μηχανικοί λογισμικού πρέπει να μελετήσουν πολλές γλώσσες προγραμματισμού
για να επιλέξουν τη σωστή για μια συγκεκριμένη εφαρμογή.

Πολλές γλώσσες προγραμματισμού, όπως η C, η C++ και η Java, χρησιμοποιούν
μεταγλωττιστές για τη δημιουργία εκτελέσιμων αρχείων, ενώ άλλες γλώσσες
προγραμματισμού, όπως η JavaScript, η Ruby και η Python, χρησιμοποιούν
διερμηνείς.

### 4.2 Συντακτικό, Σημασιολογία, Τύποι Συστημάτων Προγραμματισμού

Το συντακτικό μιας γλώσσας προγραμματισμού είναι η γραμματική της - οι
διάφορες δομές που χρησιμοποιεί η γλώσσα προγραμματισμού. Ένας
μεταγλωττιστής ή διερμηνέας ελέγχει τη σύνταξη όλων των δηλώσεων, των
εντολών (αλγοριθμικές εντολές, εντολές υπό συνθήκη ή λογικές εντολές,
εντολές ελέγχου, βρόχοι, ειδικές εντολές για τη γλώσσα, μικροσυναρτήσεις
κ.λπ.) και των συναρτήσεων ή διαδικασιών και δημιουργεί ειδοποιήσεις για
τυχόν σφάλματα.

Η σημασιολογία αναφέρεται στο νόημα ή την ερμηνεία της δήλωσης. Το νόημα
μπορεί να διαφέρει κατά την εκτέλεση, ανάλογα με τις τιμές εκτέλεσης.

Ένας τύπος συστήματος αποδίδει έναν τύπο σε ένα στοιχείο δεδομένων ή σε
στοιχεία ενός προγράμματος, όπως οι μεταβλητές, οι εκφράσεις και οι συναρτήσεις.
Στη στατική τυποποίηση, ο τύπος είναι σταθερός - ορίζεται κατά τη δημιουργία του
προγράμματος και ελέγχεται κατά τη μεταγλώττιση. Γλώσσες όπως η C, η C++ και η
Java υποστηρίζουν τη στατική τυποποίηση. Στη δυναμική τυποποίηση, ο τύπος μιας
μεταβλητής μπορεί να αλλάξει κατά τη διάρκεια της εκτέλεσης ανάλογα με το πλαίσιο
και ως εκ τούτου ελέγχεται κατά τη διάρκεια της εκτέλεσης. Οι γλώσσες δυναμικής
τυποποίησης περιλαμβάνουν την Python, την Perl, την PHP και τη Ruby. Η δυναμική
τυποποίηση ονομάζεται επίσης πολυμορφική τυποποίηση.

Οι μηχανικοί λογισμικού αναμένεται να γνωρίζουν πώς οι γλώσσες προγραμματισμού
υψηλού επιπέδου μεταφράζονται σε γλώσσες μηχανής, να είναι εξοικειωμένοι με τους
διάφορους τύπους μεταγλωττιστών και να γνωρίζουν τις διαφορές μεταξύ μεταγλωττιστών,
διερμηνέων, διασταυρούμενων μεταγλωττιστών, συναρμολογητών και διασταυρούμενων
συναρμολογητών. Οι μηχανικοί λογισμικού ενθαρρύνονται να μάθουν για τις φάσεις
του μεταγλωττιστή, συμπεριλαμβανομένης της προεπεξεργασίας, της λεξικής ανάλυσης,
της συντακτικής ανάλυσης, της παραγωγής ενδιάμεσου κώδικα, της βελτιστοποίησης,
της γεννήτριας κώδικα, των συνδέσμων, των φορτωτών και των αποσφαλμάτωσης.

Σημαντική είναι η ανάλυση και η κατανόηση των λεκτικών, των γραμματικών,
των συντακτικών δέντρων, των δέντρων ανάλυσης και των βαρών των διαφόρων
τελεστών (προτεραιότητα) σε αριθμητικές και λογικές εξισώσεις.

### 4.3 Υποπρογράμματα και Συρρουτίνες 

Τα υποπρογράμματα ή οι συναρτήσεις είναι προγράμματα ή δομικά στοιχεία
που εκτελούν συγκεκριμένες (επιμέρους) λειτουργίες στο πλαίσιο ενός πλήρους
έργου. Τα υποπρογράμματα παρέχουν τη δυνατότητα διάσπασης του μεγαλύτερου
προγράμματος σε μικρότερες ενότητες. Οι ενότητες είναι συνήθως τμήματα κώδικα
που χρησιμοποιούνται πολλές φορές σε πολλά σημεία. Τα υποπρογράμματα μειώνουν
το χώρο μνήμης, βελτιώνουν την αναγνωσιμότητα και τη συντηρησιμότητα του
προγράμματος και εκτελούν τμήματα του προγράμματος με διαφορετικές τιμές σε
διαφορετικά σημεία και χρόνους.

Τα υποπρογράμματα έχουν ένα σημείο εισόδου και συνήθως έχουν πολλαπλές
παραμέτρους εισόδου στις οποίες το υποπρόγραμμα ενεργεί και παράγει έξοδο.
Η εμβέλεια των παραμέτρων εισόδου είναι τοπική για το υποπρόγραμμα. Τα
υποπρογράμματα που επιστρέφουν τιμή από το όνομά τους (το οποίο μπορεί να
χρησιμοποιηθεί ως μεταβλητή σε μια εντολή) ονομάζονται *συναρτήσεις*, ενώ τα
υποπρογράμματα που έχουν σχεδιαστεί για να μην επιστρέφουν καμία τιμή
ονομάζονται *διαδικασίες*.

Εξ'ορισμού, η εμβέλεια των παραμέτρων των υποπρογραμμάτων είναι δυναμική
και τοπική στο υποπρόγραμμα. Ωστόσο, εάν τα υποπρογράμματα πρέπει να θυμούνται
το ιστορικό τους ή τις προηγούμενες τιμές τους, πρέπει να δηλώνονται στατικά
ή όπως ορίζεται στην επιλεγμένη γλώσσα προγραμματισμού. 

Διαφορετικές γλώσσες προγραμματισμού υποστηρίζουν έναν ή περισσότερους τύπους
μεταβίβασης παραμέτρων, συμπεριλαμβανομένων των μεταβίβαση κατ'αξία (pass-by-value),
μεταβίβαση κατ'αναφορά (pass-by-reference), μεταβίβαση κατ'όνομα (pass-by-name),
μεταβίβαση κατ'αποτέλεσμα (pass-by-result) και μεταβίβαση κατ'αξία αποτελέσματος
(pass-by-result-value). Οι μηχανικοί λογισμικού θα πρέπει να γνωρίζουν τις διαφορές
μεταξύ αυτών των τύπων και να τους χρησιμοποιούν κατάλληλα. 

Πολλές γλώσσες υψηλών προδιαγραφών υποστηρίζουν την ένθεση υποπρογραμμάτων και
τις αναδρομές, όπου ένα υποπρόγραμμα καλεί τον εαυτό του. Οι διάφοροι τύποι
αναδρομών περιλαμβάνουν την κυκλική ή άμεση αναδρομή (το υποπρόγραμμα καλεί
τον εαυτό του) και την ακυκλική ή έμμεση αναδρομή (το υποπρόγραμμα Α καλεί
το υποπρόγραμμα Β, το οποίο με τη σειρά του καλεί το υποπρόγραμμα Α).
Είναι σημαντικό να καθοριστούν τα κριτήρια εξόδου στα αναδρομικά υποπρογράμματα.

Οι μηχανικοί λογισμικού ενθαρρύνονται να κατανοήσουν, χρησιμοποιώντας μελέτες
περιπτώσεων, πώς η διεύθυνση επιστροφής του υποπρογράμματος και οι παράμετροι
αποθηκεύονται στη μνήμη (στοίβα χρόνου εκτέλεσης), πώς χρησιμοποιούνται στο
υποπρόγραμμα και για την επιστροφή στο καλούμενο υποπρόγραμμα, καθώς και την
εμβέλεια των μεταβλητών (παγκόσμιες και τοπικές). 

Ένα υποπρόγραμμα με πολλαπλά σημεία εισόδου, όπου το προηγούμενο σημείο εξόδου
απομνημονεύεται για συνέχιση σε μεταγενέστερο σημείο, ονομάζεται **Συρρουτίνα
(Coroutine)**. Μια κλήση συρρουτίνας ονομάζεται συνήθως *κλήση συνέχισης (resume
call)*. Η πρώτη κλήση συνέχισης εισέρχεται στην υπορουτίνα από την αρχή και οι
επόμενες κλήσεις συνέχισης εισέρχονται στην υπορουτίνα στο σημείο από το οποίο
εξήλθε τελευταία φορά.

Οι γλώσσες υψηλού επιπέδου που υποστηρίζουν συρρουτίνες περιλαμβάνουν τις C++20,
C#, Java, JavaScript, Kotlin, Perl, .NET Framework, Python, Ruby και πολλές γλώσσες
συναρμολόγησης (Assembly).

Οι μηχανικοί λογισμικού ενθαρρύνονται να κατανοήσουν συγκεκριμένες εφαρμογές
στις οποίες οι συρρουτίνες είναι χρήσιμες και να τις χρησιμοποιούν. Είναι μια
ενδιαφέρουσα άσκηση η εφαρμογή συρρουτίνων στη C, καθώς η C δεν υποστηρίζει
συρρουτίνες εγγενώς.

Στο Σχήμα 16.3 απεικονίζεται η λειτουργία ή η ροή ελέγχου των συρρουτίνων.

![Σχήμα 3](figure3-path)
**Σχήμα 16.3. Παράδειγμα Συρρουτίνας**

### 4.4 Αντικειμενοστραφής προγραμματισμός

Όπως υποδηλώνει και το όνομά τους, οι αντικειμενοστραφείς γλώσσες προγραμματισμού
βασίζονται σε αντικείμενα. Τα αντικείμενα έχουν συνήθως τόσο δεδομένα όσο και
συναρτήσεις που λειτουργούν με αυτά τα δεδομένα. Τα δεδομένα ενός αντικειμένου
ονομάζονται συνήθως χαρακτηριστικά ή ιδιότητες του αντικειμένου, ενώ ο κώδικας ή
οι συναρτήσεις που λειτουργούν με τα χαρακτηριστικά ονομάζονται λειτουργίες εξωτερικά
(από τον πελάτη ή τον χρήστη) και ονομάζονται μέθοδοι εσωτερικά (που αναφέρονται στον
τρόπο με τον οποίο υλοποιείται η λειτουργία από τον προγραμματιστή).

Μια Κλάση είναι ένα πρωτότυπο που ορίζεται από τον προγραμματιστή και ορίζει τα
χαρακτηριστικά και τις μεθόδους. Τα αντικείμενα είναι πραγματικές περιπτώσεις μιας
Κλάσης. Θα μπορούσαν να υπάρχουν πολλαπλά αντικείμενα μιας Κλάσης με ποικίλα
χαρακτηριστικά. Για παράδειγμα, μια Κλάση μπορεί να ορίζεται από τα χαρακτηριστικά
και τις λειτουργίες ενός οχήματος, ενώ τα αντικείμενα είναι περιπτώσεις της κλάσης
όχημα, όπως αυτοκίνητο, λεωφορείο ή φορτηγό. 

Τα αντικείμενα αλληλεπιδρούν μεταξύ τους χρησιμοποιώντας τις μεθόδους ή τις λειτουργίες.

Σημαντικά χαρακτηριστικά του αντικειμενοστραφούς προγραμματισμού (OOP) είναι η
Αφαίρεση, η Ενθυλάκωση, η Κληρονομικότητα και ο Πολυμορφισμός. 

Η Αφαίρεση είναι μια ιδιότητα που εκθέτει μόνο τις απαιτούμενες ή σχετικές
πληροφορίες στο χρήστη, αποκρύπτοντας τις λεπτομέρειες και τα μη ουσιώδη.
Συνήθως, δημιουργείται μια υπερκλάση με γενικευμένες μεθόδους και οι υποκλάσεις
υλοποιούν τις μεθόδους ανάλογα με τις ανάγκες των συγκεκριμένων περιπτώσεων
της κλάσης (αντικειμένου). Έτσι, η υλοποίηση αποκρύπτεται από τον χρήστη της
υπερκλάσης. 

Ένα από τα βασικά πλεονεκτήματα της Ενθυλάκωσης είναι η δυνατότητα απόκρυψης
ή προστασίας δεδομένων από μη εξουσιοδοτημένους χρήστες. Ο μηχανικός
λογισμικού μπορεί να δώσει διαφορετικά επίπεδα προστασίας σε δεδομένα και
μεθόδους δηλώνοντας αυτά ιδιωτικά (τοπικά στην κλάση) ή δημόσια (διαθέσιμα
σε άλλες κλάσεις). Αυτό προστατεύει επίσης τα δεδομένα από τη διαφθορά, είτε
σκόπιμη είτε τυχαία. 

Η Κληρονομικότητα είναι ένα σημαντικό χαρακτηριστικό της OOP, όπου μια υποκλάση
ή παράγωγη κλάση κληρονομεί τις ιδιότητες μιας υπερκλάσης ή βασικής κλάσης. Οι
πρωταρχικοί τύποι κληρονομικότητας περιλαμβάνουν τους τύπους δημόσιας(public),
προστατευμένης (protected) και ιδιωτικής (private) προσπελασιμότητας.

Ο Πολυμορφισμός είναι ένα άλλο βασικό χαρακτηριστικό της OOP. Ο πολυμορφισμός
είναι η δυνατότητα να υπάρχουν πολλαπλές μορφές ανάλογα με το αντικείμενο.
Για παράδειγμα, η shape θα μπορούσε να είναι μια βασική κλάση με μέθοδο draw
και τα αντικείμενα θα μπορούσαν να είναι κύκλος, τρίγωνο ή ορθογώνιο. Η υλοποίηση
της μεθόδου draw, αν και το όνομα είναι το ίδιο, διαφέρει για έναν κύκλο, ένα
τρίγωνο και ένα ορθογώνιο. Ο πολυμορφισμός έχει δύο τύπους: 

	* **Στατικός πολυμορφισμός ή πολυμορφισμός σε χρόνο μεταγλώττισης:** Οι μέθοδοι
	(συναρτήσεις) ή οι τελεστές υπερφορτώνονται και επιλύονται κατά τη διάρκεια
	του χρόνου μεταγλώττισης. Παράδειγμα: Οι μέθοδοι, αν και έχουν το ίδιο όνομα,
	θα έχουν διαφορετικούς τύπους ή αριθμό παραμέτρων. 

	* **Δυναμικός ή πολυμορφισμός χρόνου εκτέλεσης:** Η υπερφορτωμένη μέθοδος που θα
	εκτελεστεί επιλύεται κατά τον χρόνο εκτέλεσης. Παράδειγμα: Όταν τόσο η βασική
	κλάση όσο και η παράγωγη κλάση έχουν την ίδια μέθοδο, λέγεται ότι η μέθοδος
	της βασικής κλάσης έχει υπερκαλυφθεί.

Οι δημοφιλείς γλώσσες αντικειμενοστραφούς προγραμματισμού είναι οι C++, C#, Cobol 2002,
Java, Python, Lisp, Perl, Object Pascal, Ruby και Smalltalk. 

Είναι σημαντικό να αναγνωριστεί ότι η χρήση του αντικειμενοστραφούς προγραμματισμού
απαιτεί διαφορετικό τρόπο σκέψης από αυτόν του παραδοσιακού, διαδικαστικού ή
δομημένου προγραμματισμού.

### 4.5 Κατανεμημένος και Παράλληλος Προγραμματισμός

Σε ένα κατανεμημένο υπολογιστικό σύστημα, πολλά μέρη του λογισμικού
εκτελούνται σε πολλούς υπολογιστές, συνδεδεμένους μέσω δικτύων υπολογιστών,
για την επίτευξη ενός κοινού στόχου. Η συγγραφή τέτοιων προγραμμάτων ονομάζεται
*κατανεμημένος προγραμματισμός*. 

Ο παράλληλος προγραμματισμός είναι ένας τύπος υπολογισμού στον οποίο
διαφορετικά μέρη του προγράμματος εκτελούνται παράλληλα για την επίτευξη
του ίδιου στόχου ή στόχου. Ο πίνακας 16.3 συγκρίνει τον κατανεμημένο και
τον παράλληλο προγραμματισμό.

[Πίνακας 3](table3-path)
*Πίνακας 16.3. Σύγκριση κατανεμημένου και παράλληλου προγραμματισμού*

### 4.6 Αποσφαλμάτωση

Τα προγράμματα, όταν γράφονται, αναμένεται να λειτουργούν σωστά και να παράγουν
την αναμενόμενη έξοδο. Ωστόσο, οι προγραμματιστές αντιμετωπίζουν συχνά τρεις
τύπους σφαλμάτων - συντακτικά σφάλματα, σφάλματα κατά το χρόνο εκτέλεσης και
λογικά σφάλματα - σε διάφορα στάδια της ανάπτυξης λογισμικού. 

Τα συντακτικά σφάλματα είναι αποκλίσεις από την τυπική μορφή που καθορίζεται από
τις γλώσσες προγραμματισμού. Αυτά αναγνωρίζονται ρητά από τους μεταγλωττιστές
και διορθώνονται εύκολα. 

Τα σφάλματα εκτέλεσης εμφανίζονται όταν ένα πρόγραμμα πέφτει σε μια απροσδόκητη
κατάσταση ή κατάσταση, όπως διαίρεση με το μηδέν, υπερχείλιση μνήμης ή
διευθυνσιοδότηση σε λάθος ή μη εξουσιοδοτημένη θέση μνήμης ή συσκευή, ή όταν
ένα πρόγραμμα προσπαθεί να εκτελέσει μια παράνομη ή μη εξουσιοδοτημένη λειτουργία
ή προσπαθεί να αποκτήσει πρόσβαση σε μια βιβλιοθήκη, για παράδειγμα. Τα προγράμματα
πρέπει να ελέγχονται διεξοδικά για διάφορους τύπους εισόδων (έγκυρα σύνολα δεδομένων,
άκυρα σύνολα δεδομένων και σύνολα δεδομένων οριακών τιμών) και συνθηκών για τον εντοπισμό
αυτών των σφαλμάτων. Μόλις εντοπιστούν, τα σφάλματα εκτέλεσης διορθώνονται εύκολα. 

Τα λογικά σφάλματα είναι ολισθήματα κατά την εφαρμογή της λογικής για την επίτευξη
της επιθυμητής εξόδου. Αυτά τα σφάλματα πρέπει να εντοπιστούν και να επιλυθούν με
διάφορα δεδομένα για κάθε λειτουργικότητα. Διάφοροι εξελιγμένοι αποσφαλματωτές υψηλών
προδιαγραφών βοηθούν στην ανίχνευση κάθε μεταβλητής ή στοιχείου δεδομένων και
υποστηρίζουν τον καθορισμό διαφόρων τύπων σημείων διακοπής.

### 4.7 Πρότυπα και Κατευθυντήριες Γραμμές

Καθώς το υπολογιστικό σύστημα ή η εφαρμογή γίνεται μεγαλύτερο και πολύπλοκο,
εμπλέκονται περισσότεροι προγραμματιστές. Τα ατομικά στυλ προγραμματισμού τους
επηρεάζουν τα χρονοδιαγράμματα του έργου και δυσχεραίνουν την ολοκλήρωση του
συστήματος, οπότε τα συστήματα γίνονται επιρρεπή σε ελαττώματα και η συντήρηση
και η βελτίωση γίνονται πρόκληση.

Υπολογίζεται ότι το 82% των ευπαθειών προκαλείται από συγκρούσεις μεταξύ στυλ
και επιλογών προγραμματισμού (https://www.ptsecurity.com/wwen/analytics/web-vulnerabilities2020/). 

Ως εκ τούτου, οι εταιρείες που έχουν συνείδηση της ποιότητας συχνά έχουν καθορίσει
πρότυπα και κατευθυντήριες γραμμές, οι οποίες θέτουν κανόνες και συστάσεις
που πρέπει να ακολουθούν οι προγραμματιστές και οι ελεγκτές τους. 

Όταν οι ομάδες λογισμικού ακολουθούν τα κατάλληλα πρότυπα κωδικοποίησης, δημιουργούν
ευανάγνωστο, καθαρότερο, φορητό, επαναχρησιμοποιήσιμο, αρθρωτό, εύκολα συντηρήσιμο,
λιγότερο επιρρεπή σε ελαττώματα κώδικα λογισμικού και τα χρονοδιαγράμματα των έργων
γίνονται πιο προβλέψιμα. Οι ακόλουθες πρακτικές μπορούν να βοηθήσουν τους οργανισμούς
να εφαρμόσουν με επιτυχία τέτοια πρότυπα: 

	* Επιλέξτε προσεκτικά τα πρότυπα και τις κατευθυντήριες γραμμές κωδικοποίησης που
	ταιριάζουν στην εφαρμογή ή το σύστημα που αναπτύσσεται. 
	* Εξετάστε τα ανοικτά πρότυπα που έχουν δημιουργηθεί με τη συμμετοχή της κοινότητας,
	όπως η Ομάδα Αντιμετώπισης Εκτάκτων Αναγκών Υπολογιστών (CERT) του Software
	Engineering Institute (SEI), καθώς και τα κλειστά πρότυπα που έχουν δημιουργηθεί
	από ομάδες εργασίας, όπως η Ένωση Αξιοπιστίας Λογισμικού της Βιομηχανίας Αυτοκινήτων
	(MISRA). 
	* Εκπαιδεύστε τους προγραμματιστές να ακολουθούν τα υιοθετημένα πρότυπα και τις
	κατευθυντήριες γραμμές. 
	* Χρήση εργαλείων και περιοδικών αναθεωρήσεων για τη διασφάλιση της τήρησης
	των εγκεκριμένων προτύπων και κατευθυντήριων γραμμών. 
	* Επανέλεγχος και αναθεώρηση των προτύπων και των κατευθυντήριων γραμμών από καιρό
	σε καιρό, μαθαίνοντας από την εκτέλεση των έργων.

Η SC 22 είναι μια υποεπιτροπή της Κοινής Τεχνικής Επιτροπής ISO/IEC JTC 1 του Διεθνούς
Οργανισμού Τυποποίησης (ISO) και της Διεθνούς Ηλεκτροτεχνικής Επιτροπής (IEC) για τον
καθορισμό προτύπων για τις γλώσσες προγραμματισμού, τα περιβάλλοντά τους και τις διεπαφές
λογισμικού συστήματος **(ISO/IEC JTC 1/SC 22)**. Συνιστάται στους μηχανικούς λογισμικού να
ανατρέχουν και σε αυτά τα πρότυπα.

## 5 Λειτουργικά Συστήματα

Ένα λειτουργικό σύστημα (ΛΣ) είναι λογισμικό που διαχειρίζεται το υλικό του υπολογιστή
και παρέχει μια πλατφόρμα για εφαρμογές λογισμικού. Οι μηχανικοί λογισμικού χρειάζονται
μια καλή γενική κατανόηση των λειτουργικών συστημάτων και των στόχων, υπηρεσιών και
λειτουργιών των λειτουργικών συστημάτων.

Διαφορετικοί τύποι λειτουργικών συστημάτων έχουν σχεδιαστεί με την πάροδο του χρόνου
για να υποστηρίζουν διάφορους τύπους συστημάτων ή εφαρμογών, συμπεριλαμβανομένης της
επεξεργασίας παρτίδων, του πολυπρογραμματισμού, του διαμοιρασμού χρόνου και της
λειτουργίας διπλής λειτουργίας - για την προστασία των εισόδων/εξόδων, της μνήμης,
της CPU, των πυρήνων και των μικροπυρήνων. 

Για να επιλέξουν ένα κατάλληλο λειτουργικό σύστημα, οι μηχανικοί λογισμικού πρέπει
να αναλύσουν διαφορετικούς τύπους λειτουργικών συστημάτων, όπως τα λειτουργικά
συστήματα ενός χρήστη, τα λειτουργικά συστήματα μίας εργασίας, τα λειτουργικά
συστήματα πολλαπλών χρηστών, τα λειτουργικά συστήματα πολλαπλών εργασιών και
τα λειτουργικά συστήματα πολλαπλών νημάτων, τα λειτουργικά συστήματα πραγματικού
χρόνου (RTOS), τα δικτυακά λειτουργικά συστήματα και τα κατανεμημένα λειτουργικά
συστήματα. Για μικρά συστήματα, μπορεί να μην απαιτείται λειτουργικό σύστημα.
Είναι σημαντικό να μελετήσετε παραδείγματα κάθε τύπου και να συγκρίνετε τα οφέλη
και τους περιορισμούς τους. 

Οι μηχανικοί λογισμικού πρέπει να κατανοήσουν τη βασική δομή των λειτουργικών
συστημάτων, τους τύπους αρχιτεκτονικής του συστήματος, τις προσεγγίσεις σχεδιασμού,
την αρχιτεκτονική των κατανεμημένων λειτουργικών συστημάτων και τα ζητήματα των
κατανεμημένων λειτουργικών συστημάτων. 

Ένα λειτουργικό σύστημα έχει συνήθως τέσσερα κύρια συστατικά: διαχείριση επεξεργαστή,
διαχείριση μνήμης, διαχείριση συσκευών και διαχείριση πληροφοριών.

### 5.1 Διαχείριση Επεξεργαστή

Οι μηχανικοί λογισμικού πρέπει να κατανοήσουν τις έννοιες του επεξεργαστή, της
διεργασίας και του χώρου διευθύνσεων. Πρέπει να κατανοούν την εκκίνηση, τις
διεργασίες, τους πυρήνες, τα νήματα, τα νήματα χρήστη και πυρήνα, το fork και
το exec, τον συγχρονισμό και την υποστήριξη υλικού για κλείδωμα. Πρέπει να
συγκρίνουν και να αντιπαραβάλλουν διάφορες έννοιες χρονοπρογραμματισμού CPU,
αλγόριθμους χρονοπρογραμματισμού, αξιολογήσεις αλγορίθμων, χρονοπρογραμματισμό
πολλαπλών επεξεργαστών και χρονοπρογραμματισμό πραγματικού χρόνου, ταυτόχρονο
προγραμματισμό, αδιέξοδα, κρίσιμες περιοχές, υπό όρους κρίσιμες περιοχές και οθόνες. 

Η επικοινωνία μεταξύ διαφορετικών διεργασιών είναι σημαντική στα πολυδιεργασιακά,
πολυχρηστικά λειτουργικά συστήματα. Ένας μηχανικός λογισμικού πρέπει να έχει βαθιά
κατανόηση της επικοινωνίας μεταξύ διεργασιών (IPC) και των τύπων IPC, συμπεριλαμβανομένων
των μηνυμάτων, των σωλήνων, της κοινής μνήμης, των σεμαφόρων, της αρθρωματοποίησης
και του συγχρονισμού διεργασιών. 

Χρησιμοποιούνται διάφοροι τύποι κλειδαριών για να εξασφαλιστεί ο σωστός συγχρονισμός
δεδομένων μεταξύ διεργασιών, συμπεριλαμβανομένων των ημαφορικών, των δυαδικών ημαφορικών,
των ημαφορικών καταμέτρησης και των κλειδαριών mutex. Η βαθιά κατανόηση των κοινών
προκλήσεων των IPCs, των αδιεξόδων, των σεναρίων αδιεξόδων και του χαρακτηρισμού αδιεξόδων,
της πρόληψης, της αποφυγής, της ανίχνευσης και της αποκατάστασης αδιεξόδων και των
γραφημάτων προτεραιότητας είναι κρίσιμη και πρέπει να εσωτερικευτεί με τη βοήθεια
μελετών περίπτωσης. 

Οι μηχανικοί λογισμικού απαιτείται να μελετήσουν, με παραδείγματα, τις ταυτόχρονες
γλώσσες, τις διεργασίες και τον προγραμματισμό, τις έννοιες των εργασιών και των
διεργασιών και τους διάφορους τύπους προγραμματισμού: και αλγόριθμους χρονοπρογραμματισμού
(first come, first served (FCFS), shortest job first (SJF), shortest remaining time first
(SRTF), priority scheduling, round robin και συνδυασμένα σχήματα).

### 5.2 Διαχείριση Μνήμης

Ένας μηχανικός λογισμικού χρειάζεται πολύ καλή κατανόηση του τρόπου διαχείρισης
της μνήμης στο σύστημα και των διαφόρων τύπων μνήμης και των σχετικών εννοιών
- φυσική μνήμη, εικονική μνήμη, δευτερεύουσα μνήμη, ιεραρχία μνήμης, σύνδεση και
κατανομή μνήμης.

Οι μηχανικοί πρέπει να κατανοούν τον κατακερματισμό της μνήμης (τόσο τον εξωτερικό
κατακερματισμό, όσο και τον εσωτερικό κατακερματισμό) και τις διάφορες έννοιες
διαχείρισης μνήμης, συμπεριλαμβανομένων των μονάδων, της σελιδοποίησης, των πινάκων
σελίδων, της τμηματοποίησης, της σελιδοποιημένης τμηματοποίησης, της διαχείρισης
εικονικής μνήμης, της σελιδοποίησης κατά απαίτηση, της αντικατάστασης σελίδων,
του thrashing και της ανταλλαγής. 

Η μνήμη κατανέμεται στις διεργασίες με διάφορους τρόπους - για παράδειγμα, μέσω
συνεχούς κατανομής, μη συνεχούς κατανομής, δυναμικής κατανομής μνήμης σε τμήματα,
στατικής ανταλλαγής και επικαλύψεων. 

Η κατανόηση των λογικών διευθύνσεων, των κατατμήσεων, της στατικής έναντι της
δυναμικής κατανομής μνήμης, της διαχείρισης του ελεύθερου χώρου και του
ανασυγκροτήματος των μπλοκ μνήμης είναι επίσης σημαντική. 

Καθώς η διαθέσιμη φυσική μνήμη είναι πάντα περιορισμένη, σχεδιάζονται και
εφαρμόζονται διάφορες στρατηγικές αντικατάστασης σελίδων μνήμης. Αυτές οι
στρατηγικές περιλαμβάνουν τις στρατηγικές First-in-first-out (FIFO),
NotRecently-Used (NRU), Least Recently Used (LRU), Most Recently Used (LRU),
Least Frequently Used (LFU), Most Frequently Used (MFU), Longest Distance
First (LDF), Second Chance και Aging μεταξύ άλλων.

### 5.3 Διαχείριση Συσκευών

Ένας μηχανικός λογισμικού πρέπει να έχει καλή γνώση των διαφορετικών τύπων
συσκευών εισόδου/εξόδου - συσκευές με απεικόνιση μνήμης και συσκευές με
απεικόνιση εισόδου/εξόδου, συσκευές μπλοκ και χαρακτήρων και συσκευές
προσωρινής αποθήκευσης. Οι μηχανικοί θα πρέπει να συγκρίνουν και να
αντιπαραβάλλουν τις συσκευές εισόδου/εξόδου με κλήση, τις συσκευές που
οδηγούνται από διακοπές και τις συσκευές άμεσης πρόσβασης στη μνήμη (DMA),
καθώς και τις συσκευές εισόδου/εξόδου με μπλοκάρισμα έναντι των συσκευών
χωρίς μπλοκάρισμα. 

Οι οδηγοί συσκευών είναι προγράμματα λογισμικού που παρέχουν μια διεπαφή
μεταξύ υλικού και εφαρμογών. Οι μηχανικοί λογισμικού θα πρέπει να κατανοούν
τους οδηγούς συσκευών, τους διάφορους τύπους οδηγών συσκευών, τους πίνακες
οδηγών συσκευών, τις λειτουργίες οδηγών συσκευών και τις διεπαφές για διάφορους
τύπους συσκευών υλικού, καθώς και τις διακοπές υλικού και λογισμικού και τις
διεπαφές μέσω διακοπών και διαδοχικής εξέτασης κατάστασης (polling). 

Οι μηχανικοί λογισμικού θα πρέπει επίσης να κατανοήσουν ότι προβλήματα με την
προσωρινή αποθήκευση, τον χρονοπρογραμματισμό, την αντιγραφή δεδομένων μεταξύ
συσκευών μέσω της μορφής πολλαπλού προγραμματισμού <spooling> και τις επιδόσεις
μπορεί να προκύψουν για κοινόχρηστες συσκευές σε λειτουργικά συστήματα πολλαπλών
χρηστών, πολλαπλών εργασιών και συσκευή μηχανισμό για την επίλυσή τους.

### 5.4 Διαχείριση Πληροφοριών

Οι μηχανικοί λογισμικού πρέπει να κατανοούν τα ακόλουθα: 

	* Την έννοια της διεργασίας, την άποψη του προγραμματιστή συστήματος
	για τις διεργασίες, την άποψη του λειτουργικού συστήματος για τις
	διεργασίες και τις υπηρεσίες του λειτουργικού συστήματος για τη
	διαχείριση διεργασιών 
	* Διαχείριση συστήματος αρχείων, διαχείριση αποθήκευσης, χαρακτηριστικά
	αρχείων, δομή καταλόγων, δομή συστήματος αρχείων, δομή μαζικής αποθήκευσης,
	συστήματα εισόδου/εξόδου, προστασία και ασφάλεια 
	* Απόψεις του χρήστη και του λειτουργικού συστήματος για το σύστημα αρχείων
	και διάφοροι τύποι συστημάτων αρχείων - απλό σύστημα αρχείων, συμβολικό
	σύστημα αρχείων, λογικό σύστημα αρχείων και φυσικό σύστημα αρχείων

Οι μηχανικοί θα πρέπει να είναι εξοικειωμένοι με διάφορες λειτουργίες, όπως λίστες
ελέγχου πρόσβασης (ACLs), πίνακας πρόσβασης, έλεγχος πρόσβασης, επαλήθευση ελέγχου
πρόσβασης, στρατηγική κατανομής δυνατοτήτων, εκκινητές εισόδου/εξόδου, στρατηγική
συσκευών, χειριστές συσκευών, χρονοπρογραμματισμός δίσκων, διαχείριση χώρου στο
δίσκο, έλεγχος ύπαρξης και ταυτόχρονος έλεγχος, σχήματα και συνδυασμένα σχήματα,
σχήματα αυθεντικοποίησης, χώρος ονομάτων καταλόγου, ιεραρχίες, κατευθυνόμενοι
ακρυλικοί γράφοι (DAGs), σκληροί και μαλακοί σύνδεσμοι.

### 5.5 Διαχείριση Δικτύου

Η διαχείριση δικτύου είναι η διαδικασία διαχείρισης και διαχείρισης διαφόρων
τύπων δικτύων. Αυτή η περιοχή περιεχομένου περιλαμβάνει έννοιες διαχείρισης
δικτύου, κατανεμημένα αντικείμενα, κατανεμημένα συστήματα αρχείων και αρχιτεκτονική,
σχεδιασμό, προβλήματα και λύσεις δικτύων. 

Ένας διαχειριστής δικτύου θα χρειαστεί λεπτομερή γνώση του φυσικού και του
λογικού χρόνου, καθώς και των πρωτοκόλλων εσωτερικού και εξωτερικού συγχρονισμού
στη διαχείριση δικτύων, όπως ο αλγόριθμος του Cristian, ο αλγόριθμος του Berkeley,
το Πρωτόκολλο Χρόνου Δικτύου, το λογικό ρολόι του Lamport, τα διανυσματικά ρολόγια,
η Casual διάταξη των μηνυμάτων και η παγκόσμια κατάσταση. 

Άλλα σημαντικά θέματα περιλαμβάνουν τον κατανεμημένο υπολογισμό, την ανίχνευση
τερματισμού, τον κατανεμημένο αμοιβαίο αποκλεισμό και την εκλογή, απλούς και
πολυκεντρικούς αλγορίθμους αμοιβαίου αποκλεισμού- κεντρικοποιημένους, βασισμένους
σε δακτυλίους, τον αλγόριθμο του Ricart Agrawala, τον αλγόριθμο του Maekawa, τους
αλγορίθμους εκλογής, τον αλγόριθμο του Bully και την επικοινωνία πολλαπλής διανομής.

Επιπλέον, οι μηχανικοί λογισμικού θα πρέπει να κατανοήσουν σημαντικές αρχές που
περιλαμβάνουν την ασφάλεια υλικού, την εξωτερική ασφάλεια, τη λειτουργική ασφάλεια,
την προστασία με κωδικό πρόσβασης, τον έλεγχο πρόσβασης, τους πυρήνες ασφαλείας και
την πολυεπίπεδη προσέγγιση.

## 6 Διαχείριση Βάσεων Δεδομένων

Μια βάση δεδομένων είναι μια συλλογή συναφών στοιχείων δεδομένων, τα οποία συλλέγονται
ειδικά για χρήση από μία ή περισσότερες εφαρμογές και αποθηκεύονται σε οργανωμένη μορφή
για εύκολη και γρήγορη πρόσβαση, χρησιμοποιώντας μία ή περισσότερες τιμές-κλειδιά.
Τα στοιχεία ή στοιχεία δεδομένων αποθηκεύονται σε μία ή περισσότερες βάσεις δεδομένων
ή αρχεία και η σχέση μεταξύ τους καθορίζεται με τη χρήση ενός σχήματος βάσης δεδομένων. 

Οι βασικές λειτουργίες που εκτελούνται στη βάση δεδομένων περιλαμβάνουν τη δημιουργία
της βάσης δεδομένων και των στοιχείων της (πίνακας, ευρετήριο, προβολές, συναρτήσεις,
διαδικασίες κ.λπ.), τη διαγραφή ή απόρριψη στοιχείων από τη βάση δεδομένων, την
τροποποίηση των περιεχομένων και της δομής της βάσης δεδομένων, καθώς και ενέργειες
ανάκτησης δεδομένων, σχολιασμού και μετονομασίας. 

Οι διάφοροι τύποι βάσεων δεδομένων περιλαμβάνουν σχεσιακές βάσεις δεδομένων, όχι
μόνο βάσεις δεδομένων με Γλώσσα Δομημένων Ερωτήσεων (NoSQL), βάσεις δεδομένων με
στήλες, αντικειμενοστραφείς βάσεις δεδομένων, βάσεις δεδομένων κλειδιού-τιμής,
βάσεις δεδομένων εγγράφων, ιεραρχικές βάσεις δεδομένων, βάσεις δεδομένων γράφων,
βάσεις δεδομένων χρονοσειρών και βάσεις δεδομένων δικτύου. Κατανοώντας ποιός
τύπος βάσης δεδομένων λειτουργεί καλύτερα για συγκεκριμένες εφαρμογές και
αναλύοντας τον ορισμό, τη δομή, τα συγκεκριμένα πλεονεκτήματα και μειονεκτήματα
κάθε τύπου βάσης δεδομένων- τι μαζί με παραδείγματα βοηθά τους μηχανικούς
λογισμικού να επιλέξουν τον σωστό τύπο βάσης δεδομένων για μια συγκεκριμένη
εφαρμογή. 

Κατά την επιλογή μιας βάσης δεδομένων, ο μηχανικός λογισμικού θα πρέπει να
αξιολογήσει τα μοντέλα δεδομένων, τα μοντέλα αποθήκευσης, τους τύπους βάσεων
δεδομένων, τις τιμές κλειδιών, τα γραφήματα, την οικογένεια στηλών, τον όγκο
των δεδομένων, τον σταθερό χρόνο πρόσβασης στα δεδομένα και τον αριθμό των
χρηστών ή των εφαρμογών που έχουν πρόσβαση στη βάση δεδομένων (κίνηση) κ.λπ. 

Οι εκπαιδευόμενοι και οι χρήστες του συστήματος βάσεων δεδομένων πρέπει να
δημιουργήσουν δύο ρόλους (χρήστης βάσεων δεδομένων και αρχιτέκτονας βάσεων
δεδομένων), να εξετάσουν διάφορες μελέτες περιπτώσεων αυξανόμενης πολυπλοκότητας,
να δημιουργήσουν πολλαπλές βάσεις δεδομένων και να αναλύσουν τις πληροφορίες.
Η διαδικασία αυτή βοηθά σημαντικά στην κατανόηση και την εσωτερίκευση του
σχεδιασμού και της διαχείρισης βάσεων δεδομένων.

### 6.1 Σχήμα

Το σχήμα μιας βάσης δεδομένων είναι μια δομή ή μια καταγραφή στοιχείων δεδομένων,
που ορίζονται σε έναν ή περισσότερους πίνακες της βάσης δεδομένων, καθώς και οι
σχέσεις μεταξύ τους. Το σχήμα μπορεί επίσης να περιέχει τύπους για τον έλεγχο της
ακεραιότητας των στοιχείων δεδομένων, των σχέσεων, των δεικτών, των συναρτήσεων ή
διαδικασιών και των προβολών. 

Ενώ το φυσικό σχήμα εξηγεί πώς έχει σχεδιαστεί η βάση δεδομένων σε φυσικό επίπεδο
(αρχεία), το λογικό σχήμα περιγράφει πώς ορίζονται τα διάφορα στοιχεία δεδομένων
σε έναν ή περισσότερους πίνακες και πώς συνδέονται μεταξύ τους. 

Διαφορετικοί τύποι σχημάτων που χρησιμοποιούνται στη βιομηχανία περιλαμβάνουν τα
σχήματα αστέρα, χιονονιφάδας και αστερισμού γεγονότων. Οι διάφοροι τύποι κλειδιών
που χρησιμοποιούνται στα σχήματα περιλαμβάνουν το πρωτεύον κλειδί, το δευτερεύον
/ εναλλακτικό κλειδί, το ξένο κλειδί, το σύνθετο κλειδί, το υποκατάστατο κλειδί
και το υποψήφιο κλειδί. 

Οι παράμετροι που επηρεάζουν τον ορισμό και τη χρήση των σχημάτων περιλαμβάνουν
τη διατήρηση της επικάλυψης, την εκτεταμένη διατήρηση της επικάλυψης, την
κανονικοποίηση και την ελαχιστοποίηση.

### 6.2 Μοντέλα Δεδομένων και Μοντέλα Αποθήκευσης

Ένα μοντέλο δεδομένων προσδιορίζει τις λογικές πτυχές της δομής δεδομένω σε μια
αποθήκη δεδομένων και ένα μοντέλο αποθήκευσης προσδιορίζει τις φυσικές πτυχές
της δομής δεδομένων σε μια αποθήκη δεδομένων. Είναι δύσκολο να επιτευχθεί τόσο
η συνέπεια των δεδομένων όσο και η υψηλή διαθεσιμότητα σε μια βάση δεδομένων.

Τα δύο κύρια μοντέλα δεδομένων που χρησιμοποιούνται για τη διάκριση των βάσεων
δεδομένων είναι τα ακόλουθα: 

	i. Το μοντέλο ACID (Atomicity, Consistency, Isolation, Durability) παρέχει
	υψηλή συνέπεια δεδομένων. Οι βάσεις δεδομένων που συμμορφώνονται με το
	πρότυπο ACID είναι ιδανικές για μια εφαρμογή έντασης χρηματοοικονομικών
	δεδομένων. 
	ii. Το μοντέλο BASE (Basically Available, Soft state, Eventual consistency)
	παρέχει ευέλικτες μεθόδους επεξεργασίας δεδομένων, οι οποίες ταιριάζουν σε
	τύπους βάσεων δεδομένων NoSQL. 

Οι τύποι μοντέλων αποθήκευσης περιλαμβάνουν τα εξής: 

	i. DAS (Αποθήκευση άμεσης πρόσβασης): Οι συσκευές αποθήκευσης είναι φυσικά
	ή άμεσα συνδεδεμένες με τον υπολογιστή που επεξεργάζεται τα δεδομένα.
	ii. NAS (Αποθήκευση δικτυακής πρόσβασης): Τα δεδομένα αποθηκεύονται σε ένα δίκτυο
	και η πρόσβαση σε αυτά γίνεται από πολλούς υπολογιστές ή εφαρμογές.
	iii. SAN (δίκτυο αποθήκευσης): Τα δεδομένα αποθηκεύονται σε πολλαπλούς
	διακομιστές και παρέχονται αποτελεσματικά στους χρήστες μέσω ενός
	δικτύου υπολογιστών.

### 6.3 Συστήματα Διαχείρισης Βάσεων Δεδομένων

Τα Συστήματα Διαχείρισης Βάσεων Δεδομένων (ΣΔΒΔ/DBMSs) είναι συστήματα λογισμικού που
παρέχουν τα απαραίτητα εργαλεία για τη βέλτιστη διατήρηση των δεδομένων, την
αποτελεσματική ανάκτηση των αποθηκευμένων πληροφοριών, την προστασία και την
ασφάλεια των αποθηκευμένων δεδομένων και τη διαχείριση της πρόσβασης για χρήστες
διαφορετικών επιπέδων εξουσίας. 

Τα τυπικά ΣΔΒΔ περιλαμβάνουν:

	* **Μια μηχανή βάσης δεδομένων:** Πρόκειται για τον πυρήνα ενός ΣΔΒΔ. Η μηχανή βάσης
	δεδομένων διαχειρίζεται την αποτελεσματική αποθήκευση και ανάκτηση δεδομένων. Οι
	χρήστες με προνόμια μπορούν να έχουν πρόσβαση στη μηχανή βάσης δεδομένων. 
	* **Ένα διαχειριστή βάσεων δεδομένων:** Αυτό το πρόγραμμα ή σύνολο προγραμμάτων
	εκτελεί όλες τις λειτουργίες του ΣΔΒΔ σε μια βάση δεδομένων (δημιουργία,
	εκκαθάριση, δημιουργία αντιγράφων ασφαλείας, ανάκτηση, συντήρηση, κλωνοποίηση
	και διαγραφή δεδομένων). Είναι επίσης υπεύθυνο για τη συντήρηση του DBMS
	με επιδιορθώσεις και ενημερώσεις. 
	* **Διαχειριστής βάσεων δεδομένων σε χρόνο εκτέλεσης (RDM):** Ο RDM ελέγχει
	την αυθεντικοποίηση και τα προνόμια των χρηστών πριν από την εκτέλεση
	οποιασδήποτε λειτουργίας, παρέχει πρόσβαση σε μια βάση δεδομένων με βάση
	το πλαίσιο, παρέχει ταυτόχρονη πρόσβαση στη βάση δεδομένων από πολλούς
	χρήστες και διασφαλίζει την ακεραιότητα των δεδομένων. 
	* **Γλώσσες βάσεων δεδομένων:** Αυτές βοηθούν στην αποθήκευση, ανάκτηση,
	τροποποίηση και ανάκτηση δεδομένων, στον έλεγχο της πρόσβασης των
	χρηστών (προνόμια), στον καθορισμό σχημάτων και προβολών και στην
	εκτέλεση διαφόρων λειτουργιών. Οι δημοφιλείς γλώσσες βάσεων δεδομένων
	περιλαμβάνουν τη Γλώσσα Ορισμού Δεδομένων (DDL), τη Γλώσσα Πρόσβασης
	στη Βάση Δεδομένων (DAL), τη Γλώσσα Χειρισμού Δεδομένων (DML) και τις
	Γλώσσες Ελέγχου Δεδομένων (DCL). 
	* **Επεξεργαστής ερωτημάτων:** Αυτό το βασικό και βασικό συστατικό του ΣΔΒΔ
	παρέχει μια αποτελεσματική, πλούσια και αγγλόφωνη διεπαφή για τους χρήστες
	ώστε να έχουν πρόσβαση στη βάση δεδομένων και να εκτελούν διάφορες λειτουργίες
	ή πράξεις. 
	* **Αναφορές:** Η υποβολή εκθέσεων εφαρμόζει καθορισμένα φίλτρα, εξάγει τα
	ζητούμενα δεδομένα και εγγραφές από έναν ή περισσότερους πίνακες της βάσης
	δεδομένων και παρουσιάζει τις πληροφορίες όπως ορίζεται. 

Διατίθενται διάφορα συστήματα διαχείρισης βάσεων δεδομένων ελεύθερου και ανοικτού κώδικα.

### 6.4 Συστήματα Διαχείρισης Σχεσιακών Βάσεων Δεδομένων και Κανονικοποίηση

Οι συμβατικές βάσεις δεδομένων που βασίζονται σε συστήματα αρχείων υπέφεραν μεταξύ
άλλων από πλεονασμό δεδομένων, ασυνέπεια δεδομένων, προκλήσεις πρόσβασης στα δεδομένα,
μη εξουσιοδοτημένη πρόσβαση, έλλειψη ταυτόχρονης πρόσβασης. 

Ένα σχεσιακό σύστημα διαχείρισης βάσεων δεδομένων (RDBMS) αποθηκεύει δεδομένα σε
πίνακες και, σε αντίθεση με ένα DBMS, οι πίνακες δεδομένων του σχετίζονται μεταξύ
τους, πολλαπλά στοιχεία δεδομένων μπορούν να προσπελαστούν ταυτόχρονα, διαχειρίζεται
μεγάλο όγκο δεδομένων, πολλοί χρήστες μπορούν να έχουν ταυτόχρονη πρόσβαση στα
δεδομένα, ο πλεονασμός δεδομένων μειώνεται σημαντικά και υποστηρίζονται πολλαπλά
επίπεδα ασφάλειας δεδομένων. 

Οι μηχανικοί πληροφορικής πρέπει να κατανοούν τη διαφορά μεταξύ των διαφόρων τύπων
RDBMS, όπως Objective RDBMS, Object Oriented RDBMS, να είναι εξοικειωμένοι με
παραδείγματα και να γνωρίζουν τις εφαρμογές στις οποίες ταιριάζουν καλύτερα. 

Η κανονικοποίηση βάσεων δεδομένων είναι η διαδικασία οργάνωσης των δεδομένων σε
μια βάση δεδομένων και η απομάκρυνση του πλεονασμού και της ασυνέπειας των δεδομένων
από τους πίνακες. Η κανονικοποίηση ενδέχεται να αυξήσει τον αριθμό των πινάκων και
να αυξήσει τον χρόνο υποβολής ερωτημάτων. Εάν συμβεί αυτό, τότε - ανάλογα με την
εφαρμογή και την απαίτηση - εφαρμόζεται η αποκανονικοποίηση, όπου προστίθεται
πλεονασμός δεδομένων για ταχύτερη πρόσβαση στα δεδομένα. 

Οι διάφοροι τύποι κανονικοποίησης βάσεων δεδομένων είναι οι ακόλουθοι: 

	i. Πρώτη κανονική μορφή (1 NF): Αφαιρεί την επανάληψη ή τον πλεονασμό. Κάθε
	κελί πίνακα έχει μία μόνο τιμή (δημιουργεί περισσότερες εγγραφές και πίνακες).
	Κάθε γραμμή έχει μοναδικές τιμές. Τα σχετικά δεδομένα αναγνωρίζονται με ένα
	μοναδικό κλειδί. 
	ii. Δεύτερη κανονική μορφή (2 NF): Ο πίνακας πρέπει να είναι σε 1 NF- δεν
	υπάρχει μερική εξάρτηση (δημιουργεί ξεχωριστούς πίνακες με εγγραφές που
	αναφέρονται από πολλαπλές εγγραφές ή πίνακες).
	iii. Τρίτη κανονική μορφή (3 NF): Ο πίνακας πρέπει να είναι σε 2 NF.
	Οι μεταβατικές εξαρτήσεις αφαιρούνται.
	iv. Κανονική μορφή Boyce-Codd (BCNF/3.5 NF): Ο πίνακας θα πρέπει να είναι
	σε 3 NF και το X θα πρέπει να είναι το υπερ-κλειδί για κάθε (X->Y).
	v. Τέταρτη κανονική μορφή (4 NF): Ο πίνακας θα πρέπει να είναι σε 3.5 NF
	και δεν θα πρέπει να έχει πολυτιμημένη εξάρτηση. 
	vi. Πέμπτη κανονική μορφή (5 NF): Ο πίνακας πρέπει να είναι σε 4 NF και
	δεν μπορεί να χωριστεί σε περισσότερους πίνακες χωρίς να χαθούν δεδομένα.
	vii. Έκτη κανονική μορφή ή Domain/Key Normal Form (6 NF/DKNF): Ο πίνακας
	πρέπει να είναι σε 5 NF και κάθε εξάρτηση σύνδεσης είναι τετριμμένη.

Οι περισσότερες βάσεις δεδομένων είναι συνήθως κανονικοποιημένες μέχρι 3 NF
ή BCNF. Ορίζεται μια εναλλακτική κανονική μορφή, η DKNF, όπου αποφεύγεται η
εισαγωγή και η διαγραφή ανωμαλιών (βλέπε [x-Fagin]).

Οι μηχανικοί βάσεων δεδομένων ενθαρρύνονται να κατανοήσουν τις μορφές
κανονικοποίησης με παραδείγματα και μελέτες περίπτωσης και να κατανοήσουν
τις προκλήσεις που θα αντιμετώπιζε κανείς αν η βάση δεδομένων δεν ήταν
κανονικοποιημένη. Αν και η κανονικοποίηση είναι απαραίτητη και παρέχει
διάφορα οφέλη, αυξάνει επίσης τον αριθμό των πινάκων και τον χρόνο επεξεργασίας.

### 6.5 Δομημένη Γλώσσα Ερωτημάτων

Η Structured Query Language (SQL) είναι μια τυποποιημένη και δημοφιλής γλώσσα
βάσεων δεδομένων για τη δημιουργία, ενημέρωση και διαγραφή βάσεων δεδομένων
και για την ανάκτηση πληροφοριών από βάσεις δεδομένων. Η SQL αποτελεί
αναπόφευκτο μέρος των περισσότερων συστημάτων διαχείρισης βάσεων δεδομένων. 

Η τυπική σύνταξη της SQL έχει διάφορες γλωσσικές κατασκευές ή στοιχεία,
συμπεριλαμβανομένων των ρητρών, των εκφράσεων, των κατηγορημάτων, των
ερωτημάτων και των δηλώσεων. 

Όλες οι λειτουργίες σε μια βάση δεδομένων, συμπεριλαμβανομένης της δημιουργίας,
ενημέρωσης, διαγραφής και προβολής πινάκων, της εκτέλεσης διαφόρων κανονικοποιήσεων,
της εκκαθάρισης δεδομένων και της αναζήτησης στη βάση δεδομένων με βάση διάφορους
συνδυασμούς παραμέτρων ή φίλτρων, μπορούν να εκτελεστούν με τη χρήση της SQL. 

Οι περισσότερες βάσεις δεδομένων υποστηρίζουν την SQL (εκτός από τις βάσεις
δεδομένων NoSQL), και η σύνταξη της SQL και η βιβλιοθήκη των λειτουργιών
που υποστηρίζονται διαφέρουν από πάροχο σε πάροχο βάσης δεδομένων (όπως
και οι γλώσσες προγραμματισμού - αν και οι διάφορες γλώσσες υποστηρίζουν
παρόμοια χαρακτηριστικά, η σύνταξη διαφέρει). 

Οι μηχανικοί βάσεων δεδομένων πρέπει επίσης να αποφασίσουν αν θα χρησιμοποιήσουν
στατική/ενσωματωμένη SQL, δυναμική SQL ή έναν συνδυασμό των δύο, αφού σταθμίσουν
τα πλεονεκτήματα και τα μειονεκτήματα κάθε επιλογής για τη συγκεκριμένη εφαρμογή.
Θα πρέπει επίσης να γνωρίζουν τις διαφορές μεταξύ απλών και σύνθετων προβολών και
να τις χρησιμοποιούν κατάλληλα. 

Η SQL είναι τυποποιημένη και υιοθετείται από το Αμερικανικό Ινστιτούτο Εθνικών
Προτύπων (ANSI) και το ISO. Τα πρότυπα αναθεωρούνται κατά καιρούς- το πρώτο
πρότυπο SQL ήταν το SQL86, που εκδόθηκε το 1986, και το πιο πρόσφατο είναι
το SQL:2019.

### 6.6 Εξόρυξη Δεδομένων και Αποθήκευση Δεδομένων

Οι βάσεις δεδομένων είναι σχεδιασμένες για να αποθηκεύουν συναλλαγές και
να τις ανακτούν αποτελεσματικά. 

Η αποθήκευση δεδομένων εξάγει αποτελεσματικά δεδομένα από πολλαπλές βάσεις
δεδομένων και τα αποθηκεύει σε μια κοινή βάση δεδομένων, ώστε να μπορεί να
πραγματοποιηθεί αποτελεσματικά εξόρυξη δεδομένων στα συγκεντρωμένα δεδομένα.
Οι αποθήκες δεδομένων είναι συνήθως τεράστιες, καθώς αποθηκεύουν ιστορικές
εγγραφές δεδομένων. 

Η εξόρυξη δεδομένων εξάγει τις ζητούμενες πληροφορίες από την αποθήκη δεδομένων,
εφαρμόζοντας διάφορα φίλτρα και συνθήκες. Η εξόρυξη δεδομένων εφαρμόζει αλγορίθμους
αναγνώρισης προτύπων σε τεράστια σύνολα δεδομένων για τη δημιουργία των απαιτούμενων
αναφορών. 

Οι διάφοροι τύποι αποθηκών δεδομένων περιλαμβάνουν την Αποθήκη Επιχειρησιακών
Δεδομένων (Enterprise Data Warehouse - EDW), την Αποθήκη Επιχειρησιακών Δεδομένων
(Operational Data Store - ODS) και το Data Mart (Data Mart - DM). 

Διατίθενται πολλά αποτελεσματικά εργαλεία για τη δημιουργία αποθηκών δεδομένων
και την εξόρυξη δεδομένων από αυτές.

Οι μηχανικοί βάσεων δεδομένων πρέπει να γνωρίζουν διάφορες τεχνικές εξόρυξης
δεδομένων, συμπεριλαμβανομένων των τεχνικών συσχέτισης, ομαδοποίησης, ταξινόμησης,
διαδοχικών προτύπων και πρόβλεψης, και να γνωρίζουν πώς να τις εφαρμόζουν για
διάφορες χρήσεις και κλάδους, όπως η υγειονομική περίθαλψη, η ανίχνευση απάτης,
η διαχείριση πελατειακών σχέσεων, τα οικονομικά και οι τράπεζες, η ανίχνευση
ανωμαλιών, η πρόβλεψη, τα νευρωνικά δίκτυα, η στατιστική και η οπτικοποίηση
δεδομένων. 

### 6.7 Δημιουργία Αντιγράφων Ασφαλείας και Ανάκτηση Βάσεων Δεδομένων 

Τα συστήματα βάσεων δεδομένων είναι επιρρεπή σε αστοχίες και τα δεδομένα
μπορεί να καταστραφούν. Είναι ζωτικής σημασίας να αποτρέψουμε τη διαφθορά
των δεδομένων και - αν συμβεί - να την αναγνωρίσουμε αμέσως και να ανακτήσουμε
τα δεδομένα.

Η ενημέρωση της βάσης δεδομένων για συναλλαγές πρέπει να πραγματοποιείται
προσεκτικά (με δεσμεύσεις σε συγκεκριμένα σημεία ελέγχου) και πρέπει να
ενσωματώνει τεχνικές όπως η αναίρεση, οι αναβαλλόμενες ενημερώσεις, οι
άμεσες ενημερώσεις, η προσωρινή αποθήκευση ή η προσωρινή αποθήκευση και
η σκιώδης σελιδοποίηση. 

Οι βάσεις δεδομένων πρέπει να δημιουργούνται περιοδικά αντίγραφα ασφαλείας
για να διασφαλίζεται η ασφάλεια των δεδομένων. Οι τεχνικές δημιουργίας
αντιγράφων ασφαλείας περιλαμβάνουν το πλήρες αντίγραφο ασφαλείας της βάσης
δεδομένων, το διαφορικό αντίγραφο ασφαλείας και το αντίγραφο ασφαλείας του
αρχείου καταγραφής συναλλαγών.

