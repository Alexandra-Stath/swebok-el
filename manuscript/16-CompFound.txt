# Υπολογιστικά Θεμέλια

## Ακρωνύμια

|ADT       |Abstract Data Type    				|
|AI        |Artificial Intelligence    				|
|ANSI      |American National Standards Institute    		|
|AVL Tree  |Adelson-Velskii and Landis Tree   			|
|BCNF      |Boyce-Codd Normal Form    				|
|BST       |Binary Search Tree    				|
|CASE      |Common Application Service Element  		|
|CDRAM     |Cache DRAM    					|
|CERT      |Computer Engineering Response Team   		|
|CISC      |Complex Instruction Set Computer    		|
|CRUD      |Create, Read, Update, Delete   			|
|CUDA      |Compute Unified Device Architecture    		|
|DAG       |Direct Acrylic Graph   				|
|DAL       |Database Access Language    			|
|DAS       |Direct Access Storage    				|
|DBCS      |Double Byte Character Set    			|
|DCL       |Data Control Language  				|
|DDL       |Data Definition Language   				|
|DDR SDRAM |Double data rate SDRAM    				|
|DKNF      |Domain/Key Normal Form    				|
|DMA       |Direct Memory Access   				|
|DML       |Data Manipulation Language    			|
|EDW       |Enterprise Data Warehouse   			|
|FCFS      |First come, First served    			|
|FIFO      |First In, First Out    				|
|FPU       |Floating Point Unit    				|		
|HCI       |Human-Computer Interface    			|
|HMPP      |Hybrid Multicore Parallel Programming		|
|HTTP      |Hyper Text Transfer Protocol			|
|IPC       |Inter-Process Communication				|
|ISA       |Instruction Set Architecture			|
|MIMD      |Multiple instruction, multiple data stream 		|
|MISD      |Multiple instruction, single data stream		|
|MISRA     |Motor Industry Software Reliability Association 	|
|ML        |Machine Learning					|
|NAS       |Network Access Storage				|
|OSI       |Open Systems Interconnection			|	
|PDU       |Protocol Data Unit 					|
|RDBMS     |Relational DBMS 					|	
|RDM       |Runtime Database Manager				|
|RDRAM     |Rambus DRAM 					|
|RISC      |Reduced Instruction Set Computer 			|
|RTOS      |Real Time Operating System 				|
|SAN       |Storage Area Network 				|
|SASE      |Specific Application Service Element 		|
|SDRAM     |Synchronous DRAM  					|
|SEI       |Software Engineering Institute  			|
|SIMD      |Single instruction, multiple data stream 		|
|SISD      |Single instruction, single data stream  		|
|SQL       |Structured Query Language 				|
|SRTF      |Shortest Remaining Time First 			|




## Εισαγωγή




Οι μηχανικοί λογισμικού πρέπει να κατανοήσουν και να εμπεδώσουν τις διαφορές
μεταξύ του ρόλου τους και του ρόλου ενός προγραμματιστή ηλεκτρονικών υπολογιστών.
Ένας τυπικός προγραμματιστής μετατρέπει έναν δεδομένο αλγόριθμο σε ένα σύνολο
εντολών υπολογιστή, μεταγλωττίζει τον κώδικα, δημιουργεί συνδέσεις με σχετικές
βιβλιοθήκες, δεσμεύει, φορτώνει το πρόγραμμα στο επιθυμητό σύστημα, εκτελεί το
πρόγραμμα και παράγει αποτελέσματα.

Από την άλλη πλευρά, ένας μηχανικός λογισμικού μελετά τις απαιτήσεις, την
αρχιτεκτονική και σχεδιάζει τα κύρια μέρη του συστήματος και αναγνωρίζει
τους βέλτιστους αλγορίθμους, τους μηχανισμούς επικοινωνίας, τα κριτήρια
απόδοσης, τα σχέδια ελέγχου και αποδοχής, τις μεθοδολογίες συντήρησης, τις
διεργασίες και τις μεθόδους μηχανικής που είναι κατάλληλες για τις εφαρμογές κ.ο.κ.

Ο βασικός σκοπός του οδηγού SWEBOK (Software Engineering Body of Knowledge) είναι
να αναγνωρίσει τις περιοχές γνώσεων που πρέπει να κατέχουν οι επαγγελματίες
μηχανικοί λογισμικού, σύμφωνα με τους ειδικούς του αντικειμένου που ασκούν το
επάγγελμα παγκοσμίως.

Οι μηχανικοί λογισμικού αναμένεται να έχουν βαθιά και ευρεία γνώση διαφόρων
εννοιών της επιστήμης των υπολογιστών και να είναι σε θέση να τις εφαρμόζουν.
Οι έννοιες αυτές συνθέτουν τα θεμέλια της πληροφορικής.




## Κατανομή των θεμάτων για τα Υπολογιστικά Θεμέλια




Η κατανομή των θεμάτων για την γνωστική περιοχή των Υπολογιστικών Θεμελίων παρουσιάζεται στο Σχήμα 16.1.

![Σχήμα 1](figure1-path)
**Σχήμα 1. Κατανομή των θεμάτων του γνωστικού πεδίου των υπολογιστικών θεμελίων**




## Βασικές έννοιες ενός Συστήματος ή μίας Λύσης




Το πρόβλημα που πρέπει να επιλυθεί θα πρέπει να αναλυθεί σε μεγαλύτερη λεπτομέρεια
σε σχέση με τις λειτουργικές απαιτήσεις, τις αλληλεπιδράσεις με τον χρήστη, τις
απαιτήσεις επιδόσεων, τις διεπαφές επικοινωνίας, την ασφάλεια, την ευπάθεια,
την ανθεκτικότητα και τη δυνατότητα αναβάθμισης. Ένα σύστημα είναι ένα ολοκληρωμένο
σύνολο υποσυστημάτων, ενοτήτων και συνιστωσών που εκτελούν συγκεκριμένες λειτουργίες
ανεξάρτητα. Η οριοθέτηση του προβλήματος και της λύσης είναι ζωτικής σημασίας.

Ένα κατασκευασμένο σύστημα εγγυάται ότι τα υποσυστήματα έχουν σχεδιαστεί έτσι
ώστε να είναι:

	* Αρθρωτά: Κάθε υποσύστημα (ενότητα) είναι ομοειδές (παρόμοιου μεγέθους).
	* Συνεκτικά: Κάθε υποσύστημα εκτελεί ένα συγκεκριμένο έργο. Ιδανικά, τα
	συστήματα πρέπει να είναι ισχυρά συνεκτικά μεταξύ τους.
	* Συζευγμένα: Κάθε υποσύστημα λειτουργεί ανεξάρτητα, όσο το δυνατόν
	περισσότερο. Ιδανικά, τα συστήματα θα πρέπει να είναι το δυνατόν
	χαλαρά συνδεδεμένα.

Τα υποσυστήματα μπορούν να τμηματοποιηθούν περαιτέρω σε ενότητες και υπο-ενότητες
που παρουσιάζουν επίσης τα παραπάνω χαρακτηριστικά.

Το σύστημα μπορεί να περιλαμβάνει υποσυστήματα τόσο λογισμικού όσο και υλικού.
Το υλικό πρέπει να είναι σχεδιασμένο ώστε να υποστηρίζει τα υποσυστήματα λογισμικού
και να ικανοποιεί όλες τις απαιτήσεις του χρήστη, ιδίως τις διεπαφές χρήστη
(είσοδος/έξοδος (I/O)) και τις επιδόσεις.

Η παρούσα ενότητα επικεντρώνεται στη σχεδίαση και την κατασκευή υποσυστημάτων
τεχνολογίας λογισμικού.

Οι εφαρμογές μπορεί να απαιτούν συστήματα που είναι χειροκίνητα ή πλήρως
ή ημιαυτόματα, πραγματικού χρόνου, σε απευθείας σύνδεση ή εκτός σύνδεσης,
διαμοιρασμένα ή σε μία τοποθεσία, κ.ο.κ.

Οι αρχιτέκτονες των υποσυστημάτων λογισμικού πρέπει να εξετάσουν μεταξύ
άλλων την κατάλληλη τεχνολογία, τα εργαλεία, τη δομή δεδομένων, το
λειτουργικό σύστημα, τη βάση δεδομένων (εάν απαιτείται), τις διεπαφές
χρήστη, τις γλώσσες προγραμματισμού και τους αλγορίθμους για τη βέλτιστη
επεξεργασία των λύσεων μεταξύ άλλων.

Οι απαιτήσεις λογισμικού, η αρχιτεκτονική, ο σχεδιασμός, η ανάπτυξη,
ο έλεγχος, οι μέθοδοι και τα μοντέλα, η διασφάλιση ποιότητας και η
ασφάλεια εξετάζονται λεπτομερώς σε άλλα κεφάλαια ως ανεξάρτητες περιοχές
γνώσης.

Το γνωστικό πεδίο των υπολογιστικών θεμελίων επικεντρώνεται στην επεξήγηση
των βασικών εννοιών της επιστήμης των υπολογιστών που πρέπει να γνωρίζει
καλά ένας μηχανικός λογισμικού για να στήνει την αρχιτεκτονική, να σχεδιάζει,
να αναπτύσσει, να μεταφέρει και να συντηρεί χρήσιμα υποσυστήματα λογισμικού
υψηλής ποιότητας.




## Αρχιτεκτονική και Οργάνωση υπολογιστών




Η αρχιτεκτονική υπολογιστών αναφέρεται στα συστατικά στοιχεία ενός συστήματος
υπολογιστών που έχουν σχεδιαστεί για συγκεκριμένους σκοπούς. Η οργάνωση του
υπολογιστή εξηγεί πώς οι μονάδες εντός του συστήματος συνδέονται και
αλληλεπιδρούν για την επίτευξη αυτών των σκοπών.

Οι αρχιτέκτονες συστημάτων πρέπει να αναλύσουν την εφαρμογή για την οποία
πρόκειται να σχεδιαστεί ή να αναπτυχθεί το σύστημα υπολογιστών, να αναγνωρίσουν
τα κρίσιμα στοιχεία, συμπεριλαμβανομένων των απαιτούμενων συσκευών εισόδου/εξόδου
(μαζί με τη διαπερατότητα), τους τύπους και την ποσότητα μνήμης, την επεξεργαστική
ισχύ και τους απαιτούμενους συνεπεξεργαστές, όπως επίσης και να επιλέξουν ή να
σχεδιάσουν την κατάλληλη αρχιτεκτονική και οργάνωση υπολογιστών. Όλες οι ενδεχόμενες
και μη περιπτώσεις θα πρέπει να προβλεφθούν για τους απαιτούμενους πόρους.

Αυτή η περιοχή περιεχομένου συζητά διάφορες αρχιτεκτονικές και οργανώσεις υπολογιστών 
που θα πρέπει να γνωρίζει ένας αρχιτέκτονας συστημάτων ή λογισμικού.



### Αρχιτεκτονική υπολογιστών



Η αρχιτεκτονική περιγράφει τι κάνει ο υπολογιστής ή το σύστημα και τα συστατικά του,
όπως η μνήμη, οι συσκευές αποθήκευσης δεδομένων, τα γραφικά και η υπολογιστική ισχύς
του υπολογιστή ή του επεξεργαστή. Ένα υπολογιστικό σύστημα διαθέτει συνήθως μνήμη,
συσκευές εισόδου/εξόδου και μια κεντρική μονάδα επεξεργασίας (CPU).

Αυτά τα εξαρτήματα συνδέονται μέσω φυσικών γραμμών σήματος που ονομάζονται δίαυλος.
Συνήθως, χρησιμοποιούνται τρεις τύποι διαύλων για συγκεκριμένους σκοπούς:

	* Δίαυλος Διεύθυνσης, ο οποίος απευθύνεται ή προσπελαύνει μια συγκεκριμένη
	θέση μνήμης ή συσκευή εισόδου/εξόδου.
	* Δίαυλος Δεδομένων, ο οποίος αποθηκεύει (γράφει) ή ανακτά (διαβάζει) δεδομένα
	προς και από τη θέση μνήμης.
	* Δίαυλος ελέγχου, ο οποίος παρέχει σήματα ελέγχου από την ΚΜΕ σε συσκευές
	εισόδου/εξόδου (ανάγνωση ή εγγραφή, ενεργοποίηση ή απενεργοποίηση, διακοπή,
	κατάσταση, επαναφορά κ.λπ.).

Οι μηχανικοί λογισμικού αναμένεται να γνωρίζουν τις λεπτομέρειες της λειτουργίας και
του χρονισμού των διαφόρων τύπων διαύλων, διαύλων πρώτης, δεύτερης και τρίτης γενιάς,
εσωτερικών και εξωτερικών διαύλων, σειριακών και παράλληλων διαύλων, διαύλων simplex,
full-duplex και halfduplex- Mil-Std-1553Bbus, Wishbone buses, κ.λπ.



### Τύποι αρχιτεκτονικών υπολογιστών



#### Αρχιτεκτονική Von Neumann


Ο John von Neumann σχεδίασε μια αρχιτεκτονική συστήματος υπολογιστών με πέντε βασικά
συστατικά στοιχεία, όπως φαίνεται στο Σχήμα 16.2:

	* Αριθμητική λογική μονάδα (ALU) που εκτελεί αριθμητικούς και λογικούς
	υπολογισμούς. 
	* Μνήμη όπου φορτώνεται και εκτελείται το πρόγραμμα και τα δεδομένα
	(πρόγραμμα και δεδομένα βρίσκονται στον ίδιο χώρο μνήμης). 
	* Συσκευές εισόδου (π.χ. πληκτρολόγιο, ποντίκι, σειριακή θύρα, σκληρός
	δίσκος) που επιτρέπουν στο χρήστη να παρέχει εισόδους και εντολές ελέγχου. 
	* Συσκευές εξόδου (π.χ. οθόνη, εκτυπωτής) που μεταδίδουν ή κοινοποιούν
	τα υπολογισμένα αποτελέσματα. 
	* Η μονάδα ελέγχου συγχρονίζει όλες τις συσκευές, τη μνήμη και την ALU.


![Σχήμα 2](figure1-path)
**Σχήμα 2. Αρχιτεκτονική υπολογιστή**


#### Αρχιτεκτονική Χάρβαρντ


Η αρχιτεκτονική Harvard παρέχει ξεχωριστά μπλοκ μνήμης για τον κώδικα
(πρόγραμμα ή εντολές) και δεδομένα. Καθώς τα μπλοκ μνήμης κώδικα και
δεδομένων είναι διαφορετικά, τα περιεχόμενα της διεύθυνσης 0000 στο
μπλοκ κώδικα και τα περιεχόμενα της διεύθυνσης 0000 στο μπλοκ δεδομένων
είναι διαφορετικά. Η CPU διαβάζει εντολές από τις διευθύνσεις κώδικα και
διαβάζει δεδομένα από τις διευθύνσεις δεδομένων.

Ο σχεδιασμός και η υλοποίηση του συστήματος στην αρχική αρχιτεκτονική
Harvard ήταν σχετικά πολύπλοκος. Η τροποποιηµένη αρχιτεκτονική Harvard
παρέχει ένα µπλοκ µνήµης αλλά το χωρίζει σε τµήµατα κώδικα και δεδοµένων.
Τα τμήματα μνήμης δεδομένων έχουν δυνατότητα ανάγνωσης/εγγραφής, ενώ τα
τμήματα μνήμης κώδικα είναι μόνο για ανάγνωση (έτσι προστατεύεται ο κώδικας
από αλλοιώσεις κατά την εκτέλεση). Οι λειτουργίες εισόδου/εξόδου μπορούν
να εκτελούνται ταυτόχρονα.


#### Αρχιτεκτονική συνόλου εντολών


Μια αρχιτεκτονική συνόλου εντολών (ISA) είναι ένα αφηρημένο μοντέλο του τρόπου
με τον οποίο μια CPU εκτελεί τα σύνολα εντολών που ορίζονται για το σύστημα.
Μια ISA ορίζει καταχωρητές (διεύθυνση, δεδομένα, σημαίες), τύπους δεδομένων,
εντολές που αφορούν ειδικά τον υπολογιστή ή το σύστημα, συστήματα διευθυνσιοδότησης
μνήμης (εσωτερικής και εξωτερικής) και μοντέλα χειρισμού εισόδου/εξόδου.

Η αρχιτεκτονική RISC (Reduced Instruction Set Computer) και η αρχιτεκτονική CISC
(Complex Instruction Set Computer) είναι οι δύο κύριοι τύποι ISA.

Στον RISC, οι εντολές εκτελούν μεμονωμένες εργασίες, όπως ανάγνωση από τη μνήμη ή
την είσοδο/έξοδο, εκτέλεση αριθμητικών ή λογικών υπολογισμών και αποθήκευση δεδομένων
στη μνήμη ή την είσοδο/έξοδο. Το υπολογιστικό σύστημα είναι απλό αλλά απαιτεί περισσότερες
εντολές για την εκτέλεση μιας εργασίας. Απαιτεί λιγότερους κύκλους ρολογιού ανά εντολή και
τα μεγέθη των εντολών τείνουν να είναι σταθερά. Καθώς το σύνολο εντολών είναι
μικρό (λιγότερες εντολές), είναι ευκολότερο να κατασκευαστεί ένας μεταγλωττιστής και
το πρόγραμμα μπορεί να είναι σχετικά μεγάλο. Οι αρχιτεκτονικές RISC σχεδιάζονται συνήθως
για επεξεργαστές γενικής χρήσης.

Οι εντολές είναι σχετικά πιο ισχυρές στο CISC και μπορούν να εκτελέσουν πολλαπλές εργασίες,
όπως ανάγνωση δεδομένων από τη μνήμη + εκτέλεση αριθμητικής πράξης + αποθήκευση του
αποτελέσματος στη μνήμη. Εδώ, απαιτούνται λιγότερες εντολές για την εκτέλεση μιας εργασίας,
αλλά οι εντολές χρειάζονται περισσότερους κύκλους ρολογιού για να ολοκληρωθούν.
Τα μεγέθη των εντολών ποικίλλουν σε μεγάλο βαθμό ανάλογα με τις λειτουργίες με
καταχωρητές, μνήμη και I/O. Τα προγράμματα είναι σχετικά μικρά. Οι CISC σχεδιάζονται
συνήθως για συγκεκριμένους σκοπούς, όπως η ψηφιακή επεξεργασία σήματος (DSP)
και τα γραφικά.


#### Αρχιτεκτονική ή ταξινομία του Flynn


Οι υπολογιστικές αρχιτεκτονικές που περιγράφηκαν παραπάνω εξετάζουν έναν
υπολογιστή κάθε φορά. Ο Michael J. Flynn πρότεινε παράλληλες αρχιτεκτονικές
υπολογιστών, όπου στο σύστημα χρησιμοποιούνται πολλαπλές ροές εντολών και
πολλαπλές ροές δεδομένων. Οι μηχανικοί λογισμικού πρέπει να γνωρίζουν τους
διάφορους τύπους της αρχιτεκτονικής του Flynn, με παραδείγματα,
συμπεριλαμβανομένων των ακόλουθων: 

	* Αρχιτεκτονική μίας εντολής, μίας ροής δεδομένων (SISD) 
	* Αρχιτεκτονική μίας εντολής, πολλαπλών ροών δεδομένων (SIMD) 
	* Αρχιτεκτονική πολλαπλών εντολών, μονής ροής δεδομένων (MISD) 
	* Αρχιτεκτονική πολλαπλών εντολών, πολλαπλών ροών δεδομένων (MIMD) 

Οι παραλλαγές αυτών των αρχιτεκτονικών περιλαμβάνουν την επεξεργασία συστοιχιών,
την παράλληλη επεξεργασία και τη συνδεδεμένη επεξεργασία - την επεξεργασία ενιαίου
προγράμματος πολλαπλών ροών δεδομένων και πολλαπλών προγραμμάτων πολλαπλών ροών
δεδομένων. Οι μηχανικοί λογισμικού αναμένεται να γνωρίζουν τις διαφορές μεταξύ
αυτών των αρχιτεκτονικών, μαζί με μελέτες περιπτώσεων, ώστε να μπορούν να επιλέξουν
την κατάλληλη αρχιτεκτονική για την επίλυση του εκάστοτε προβλήματος.


#### Αρχιτεκτονική συστήματος


Η αρχιτεκτονική συστήματος είναι ο συνολικός σχεδιασμός του συστήματος,
λαμβάνοντας υπόψη την αρχιτεκτονική υλικού, την αρχιτεκτονική λογισμικού,
τις ενότητες, τις διεπαφές, τη διαχείριση δεδομένων και την επικοινωνία
μεταξύ των ενοτήτων. Ο κατανεμημένος υπολογισμός έχει γίνει προσιτός με
την ανάπτυξη αποδοτικών, υψηλής απόδοσης εξυπηρετητών, αποθηκευτικών μέσων,
συσκευών δικτύου, λογισμικού και εργαλείων. Για κάθε δεδομένη εφαρμογή
διατίθενται διάφορα σχέδια ή αρχιτεκτονικές αναφοράς. 

Οι τυπικές αρχιτεκτονικές συστημάτων περιλαμβάνουν τα εξής: 

	* Ολοκληρωμένη αρχιτεκτονική συστήματος: Υπολογισμός, I/O, δεδομένα και
	δικτύωση είναι στενά συνδεδεμένα και διαθέσιμα σε ένα κουτί. Αυτή η
	αρχιτεκτονική χρησιμοποιείται συνήθως σε λύσεις που έχουν σχεδιαστεί
	για συγκεκριμένες εφαρμογές. 
	* Αρχιτεκτονική κατανεμημένου συστήματος: Ο υπολογισμός και η αποθήκευση
	βρίσκονται σε ξεχωριστά αλλά δικτυωμένα κουτιά. Αυτή η αρχιτεκτονική
	υποστηρίζει την κλιμάκωση, παρέχει κεντρική ή απομονωμένη αποθήκευση
	δεδομένων και μοιράζεται το υπολογιστικό φορτίο. 
	* Αρχιτεκτονική συγκεντρωτικού συστήματος: Διάφοροι υπολογιστικοί,
	αποθηκευτικοί και δικτυακοί πόροι είναι διαθέσιμοι σε δεξαμενές και
	παρέχονται ανάλογα με τη ζήτηση. Αυτή η αρχιτεκτονική παρέχει
	αποτελεσματική χρήση των κοινών πόρων. 
	* Αρχιτεκτονική συγκλίνοντος συστήματος: Όπως υποδηλώνει το όνομα,
	πρόκειται για τη σύγκλιση των κατανεμημένων και των συγκεντρωτικών
	αρχιτεκτονικών. Αυτή η αρχιτεκτονική υποστηρίζει την ευελιξία και
	την επεκτασιμότητα.

Οι μηχανικοί λογισμικού αναμένεται επίσης να γνωρίζουν και να είναι σε θέση
να εφαρμόζουν διάφορες άλλες αρχιτεκτονικές, συμπεριλαμβανομένης της
αρχιτεκτονικής .NET Framework, της αρχιτεκτονικής Unix και της αρχιτεκτονικής
εικονικών μηχανών.



### Μικρο-αρχιτεκτονική ή Οργάνωση υπολογιστών



Η μικρο-αρχιτεκτονική ή η οργάνωση του υπολογιστή εξηγεί πώς υλοποιείται η ISA
ενός υπολογιστή και πώς λειτουργούν και αλληλεπιδρούν μεταξύ τους τα διάφορα
στοιχεία του συστήματος για να παράγουν το επιθυμητό αποτέλεσμα. 

Οι αρχιτέκτονες και οι μηχανικοί συστημάτων πρέπει να γνωρίζουν τα διάφορα
στοιχεία που χρησιμοποιούνται στο σύστημα μαζί με τον τρόπο λειτουργίας τους.
Ορισμένα από αυτά τα στοιχεία εξετάζονται παρακάτω.


#### Αριθμητική λογική μονάδα


Η ALU εκτελεί όλους τους αριθμητικούς υπολογισμούς και τις λογικές πράξεις.
Η CPU διαθέτει συνήθως μια ALU, έναν επεξεργαστή, μια μνήμη και μια μονάδα
ελέγχου. Οι ΚΜΕ υψηλής τεχνολογίας μπορεί επίσης να διαθέτουν και άλλες
μονάδες επεξεργασίας ειδικών λειτουργιών, όπως μια μονάδα κινητής υποδιαστολής
(FPU), για την εκτέλεση υπολογισμών που αφορούν κινητές μονάδες ή πραγματικούς
αριθμούς (κλάσματα). Οι ALU διαθέτουν καταχωρητές που είναι μνήμη υψηλής ταχύτητας
και εσωτερικοί στην ALU. Η ALU εκτελεί τα σύνολα εντολών του επεξεργαστή. Όλες
οι πράξεις εκτελούνται συνήθως στους καταχωρητές.

Μπορούν να εφαρμοστούν διάφορα συστήματα για τη βελτίωση της απόδοσης της ALU,
συμπεριλαμβανομένης της επεξεργασίας μέσω αγωγού και της παράλληλης επεξεργασίας.
Οι πιο πρόσφατες CPU παρέχουν πολλαπλούς πυρήνες και πολλαπλά νήματα που βοηθούν
στην επίτευξη μέγιστης απόδοσης. Οι μηχανικοί λογισμικού αναμένεται να γνωρίζουν
τις διαφορές μεταξύ των πολλαπλών πυρήνων και των πολλαπλών νημάτων, μαζί με
συγκεκριμένες περιπτώσεις που απεικονίζουν την καλύτερη χρήση τους.

Οι συνεπεξεργαστές ειδικού σκοπού και οι συνεργαζόμενοι επεξεργαστές χρησιμοποιούνται
με τους κύριους επεξεργαστές για την υποστήριξη ταχύτερης επεξεργασίας.


#### Μονάδα μνήμης

Οι μονάδες μνήμης χρησιμοποιούνται για την αποθήκευση δεδομένων ή πληροφοριών,
στις οποίες έχει πρόσβαση η ΚΜΕ. Η συνολική ποσότητα μνήμης που μπορεί να
διαθέτει ένας υπολογιστής προκύπτει από τον μέγιστο αριθμό γραμμών διευθύνσεων
που υποστηρίζει η ΚΜΕ. Οι διάφοροι τύποι μνήμης που χρησιμοποιούνται στο σύστημα
περιλαμβάνουν τη μνήμη μόνο για ανάγνωση (ROM) και τη μνήμη εγγραφής ή μνήμη
τυχαίας προσπέλασης (RAM). Η ROM είναι επίσης RAM. 

Οι μηχανικοί λογισμικού που εργάζονται σε εφαρμογές με κρίσιμες επιδόσεις
αναμένεται να γνωρίζουν τις διαφορές μεταξύ των διαφόρων τύπων μνήμης,
συμπεριλαμβανομένης της στατικής RAM (SRAM), της δυναμικής RAM (DRAM), της
ασύγχρονης DRAM (ADRAM), της σύγχρονης DRAM (SDRAM), της SDRAM διπλού
ρυθμού δεδομένων (DDR SDRAM), της rambus DRAM (RDRAM) και της cache DRAM (CDRAM),
μαζί με τα πλεονεκτήματα, τα μειονεκτήματα και τις περιπτώσεις χρήσης του καθενός.


#### Συσκευές εισόδου/εξόδου


Όπως υποδηλώνουν τα ονόματα, οι συσκευές εισόδου είναι εκείνες που παρέχουν
εισροές στο σύστημα υπολογιστών και οι συσκευές εξόδου είναι εκείνες που παραδίδουν
τις εκροές των συστημάτων υπολογιστών στον χρήστη. Ενώ ορισμένες συσκευές είναι μόνο
εισόδου (πληκτρολόγιο, ποντίκι, μικρόφωνο, κ.λπ.) ή μόνο εξόδου (εκτυπωτής, οθόνη,
ηχεία, κ.λπ.), μερικές συσκευές χρησιμεύουν και ως συσκευές εισόδου και ως συσκευές
εξόδου (π.χ. οθόνες αφής, σκληροί δίσκοι, μονάδες USB). 

Οι μηχανικοί λογισμικού αναμένεται να κατανοήσουν τη διασύνδεση των συσκευών
εισόδου/εξόδου με το σύστημα, αν πρόκειται για συσκευές εισόδου/εξόδου με
χαρτογράφηση μνήμης ή με χαρτογράφηση εισόδου/εξόδου, καθώς και τους οδηγούς
συσκευών που απαιτούνται για την αλληλεπίδραση των χρηστών ή των εφαρμογών
με τις συσκευές μέσω του λειτουργικού συστήματος.



#### Μονάδα ελέγχου


Η μονάδα ελέγχου συγχρονίζει πολλαπλά στοιχεία στο σύστημα υπολογιστή. Συνήθως,
οι μονάδες ελέγχου αποτελούν μέρος της CPU. Ερμηνεύουν τις εντολές και συντονίζουν
την κίνηση δεδομένων μεταξύ διαφορετικών στοιχείων (μνήμη, συσκευές εισόδου/εξόδου
και ALU). Οι μονάδες ελέγχου χρησιμοποιούνται επίσης για την ενεργοποίηση ή
απενεργοποίηση στοιχείων ή συσκευών και την επαναφορά συσκευών. 

Οι μηχανικοί λογισμικού αναμένεται να γνωρίζουν τους διαφορετικούς τύπους μονάδων
ελέγχου, συμπεριλαμβανομένων των μονάδων ελέγχου υλικού και των μικροπρογραμματιζόμενων
μονάδων ελέγχου (αποθήκες ελέγχου ενός επιπέδου και δύο επιπέδων), καθώς και τα
πλεονεκτήματα και τις προκλήσεις του καθενός.




## Δομές δεδομένων και Aλγόριθμοι




Οι δομές δεδομένων είναι θεμελιώδους σημασίας για την επιστήμη των υπολογιστών
και τη μηχανική λογισμικού. Κάθε πρόγραμμα χρησιμοποιεί δεδομένα - λαμβάνει
δεδομένα εισόδου (δεδομένα), εκτελεί συγκεκριμένες λειτουργίες στα δεδομένα
και παράγει έξοδο. Οι δομές δεδομένων αφορούν την αποτελεσματική αναπαράσταση
διαφόρων τύπων δεδομένων, την αποτελεσματική εκτέλεση διαφόρων λειτουργιών στα
δεδομένα και την αποτελεσματική αποθήκευση και ανάκτηση δεδομένων. Οι μηχανικοί
λογισμικού πρέπει να εμπεδώσουν τις δομές δεδομένων, την επιλογή δομών δεδομένων
και τις λειτουργίες σε αυτές ειδικά για τις εφαρμογές.

Σε αυτό το κεφάλαιο, συζητούνται διάφοροι τύποι δομών δεδομένων και διάφορες
λειτουργίες σε αυτές. 



### Τύποι δομών δεδομένων



Ο τύπος δεδομένων είναι ένα χαρακτηριστικό των δεδομένων. Οι διάφοροι τύποι
δεδομένων προσδιορίζονται και ορίζονται με βάση τα διάφορα χαρακτηριστικά των
δεδομένων, την ανάγκη ομαδοποίησης στοιχείων δεδομένων και τις διάφορες
λειτουργίες που εκτελούνται στα δεδομένα. Οι δομές δεδομένων ομαδοποιούνται
κυρίως με βάση τη φυσική και λογική διάταξη των στοιχείων δεδομένων.

Κατά κύριο λόγο, τα δεδομένα ομαδοποιούνται σε τρεις τύπους: βασικά, σύνθετα
ή πολύπλοκα και αφηρημένα.

Οι βασικοί ή πρωτόγονοι τύποι δεδομένων περιλαμβάνουν τους χαρακτήρες, τους
ακέραιους αριθμούς, τους κινητούς ή πραγματικούς αριθμούς, τα λογικά δεδομένα
Boolean και τους δείκτες.

Οι σύνθετοι τύποι δεδομένων αποτελούνται από πολλαπλούς βασικούς ή πρωτόγονους
ή ακόμη και από πολλαπλούς σύνθετους τύπους δεδομένων. Ορισμένοι από τους σύνθετους
τύπους δεδομένων περιλαμβάνουν σύνολα, γραφήματα, εγγραφές και κατατμήσεις.

Ένας αφηρημένος τύπος δεδομένων (ADT) ορίζεται από τη συμπεριφορά του (σημασιολογία)
από την οπτική γωνία του χρήστη, συγκεκριμένα από την άποψη των πιθανών τιμών και
πράξεων.

Οι σύνθετοι ή σύνθετοι τύποι δεδομένων ομαδοποιούνται περαιτέρω σε γραμμικούς και
ιεραρχικούς ή μη γραμμικούς τύπους δεδομένων. 

Οι γραμμικοί τύποι δεδομένων περιλαμβάνουν μονοδιάστατους και πολυδιάστατους πίνακες,
συμβολοσειρές, συνδεδεμένες λίστες (μονόπλευρα συνδεδεμένες λίστες, διπλά συνδεδεμένες
λίστες, κυκλικές λίστες), στοίβες, ουρές και πίνακες κατακερματισμού. 

Οι ιεραρχικοί ή μη γραμμικοί τύποι δεδομένων περιλαμβάνουν δέντρα, δυαδικά δέντρα,
δέντρα n-συστοιχιών, δέντρα B, δέντρα B+, σταθμισμένα ισορροπημένα δέντρα, δέντρα
κόκκινου-μαύρου, γραφήματα, σωρούς, δυαδικούς σωρούς και γραφήματα. 

Στη σημερινή εποχή των ερωτημάτων ελεύθερου κειμένου ή της επεξεργασίας φυσικής γλώσσας,
οι μηχανικοί λογισμικού μπορεί να χρειαστεί να κατανοήσουν τις συμβολοσειρές και τις
διάφορες πράξεις σε συμβολοσειρές και να είναι σε θέση να αναλύουν λίστες παραλείψεων. 

Οι μηχανικοί λογισμικού πρέπει να κατανοούν τις αποχρώσεις των διαφόρων τύπων δεδομένων
και των μεγεθών τους στη μνήμη (μικρός ακέραιος, ακέραιος, μακρύς ακέραιος, μακρύς
μακρύς ακέραιος, προσημασμένος και μη προσημασμένος ακέραιος, float, double,
long double, double byte character set (DBCS), Boolean κ.λπ.), καθώς και τον
τρόπο με τον οποίο οι διάφοροι τύποι δεδομένων αναπαρίστανται και αποθηκεύονται
στη μνήμη και πώς εκτελούνται διάφορες πράξεις σε αυτούς. Τα σύνολα, οι γραφικές
παραστάσεις και τα δέντρα εξετάζονται λεπτομερέστερα στο γνωστικό κλάδο
Μαθηματικά Θεμέλια.



### Πράξεις σε δομές δεδομένων 



Οι βασικές λειτουργίες που εκτελούνται στις δομές δεδομένων περιλαμβάνουν τη
δημιουργία, την ανάγνωση, την ενημέρωση και τη διαγραφή (CRUD). Οι σύνθετοι
τύποι δεδομένων απαιτούν επίσης διάφορους τρόπους διάσχισης συνόλων δεδομένων
για τον εντοπισμό συγκεκριμένων στοιχείων δεδομένων πριν από την εκτέλεση της
λειτουργίας. 

Είναι σημαντικό να διασφαλιστεί ότι οποιαδήποτε εισαγωγή ή διαγραφή στοιχείων
σε ένα σύνολο δεδομένων ή σε μια βάση δεδομένων δεν μεταβάλλει το σύνολο
δεδομένων ή τη βάση δεδομένων με τρόπο που παραβιάζει οποιαδήποτε πολιτική
βάσει της οποίας σχεδιάστηκε και κατασκευάστηκε η βάση δεδομένων. 

Πρόσθετες λειτουργίες που εκτελούνται στις δομές δεδομένων περιλαμβάνουν την
ταξινόμηση των στοιχείων δεδομένων σε μια συγκεκριμένη σειρά, την αναζήτηση
και τον εντοπισμό ενός στοιχείου δεδομένων και τη συγχώνευση δύο ή περισσότερων
συνόλων δεδομένων σε ένα σύνολο χωρίς να διαταράσσεται η πολιτική βάσει της
οποίας έχει κατασκευαστεί το σύνολο δεδομένων. Οι αλγόριθμοι αναζήτησης και
ταξινόμησης εξετάζονται στην επόμενη ενότητα. 

Δημιουργούνται διάφορες δομές δεδομένων για να ανταποκρίνονται σε συγκεκριμένες
εφαρμογές, όπως στοίβες, ουρές, δέντρα και γραφήματα. Οι μηχανικοί λογισμικού
ενθαρρύνονται να μάθουν τις διελεύσεις μέσω μη γραμμικών δομών δεδομένων,
οι οποίες περιλαμβάνουν διαφορετικούς αναλυτές δέντρων (διελεύσεις δέντρων
προ-διάταξης, εντός-διάταξης και μετά-διάταξης), λειτουργίες CRUD σε δέντρα,
εξισορρόπηση δέντρων, δυαδικά δέντρα αναζήτησης (BST), δέντρα AVL και δέντρα
κόκκινου-μαύρου, και να μάθουν αλγορίθμους αναζήτησης δέντρων (πρώτα βάθος,
πρώτα πλάτος, συντομότερες διαδρομές κ.λπ.). Μερικά από αυτά συζητούνται
στο γνωστικό κλάδο Μαθηματικά Θεμέλια.



### Αλγόριθμοι και χαρακτηριστικά των αλγορίθμων



Όλα τα λογισμικά υλοποιούν λογική για την εκτέλεση της απαιτούμενης λειτουργίας.
Αυτή η λογική ή ο αλγόριθμος για την εκτέλεση μιας συγκεκριμένης εργασίας πρέπει
να σχεδιάζεται ή να επιλέγεται με γνώμονα την απόδοση του συστήματος, την ασφάλεια,
τη φορητότητα, τη συντηρησιμότητα, την επεκτασιμότητα και την απλότητα, μεταξύ άλλων. 

Η πολυπλοκότητα ενός αλγορίθμου προσδιορίζεται με τη μέτρηση των υπολογιστικών
πόρων (υπολογιστική ισχύς και χώρος) που καταναλώνει ο εν λόγω αλγόριθμος για
ένα δεδομένο σύνολο δεδομένων. 

Η βαθιά κατανόηση των δομών δεδομένων είναι ζωτικής σημασίας για την ανάλυση και
το σχεδιασμό καλών αλγορίθμων. Ανατρέξτε στην περιοχή περιεχομένου "Δομές δεδομένων
και οργάνωση" για περισσότερες λεπτομέρειες. 

Τα χαρακτηριστικά των αλγορίθμων είναι πολλά και περιλαμβάνουν τη λειτουργικότητα,
την ορθότητα, την ευρωστία, την αρθρωτότητα, τη συντηρησιμότητα, τη φιλικότητα προς
τον προγραμματιστή (ευκολία ενσωμάτωσης στο έργο και ευκολία χρήσης), τη φιλικότητα
προς τον χρήστη (δηλαδή πόσο εύκολα γίνεται κατανοητός από τους ανθρώπους), την
ανάγκη για χρόνο του προγραμματιστή, την απλότητα και την επεκτασιμότητα. 

Ένα συνήθως τονισμένο χαρακτηριστικό των αλγορίθμων είναι η "απόδοση" ή η
"αποδοτικότητα". 

Οι παράμετροι που έχουν σημασία για την κατανάλωση πόρων ενός αλγορίθμου
περιλαμβάνουν, μεταξύ άλλων, τα εξής:

1. Υλικό 
2. Λογισμικό 
3. Επιλογή και σχεδιασμός αλγορίθμου για συγκεκριμένο πρόβλημα 
4. Αποτελεσματική υλοποίηση



### Πολυπλοκότητα αλγορίθμου



Η πολυπλοκότητα ενός αλγορίθμου είναι ένα μέτρο των πόρων που καταναλώνει
(υπολογιστική ισχύς ή μνήμη) για ένα συγκεκριμένο πρόβλημα και δεδομένο
σύνολο δεδομένων. 

Η επιλογή των σωστών δομών δεδομένων και των πράξεων σε δομές δεδομένων
και η εξασφάλιση της βέλτιστης υλοποίησης του αλγορίθμου επηρεάζουν
επίσης την πολυπλοκότητα του αλγορίθμου.



### Μέτρηση της πολυπλοκότητας



Συχνά, η πολυπλοκότητα ενός αλγορίθμου δηλώνεται από τους πόρους που καταναλώνονται
στο χειρότερο σενάριο. Η πολυπλοκότητα των αλγορίθμων μετράται συνήθως με ασυμπτωτικούς
συμβολισμούς για τα σενάρια καλύτερης περίπτωσης, χειρότερης περίπτωσης και μέσης
περίπτωσης όσον αφορά την κατανάλωση πόρων για ένα δεδομένο σύνολο δεδομένων. 

Οι δημοφιλείς ασυμπτωτικές σημειώσεις για αλγορίθμους παρατίθενται στον Πίνακα 16.1.

Η εκμάθηση του υπολογισμού των αναφερόμενων συμβολισμών για διαφορετικά σύνολα
δεδομένων εισόδου (π.χ. ταξινομημένα, μη ταξινομημένα και ταξινομημένα με
αντίστροφη σειρά) είναι σημαντική. 

Η πολυπλοκότητα ενός αλγορίθμου μπορεί να είναι σταθερή, γραμμική, τετραγωνική,
κυβική, εκθετική ή λογαριθμική. Αυτές οι πολυπλοκότητες περιγράφονται στον
πίνακα 16.2. Συνήθως, οι σταθερές δεν λαμβάνονται υπόψη κατά τον υπολογισμό
της αποδοτικότητας ενός αλγορίθμου.



### Σχεδιασμός αλγορίθμων



Ο μηχανικός λογισμικού πρέπει να λάβει υπόψη του το σκοπό της συγκεκριμένης
εφαρμογής και τις απαιτήσεις απόδοσης προκειμένου να επιλέξει τον κατάλληλο
αλγόριθμο. Επιπλέον, ο μηχανικός λογισμικού πρέπει να εξετάσει τον γραμμικό
προγραμματισμό έναντι του παράλληλου προγραμματισμού και τον μονόπλευρο
έναντι του πολυνηματικού προγραμματισμού. 

Η αποδοτικότητα ενός αλγορίθμου μετράται από τους πόρους που καταναλώνει,
κυρίως υπολογιστικό χρόνο και μνήμη. 

Ένας μηχανικός λογισμικού πρέπει να γνωρίζει μερικούς τυπικούς αλγορίθμους
και σχετικές έννοιες, συμπεριλαμβανομένων των ακόλουθων: 

	* Συνήθεις τύποι αλγορίθμων: Αλγόριθμος ωμής βίας, αναδρομικός αλγόριθμος,
	αλγόριθμος διαίρει και βασίλευε, αλγόριθμοι δυναμικού προγραμματισμού,
	άπληστος αλγόριθμος, αλγόριθμοι οπισθοδρόμησης, τυχαιοποιημένοι αλγόριθμοι. 
	* Τυχαίοι αλγόριθμοι προσέγγισης, τυχαία στρογγυλοποίηση, αλγόριθμοι
	προσέγγισης, αλγόριθμοι κλάσης πολυπλοκότητας P και NP, θεώρημα του Cook,
	αναγωγές και αλγόριθμοι πληρότητας. 
	* Πολλαπλές πράξεις σύγκρισης που εκτελούνται ταυτόχρονα σε ένα δικτυακό
	μοντέλο υπολογισμού. Δημοφιλείς αλγόριθμοι δικτύου ταξινόμησης περιλαμβάνουν
	τα δίκτυα σύγκρισης, την αρχή μηδέν-ένα, το δίκτυο συγχώνευσης και τον bitonic
	sorter. 
	* Βελτιστοποιημένοι αλγόριθμοι για την εκτέλεση διαφόρων πράξεων σε έναν πίνακα,
	όπως ο πολλαπλασιασμός πινάκων, η μετάθεση, η αντιστροφή πινάκων, η διάμεσος
	και η εύρεση προσδιοριστών. 
	* Κρυπτογραφική πολυπλοκότητα και αλγόριθμοι: αλγόριθμοι κρυπτογράφησης με
	μυστικό κλειδί (συμμετρικό), αλγόριθμοι κρυπτογράφησης με δημόσιο κλειδί
	(ασύμμετρο) και συναρτήσεις κατακερματισμού. 
	* Μονόδρομες συναρτήσεις, κλάση UP, πολυπλοκότητα χώρου, ντετερμινιστικές
	και μη ντετερμινιστικές κλάσεις πολυπλοκότητας χώρου, η μέθοδος της
	προσπελασιμότητας και το θεώρημα του Savitch. 
	* Αναπαραστάσεις γραφημάτων, αλγόριθμοι γραφημάτων, αναζήτηση κατά πλάτος και
	κατά βάθος, τοπολογική ταξινόμηση, ελάχιστο δέντρο διάσχισης, αλγόριθμοι
	Kruskal και Prim και συντομότερα μονοπάτια μιας πηγής (αλγόριθμοι
	Bellman-Ford και Dijkstra). 
	* Πολυπλοκότητα τυχαιοποιημένων υπολογισμών, διαδραστικές αποδείξεις, πολυπλοκότητα
	καταμέτρησης, πολυπλοκότητα κυκλωμάτων Boole. Ιδιαίτερη σημασία σε πολλά συστήματα
	λογισμικού έχουν οι αλγόριθμοι ταξινόμησης και αναζήτησης, οι οποίοι συζητούνται
	λεπτομερέστερα.



### Τεχνικές ταξινόμησης



Η ταξινόμηση είναι η διαδικασία διάταξης των στοιχείων δεδομένων σε μια 
συγκεκριμένη σειρά.

Οι δημοφιλείς αλγόριθμοι ταξινόμησης περιλαμβάνουν τη Γραμμική ταξινόμηση,
τη Ταξινόμηση φυσαλίδων, τη Γρήγορη ταξινόμηση, τη Ταξινόμηση συγχώνευσης,
τη Ταξινόμηση ακτινωτών στοιχείων, τη Ταξινόμηση σωρού, τη Ταξινόμηση κάδου,
τη Ταξινόμηση περιστεριών, τη Μπιτονική ταξινόμηση, τη Ταξινόμηση δέντρων,
τη Ταξινόμηση καρτεσιανού δέντρου, τη Γρήγορη ταξινόμηση 3 τρόπων, τη
Ταξινόμηση συγχώνευσης 3 τρόπων και την Ταξινόμηση μοναδιαία / διπλά συνδεδεμένων 
λιστών. 

Κάθε αλγόριθμος ταξινόμησης έχει τα πλεονεκτήματα και τις ελλείψεις του.
Η επιλογή του κατάλληλου αλγορίθμου εξαρτάται από το μέγεθος των δεδομένων
εισόδου, τον τύπο των δεδομένων (γραμμικό ή μη γραμμικό) και τον τύπο του
συνόλου δεδομένων (εντελώς αταξινόμητο, μερικώς ταξινομημένο κ.λπ.). Οι
αλγόριθμοι υλοποιούνται τόσο με επαναληπτικές όσο και με αναδρομικές μεθόδους.
Συνήθως, οι επαναληπτικές μέθοδοι είναι καλύτερες από τις αναδρομικές μεθόδους
όσον αφορά την απόδοση της CPU και τη μνήμη. Ωστόσο, η αναδρομή παρέχει εύκολες
μεθόδους για την επίλυση συγκεκριμένων προβλημάτων, όπως οι πράξεις δέντρων.
Εάν υπάρχει επαρκής υπολογιστική ισχύς και μνήμη, η διαφορά μεταξύ αναδρομικών
και επαναληπτικών μεθόδων υλοποίησης είναι αμελητέα. 

Στην περίπτωση εφαρμογών όπου ορισμένοι αλγόριθμοι ταξινόμησης λειτουργούν
καλύτερα, οι μηχανικοί λογισμικού θα πρέπει να μάθουν και να προσαρμοστούν
σε τυχόν προϋποθέσεις και πολυπλοκότητες (απαιτήσεις σε μνήμη και υπολογιστική
ισχύ) που συνεπάγεται η χρήση τους.



### Τεχνικές αναζήτησης 



Η αναζήτηση είναι μια διαδικασία εύρεσης συγκεκριμένων στοιχείων δεδομένων
ή εγγραφών σε ένα σύνολο στοιχείων δεδομένων ή σε μια βάση δεδομένων. 

Οι αλγόριθμοι αναζήτησης κατηγοριοποιούνται κυρίως σε διαδοχική αναζήτηση
(το σύνολο δεδομένων διατρέχεται διαδοχικά μέχρι το τέλος του συνόλου δεδομένων)
και σε αναζήτηση διαστήματος (η αναζήτηση κινείται αποτελεσματικά μέσω μιας
ταξινομημένης λίστας, ενός ισορροπημένου δέντρου κ.λπ.), με βάση τον τρόπο
οργάνωσης των συνόλων δεδομένων. 

Ανάλογα με τον τύπο του στοιχείου δεδομένων και το μέγεθος του συνόλου
δεδομένων, χρησιμοποιούνται διάφορες τεχνικές αναζήτησης για την εύρεση
του επιθυμητού στοιχείου δεδομένων. Οι δημοφιλείς αλγόριθμοι αναζήτησης
περιλαμβάνουν γραμμική, δυαδική, άλμα, παρεμβολή, εκθετική, Fibonacci,
υπο-λίστα (αναζήτηση μιας συνδεδεμένης λίστας σε μια άλλη λίστα),
λογαριθμική, δέντρο και κατακερματισμό.



### Κατακερματισμός



Η κατακερματισμός (hashing) είναι μια από τις πολύ σημαντικές και δημοφιλείς
τεχνικές στην οποία δεδομένα αυθαίρετου μεγέθους (τιμές κλειδιών) μετατρέπονται
σε τιμές σταθερού μεγέθους που ονομάζονται τιμές κατακερματισμού, οι οποίες
τοποθετούνται σε έναν πίνακα κατακερματισμού, ώστε οι εγγραφές δεδομένων να
εντοπίζονται εύκολα. Η συνάρτηση που χρησιμοποιείται για το σκοπό αυτό
ονομάζεται συνάρτηση κατακερματισμού και οι τιμές που επιστρέφονται ονομάζονται
τιμές κατακερματισμού, κωδικοί κατακερματισμού, σύνοψη ή κλειδιά κατακερματισμού. 

Διαφορετικές ιδιότητες των συναρτήσεων κατακερματισμού, όπως η ομοιομορφία,
η αποδοτικότητα, η καθολικότητα, η εφαρμοσιμότητα, η ντετερμινιστικότητα,
το καθορισμένο ή μεταβλητό εύρος, η κανονικοποίηση των δεδομένων, η δοκιμή
και η μέτρηση, πρέπει να γίνονται κατανοητές και να λαμβάνονται υπόψη κατά
το σχεδιασμό ή την επιλογή μιας συνάρτησης κατακερματισμού. 

Διάφοροι τύποι συναρτήσεων κατακερματισμού έχουν σχεδιαστεί για διαφορετικούς
τύπους τιμών κλειδιών, εφαρμογών και μεγεθών βάσεων δεδομένων. Οι τύποι
συναρτήσεων κατακερματισμού περιλαμβάνουν την τετριμμένη συνάρτηση κατακερματισμού,
τη μέθοδο διαίρεσης, τη μέθοδο μεσαίου τετραγώνου, τη μέθοδο αναδίπλωσης ψηφίων,
τον πολλαπλασιαστικό κατακερματισμό, τον διπλό κατακερματισμό, τον ανοικτό
και τον κλειστό κατακερματισμό, τον επανακατακερματισμό, τον επεκτάσιμο
κατακερματισμό και τις κρυπτογραφικές και μη κρυπτογραφικές συναρτήσεις
κατακερματισμού. 

Οι μηχανικοί λογισμικού αναμένεται να μάθουν, να υλοποιήσουν και να είναι σε θέση
να συγκρίνουν διαφορετικούς τύπους αλγορίθμων κατακερματισμού, διάφορες τεχνικές
επίλυσης συγκρούσεων, γραμμική ανίχνευση, τετραγωνική ανίχνευση, ξεχωριστή αλυσίδα 
και ανοικτή διευθυνσιοδότηση.







     




      



