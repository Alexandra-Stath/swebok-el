# Αρχιτεκτονική Λογισμικού

## Ακρωνύμια

|AD 	|Architecture Description		            |
|ADL	|Architecture Description Language          |
|API    |Application Programming Interface          |
|ASR    |Architecturally Significant Requirement    |
|IDL    |Interface Description Language             |
|MVC    |Model View Controller                      |

## Εισαγωγή

Αυτό το κεφάλαιο λαμβάνει υπόψη την αρχιτεκτονική λογισμικού από διάφορες προοπτικές: έννοιες αρχιτεκτονικής λογισμικού, αναπαράσταση αρχιτεκτονικών και προϊόντα εργασίας, περιβάλλον, διαδικασίες και μεθόδους, καθώς και ανάλυση και αξιολόγηση. Σε αντίθεση με την προηγούμενη έκδοση, αυτή η έκδοση δημιουργεί μια περιοχή γνώσης για την αρχιτεκτονική λογισμικού, ξεχωριστή από την περιοχή γνώσης για τον σχεδιασμό λογισμικού (Software Design KA), λόγω του σημαντικού ενδιαφέροντος και ανάπτυξης των αρχιτεκτονικών από τη δεκαετία του 1990.

## Ανάλυση θεμάτων για την Αρχιτεκτονική Λογισμικού

Στο σχ. 1 μπορείτε να δείτε την εκτενή ανάλυση των διάφορων θεμάτων για την περιοχή γνώσης της Αρχιτεκτονικής Λογισμικού.

## Θεμέλια της Αρχιτεκτονικής Λογισμικού

### Η αίσθηση της Αρχιτεκτονικής

Η μηχανική λογισμικού και σχετικές επιστήμες χρησιμοποιούν πολλές έννοιες της "αρχιτεκτονικής". Πρώτον, η "αρχιτεκτονική" αναφέρεται συχνά σε μια αρχή: την τέχνη και την επιστήμη της κατασκευής πραγμάτων - σε αυτήν την περίπτωση, συστημάτων λογισμικού. Η επιστήμη αυτή περιλαμβάνει έννοιες, αρχές, διαδικασίες και μεθόδους που η κοινότητα έχει ανακαλύψει και υιοθετήσει.

Δεύτερον, η *αρχιτεκτονική* αναφέρεται στις διάφορες διαδικασίες μέσω των οποίων αυτή η αρχή υλοποιείται. Σε αυτήν την περιοχή γνώσης, διαχωρίζουμε τον *σχεδιασμό αρχιτεκτονικής* ως μια συγκεκριμένη φάση στον κύκλο ζωής που περιλαμβάνει ένα συγκεκριμένο σύνολο δραστηριοτήτων, και το διαχωρίζουμε από τις ευρύτερες *διαδικασίες αρχιτεκτονικής* που καλύπτουν ολόκληρο τον κύκλο ζωής. Και τα δύο συζητούνται στην ενότητα *Επεξεργασία Αρχιτεκτονικής Λογισμικού*.

Τρίτον, η "αρχιτεκτονική" αναφέρεται στο *αποτέλεσμα* της εφαρμογής αρχών αρχιτεκτονικής σχεδίασης και των διαδικασιών για τη διαμόρφωση αρχιτεκτονικών για συστήματα λογισμικού. Οι αρχιτεκτονικές ως αποτελέσματα εκφράζονται σε *αρχιτεκτονικές περιγραφές*. Το συγκεκριμένο θέμα θα συζητηθεί παραπάνω στην ενότητα *Περιγραφή Αρχιτεκτονικής Λογισμικού*. Η έννοια της αρχιτεκτονικής έχει εξελιχθεί και χρησιμοποιούνται πολλοί ορισμοί σήμερα. Ένας πρώιμος ορισμός της αρχιτεκτονικής από το 1990, εστίαζε στη δομή του λογισμικού:

**Αρχιτεκτονική.** Η οργανωσιακή δομή ενός συστήματος ή μίας συνιστώσας. [από: IEEE Std 610.12–1990, *IEEE Glossary of Software Engineering Terminolog*]

Αυτός ο ορισμός δεν χαρακτήριζε ορθά της εξελιγμένη ως προς την αρχιτεκτονική σκέψη, π.χ. αυτός ο ορισμός δεν επιτρέπει τον διαχωρισμό του λεπτομερούς σχεδιασμού μιας συνιστώσας από το Makefile της. Κάθε παράδειγμα που περιγράφει την *οργανωσιακή δομή* του συστήματος λογισμικού ή των συνιστώσων του δεν πρέπει να θεωρείται αρχιτεκτονική. Ακόμα, η έμφαση στη δομή συχνά περιορίζεται στην δομή του κώδικα και αποτυγχάνει να συμπεριλάβει όλες της δομές ενός συστήματος λογισμικού:

    Η αρχιτεκτονική λογισμικού ενός συστήματος είναι το σύνολο των δομών που απαιτούνται για να έχει λογική σύνδεση σύστημα. Αυτές οι δομές αποτελούνται από στοιχεία λογισμικού, σχέσεις μεταξύ αυτών και ιδιότητες και των δύο. [2*]

Κατά τη διάρκεια της δεκαετίας του 1990 η αρχιτεκτονική λογισμικού εμφανίστηκε ως μια ευρύτερη έννοια που εμπλέκει μια πιο γενική μελέτη των δομών και των αρχιτεκτονικών του λογισμικού. Πολλές δομές των συστημάτων λογισμικού δεν αντανακλούνται απευθείας στη δομή του κώδικα. Και οι δύο τύποι δομών έχουν επιπτώσεις στο σύστημα συνολικά: Ποιες είναι οι δυνατότητες του συστήματος; Ποιες αλληλεπιδράσεις έχει με άλλα συστήματα; Πώς χειρίζεται ιδιότητες όπως η ασφάλεια; Η αναγνώριση πως το λογισμικό περιλαμβάνει πολλές διαφορετικές δομές έχει προκαλέσει συζητήσεις για μια σειρά από ενδιαφέρουσες έννοιες για την αρχιτεκτονική λογισμικού (και γενικότερα για το σχεδιασμό λογισμικού), οδηγώντας σε τρέχουσες ορισμούς όπως:

    **Αρχιτεκτονική** (ενός συστήματος). Βασικά σενάρια ή ιδιότητες ενός συστήματος στο περιβάλλον του, διαμορφωμένα μέσα από τα στοιχεία που περιέχει, τις σχέσεις που διαμορφώνονται και με βάση τις αρχές σχεδιασμού και εξέλιξής του. [17]

Κύριες ιδέες σε αυτό τον ορισμό είναι: (1) Η αρχιτεκτονική αναφέρεται σε ό, τι είναι *βασικό* σε ένα σύστημα λογισμικού, δεν θεωρείται κάθε ένα στοιχείο, διασύνδεση ή διεπαφή βασικό. (2) Η αρχιτεκτονική λογισμικού λαμβάνει υπόψη ένα σύστημα *στο περιβάλλον του*. Παρόμοια με την αρχιτεκτονική κτιρίων, η αρχιτεκτονική λογισμικού είναι προσανατολισμένη προς τα έξω. Λαμβάνει υπόψη το περιβάλλον ενός συστήματος πέρα ​​από τα όριά του, για να εξετάσει τους ανθρώπους, τις οργανώσεις, το λογισμικό, τον υλικό και άλλες συσκευές με τις οποίες το σύστημα πρέπει να αλληλεπιδράσει.

### Ενδιαφερόμενοι φοροίς και ανησυχίες

Ένα σύστημα λογισμικού έχει πολλούς *ενδιαφερόμενους φοροίς* με διαφορετικούς ρόλους και ενδιαφέροντα προς το σύστημα. Αυτά τα διαφορετικά ενδιαφέρονται ονομάζονται *ανησυχίες*, και σύμφωνα με τον *διαχωρισμό ανησυχιών* του Dijkstra:

    Θα προσπαθήσω να σας εξηγήσω, ποια κατά τη γνώμη μου είναι η χαρακτηριστική ιδιότητα για όλο το ευφυές σκέψης. Είναι, ότι κάποιος είναι διατεθειμένος να μελετήσει σε βάθος ένα κομμάτι του αντικειμένου του απομονώνοντάς το για τη συνέπειά του, γνωρίζοντας συνεχώς ότι απασχολείται μόνο με ένα από τα κομμάια του αντικειμένου. Γνωρίζουμε ότι ένα πρόγραμμα πρέπει να είναι σωστό και μπορούμε να το μελετήσουμε μόνο από αυτή τη σκοπιά. Γνωρίζουμε επίσης ότι πρέπει να είναι αποτελεσματικό και μπορούμε να μελετήσουμε την απόδοσή του μία άλλη φορά. Με μία άλλη οπτική, μπορούμε να αναρωτηθούμε εάν το πρόγραμμα είναι επιθυμητό και αν ναι, γιατί είναι επιθυμητό. Αλλά δεν κερδίζουμε κάτι - αντιθέτως! - αν προσπαθήσουμε να αντιμετωπίσουμε αυτά τα θέματα ταυτόχρονα. Αυτό που ονομάζω μερικές φορές «διαχωρισμό των ανησυχιών», που ακόμη και αν δεν είναι απολύτος δυνατό πάντα, είναι η μόνη διαθέσιμη τεχνική για να οργανώνεται αποδοτικά η σκέψη κάποιου, από όσα γνωρίζω. Αυτό είναι αυτό που εννοώ με το να "[επικεντρώνουμε] την προσοχή πάνω σε κάποιο θέμα": δεν σημαίνει να αγνοούμε τις άλλες πτυχές, απλά σκεφτόμενοι με την οπτική αυτής της πτυχής, οι άλλες είναι ασήμαντες. Είναι το να είσαι μονόπλευρος και πολύπλευρος ταυτόχρονα. [10]

Αυτό που είναι θεμελιώδες για ένα σύστημα διαφέρει ανάλογα με τα ενδιαφέροντα και τους ρόλους των ενδιαφερόμενων φορέων. Οι δομές του λογισμικού, συνεπώς, διαφέρουν επίσης ανάλογα με τους ρόλους και τα ενδιαφέροντα των φορέων. (Δείτε επίσης την ενότητα *Μεθόδοι Σχεδίασης στη Σχεδίαση Λογισμικού KA.*) 

Ο πελάτης ενός λογισμικού ενδιαφέρεται περισσότερο για το πότε το σύστημα θα είναι έτοιμο και πόσο θα κοστίσει να κατασκευαστεί και να λειτουργήσει. Οι χρήστες ενδιαφέρονται περισσότερο για το τι κάνει και πώς να το χρησιμοποιήσουν. Οι σχεδιαστές και οι προγραμματιστές που χτίζουν το σύστημα έχουν τις δικές τους ανησυχίες, όπως αν ένας αλγόριθμος θα ανταποκριθεί στις απαιτήσεις του συστήματος. Αυτοί που είναι υπεύθυνοι για την ασφάλεια του συστήματος έχουν διαφορετικές ανησυχίες.

Οι ανησυχίες καλύπτουν μια ευρεία γκάμα θεμάτων, που πιθανώς σχετίζονται με οποιαδήποτε επίδραση σε ένα σύστημα και στο περιβάλλον του, συμπεριλαμβανομένων των αναπτυξιακών, τεχνολογικών, επιχειρησιακών, οργανωτικών, πολιτικών, οικονομικών, νομικών, κανονιστικών, οικολογικών και κοινωνικών επιρροών. Όπως οι απαιτήσεις λογισμικού, μπορούν να ταξινομηθούν ως λειτουργικές, μη λειτουργικές ή περιορισμούς. Δείτε την ενότητα *Απαιτήσεις Λογισμικού*. Οι ανησυχίες εκδηλώνονται σε διάφορες γνώριμες μορφές, συμπεριλαμβανομένων των απαιτήσεων, των χαρακτηριστικών ποιότητας ή "ικανοτήτων", των αναδυόμενων ιδιοτήτων (που μπορεί να είναι είτε επιθυμητές είτε απαγορευτικές) και διάφορων ειδών περιορισμών (όπως αναφέρονται παραπάνω). Δείτε την ενότητα *Ποιότητα Λογισμικού*. Το *θέμα 2, Περιγραφή Αρχιτεκτονικής Λογισμικού*, δείχνει πώς οι ανησυχίες αυτές διαμορφώνουν τις αχιτεκτονικές και τα προϊόντα εργασίας που τις περιγράφουν . Παράδειγμα κάποιων ανησυχιών φαίνονται στο σχ. 2.

### Χρήσεις αρχιτεκτονικής

Ένας κύριος σκοπός της αρχιτεκτονικής ενός λογισμικού είναι να παρέχει στους ανθρώπους που εργάζονται με αυτό μια κοινή κατανόηση του συστήματος ώστε να καθοδηγήσουν το σχεδιασμό και την κατασκευή του. Η αρχιτεκτονική επίσης λειτουργεί ως πρώιμο σχέδιο του λογισμικού συστήματος που παρέχει μία βάση για την ανάλυση και την αξιολόγηση εναλλακτικών. Ένα τρίτο κοινό παράδειγμα χρήσης είναι η δυνατότητα αντιστροφής μηχανικής (ή *αντιστροφής αρχιτεκτονικής*) βοηθώντας όσους εργάζονται με αυτό να κατανοήσουν ένα υπάρχον λογισμικό σύστημα πριν αναλάβουν την συντήρησή του, την ενίσχυσή του ή την τροποποίησή του. Για να υποστηρίξει αυτές τις χρήσεις, πρέπει να υπάρχει τεκμιρίωση για την αρχιτεκτονική (δείτε την ενότητα *Περιγραφή Αρχιτεκτονικής Λογισμικού*).

Ο νόμος του Conway υποστηρίζει ότι "οι οργανισμοί που σχεδιάζουν συστήματα... περιορίζονται στο να παράγουν σχεδιασμούς που είναι αντίγραφα των δομών επικοινωνίας αυτών των οργανισμών". [9] Αυτό υποδηλώνει ότι οι αρχιτεκτονικές συχνά αντανακλούν τη δομή των οργανώσεων που τις ανέπτυξαν. Ανάλογα με το λογισμικό σύστημα και τον οργανισμό, αυτό μπορεί να αποτελεί μια δύναμη ή μια αδυναμία. Η αρχιτεκτονική μπορεί να βελτιώσει την επικοινωνία εντός μιας μεγάλης ομάδας ή να την επηρεάσει αρνητικά. Κάθε μέρος του οργανισμού μπορεί να βασίσει τον σχεδιασμό, τον προϋπολογισμό και τον προγραμματισμό του βάσει των γνώσεών του για την αρχιτεκτονική του συστήματος. Η δημιουργία μιας καλά σχεδιασμένης και τεκμηριωμένης αρχιτεκτονικής είναι μια προσέγγιση για την αύξηση της εφαρμοσιμότητας και της επαναχρησιμοποίησης των σχεδίων και των συνιστώσεων του λογισμικού. Η αρχιτεκτονική αποτελεί τη βάση για ομαδοποίηση σχεδίων για προγράμματα ή για προϊόντα λογισμικού. Αυτό μπορεί να επιτευχθεί αναγνωρίζοντας τις κοινοτυπίες μεταξύ αυτών των ομάδων και σχεδιάζοντας επαναχρησιμοποιήσιμα και εξατομικευμένα στοιχεία για τα διαφορετικά μέλη των ομάδων.

## Περιγραφή Αρχιτεκτονικής Λογισμικού

Στην ενότητα 1, *Θεμέλια Αρχιτεκτονικής Λογισμικού*, η αρχιτεκτονική λογισμικού ορίστηκε ως η βασικά έννοια ή οι βασικές ιδιότητες ενός συστήματος λογισμικού στο περιβάλλον του. Ωστόσο, κάθε ενδιαφερόμενο μέρος μπορεί να έχει διαφορετική αντίληψη για το τι είναι θεμελιώδες για ένα σύστημα λογισμικού, με δεδομένο την οπτική του. Έχοντας ένα νοητικό μοντέλο αρχιτεκτονικής συστήματος μπορεί να είναι καλό για μικρά συστήματα και για άτομα που εργάζονται μόνοι. Ωστόσο, για μεγάλα, πολύπλοκα συστήματα που αναπτύσσονται και λειτουργούν από ομάδες, μια υλική αναπαράσταση είναι ανεκτίμητη, ειδικά όταν η αντίληψη για το σύστημα εξελίσσεται και όταν νέοι άνθρωποι εντάσσονται ή αποχωρούν από την ομάδα. Έχοντας μια συγκεκριμένη αναπαράσταση ως προϊόν εργασίας μπορεί επίσης να χρησιμοποιηθεί ως μία βάση για την ανάλυση της αρχιτεκτονικής, τη διοργάνωση του σχεδιασμού της και την καθοδήγηση για την υλοποίησή της. Αυτά τα προϊόντα ονομάζονται *περιγραφές αρχιτεκτονικής* (architecture descriptions - ADs).

Μία AD τεκμηριώνει μια αρχιτεκτονική για ένα λογισμικό σύστημα. Είναι στοχευμένη σε αυτούς τους ενδιαφερόμενους φορείς που έχουν ανησυχίες σχετικά με το λογισμικό σύστημα τις οποίες η αρχιτεκτονική του μπορεί να τις απαντήσει. Όπως αναφέρεται στην ενότητα 1, *Θεμέλια της Αρχιτεκτονικής Λογισμικού*, το βασικό ακροατήριο αποτελείται από τους σχεδιαστές, μηχανικούς και προγραμματιστές οι οποίοι ευθύνονται για την κατασκευή του συστήματος. Για αυτούς τους ενδιαφερόμενους, μία AD λειτουργεί ως *σχέδι*ο για να καθοδηγήσει την κατασκευή του συστήματος. Για άλλους, μία AD είναι μια βάση για τη δουλειά τους, για παράδειγμα για τον έλεγχο και την ποιότητα, την πιστοποίηση, την αναπτυξιακή διαδικασία, την λειτουργία, τη συντήρηση και τη μελλοντική εξέλιξη.

Ιστορικά, οι AD χρησιμοποιούσαν κείμενο και ανεπίσημα διαγράμματα για να μεταδώσουν την αρχιτεκτονική. Ωστόσο, η ποικιλία του ακροατηρίου και οι διαφορετικές ανησυχίες τους οδήγησαν σε μια ποικιλία αναπαραστάσεων της αρχιτεκτονικής. Συχνά, αυτές οι αναπαραστάσεις είναι εξειδικευμένες βάσει των υφιστάμενων πρακτικών της κοινότητας ή των εμπλεκόμενων επιστημονικών πεδίων για να αντιμετωπίσουν αποτελεσματικά αυτήν την ποικιλία των ενδιαφερομένων και των ανησυχιών τους (δείτε 8Σχεδίαση Λογισμικού KA και Μοντέλα και Μέθοδοι Μηχανικής Λογισμικού KA8). Αυτές οι διάφορες αναπαραστάσεις ονομάζονται *προβολές αρχιτεκτονικής* (architecture view).

### Προβολές Αρχιτεκτονικής και Οπτικές

Μια *αρχιτεκτονική προβολή* αντιπροσωπεύει ένα ή περισσότερα στοιχεία μιας αρχιτεκτονικής για να αντιμετωπίσει ένα ή περισσότερα θέματα [26*]. Οι προβολές εξυπηρετούν συγκεκριμένα ζητήματα - για παράδειγμα, μια λογική προβολή (απεικονίζει πώς το σύστημα θα ικανοποιήσει τις λειτουργικές απαιτήσεις), μια προβολή διεργασιών (απεικονίζει πώς το σύστημα θα χρησιμοποιήσει την ταυτόχρονη εκτέλεση), μια φυσική προβολή (απεικονίζει πώς το σύστημα θα εγκατασταθεί και θα διανεμηθεί) και μια προβολή ανάπτυξης (απεικονίζει πώς ο σχεδιασμός στο επίπεδο του συστήματος χωρίζεται σε μονάδες υλοποίησης, τις εξαρτήσεις ανάμεσα σε αυτές τις μονάδες και πώς θα πρέπει να γίνει η υλοποίηση). Ο διαχωρισμός των θεμάτων με τη χρήση προβολών επιτρέπει στα ενδιαφερόμενα μέρη να επικεντρωθούν σε λίγα θέματα κάθε φορά και προσφέρει έναν τρόπο διαχείρισης της δυνατότητας κατανόησης της αρχιτεκτονικής και της συνολικής πολυπλοκότητας.

Καθώς οι πρακτικές σχεδίασης αρχιτεκτονικής έχουν εξελιχθεί από τη χρήση κειμένου και ανεπίσημων διαγραμμάτων στη χρήση πιο αυστηρών αναπαραστάσεων, κάθε αρχιτεκτονική προβολή απεικονίζει αρχιτεκτονικά στοιχεία του συστήματος χρησιμοποιώντας καλά καθορισμένες συνθήκες, σημειώσεις και μοντέλα [26*]. Οι συνθήκες για κάθε προβολή καταγράφονται ως *οπτικές αρχιτεκτονικής* (viewpoints) [17]. Οι οπτικές καθοδηγούν τη δημιουργία, την ερμηνεία και τη χρήση των αρχιτεκτονικών προβολών. Κάθε οπτική συνδέει τις ανησυχίες των ενδιαφερόμενων μερών με ένα σύνολο συνθηκών. Στην αρχιτεκτονική βασισμένη σε μοντέλα, κάθε προβολή μπορεί να ελεγχθεί από τον υπολογιστή έναντι της αντίστοιχης οπτικής.

Οι κοινές οπτικές περιλαμβάνουν τη οπτική του module, που χρησιμοποιείται για να εκφράσει την υλοποίηση ενός λογισμικού σε όρους των modules του και της οργάνωσής τους [2 *], η οπτική των component και connector, που χρησιμοποιείται για να εκφράσει τη μεγάλη κλίμακα εκτέλεσης του λογισμικού και των αλληλεπιδράσεών του [2 *], η λογική οπτική, που χρησιμοποιείται για να εκφράσει θεμελιώδεις έννοιες του πεδίου και της δυνατότητας του λογισμικού [18], η οπτική των σεναρίων / use cases, που χρησιμοποιείται για να εκφράσει τον τρόπο με τον οποίο οι χρήστες αλληλεπιδρούν με το σύστημα [18], η οπτική των πληροφοριών, που χρησιμοποιείται για να εκφράσει τα βασικά στοιχεία πληροφοριών ενός συστήματος και τον τρόπο με τον οποίο προσπελαύνονται και αποθηκεύονται [26 *], και η οπτική της ανάπτυξης, που χρησιμοποιείται για να εκφράσει τον τρόπο με τον οποίο ένα σύστημα διαμορφώνεται και αναπτύσεται για λειτουργία [26 *]. Άλλες καταγεγραμμένες οπτικές περιλαμβάνουν οπτικές για τη διαθεσιμότητα, συμπεριφορά, επικοινωνία, χειρισμό εξαιρέσεων, απόδοση, αξιοπιστία και ασφάλεια.
