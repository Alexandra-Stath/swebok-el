# Ποιότητα λογισμικού {#softquality}

## Ακρωνύμια

|CI/CD|Continuous Integration/Continuous Delivery|
|CoSQ	|Cost of Software Quality	      |
|COTS	|Commercial Off-the-Shelf Software    |
|FMEA	|Failure Mode and Effects Analysis    |
|FTA	|Fault Tree Analysis		      |
|IV&V |Independent Verification and Validation|
|PDCA	|Plan-Do-Check-Act		      |
|PSP	|Personal Software Process	      |
|QFD	|Quality Function Deployment	      |
|SCM  |Software Configuration Management   |
|SQA	|Software Quality Assurance	      |
|SQAP |Software Quality Assurance Plan     |
|SQC	|Software Quality Control             |
|SQM	|Software Quality Management          |
|VSEs |Very Small Entities              |
|V&V	|Verification and Validation          |

## Εισαγωγή

Τι είναι η ποιότητα λογισμικού και γιατί είναι τόσο σημαντική που
περιλαμβάνεται σε πολλά γνωστικά πεδία του Οδηγού SWEBOK ;

Ένας λόγος είναι πως ο όρος ποιότητα λογισμικού είναι πολυσήμαντος.
Η ποιότητα λογισμικού μπορεί να αναφέρεται στα επιθυμητά χαρακτηριστικά
προϊόντων λογισμικού, στο βαθμό που μία συγκεκριμένη διεργασία του
προϊόντος λογισμικού κατέχει αυτά τα χαρακτηριστικά, και σε διεργασίες,
εργαλεία και τεχνικές που χρησιμοποιούνται για να επιτευχθούν αυτά
τα χαρακτηριστικά. Με την πάροδο των ετών, συγγραφείς και οργανισμοί
ερμήνευσαν τον όρο ποιότητα με διαφορετικούς τρόπους. Για τον Phil
Crosby σήμαινε «συμμόρφωση στις απαιτήσεις». Ο Watts Humphrey αναφέρεται
σε αυτήν ως «επίτευξη εξαιρετικών επιπέδων καταλληλότητας χρήσης».
Παράλληλα, η IBM επινόησε τη φράση «ποιότητα καθοδηγούμενη από την
αγορά» («market - driven quality»), όπου «ο πελάτης είναι ο τελικός
κριτής».

Πιο πρόσφατα, η ποιότητα λογισμικού ερμηνεύθηκε ως «η δυνατότητα του
προϊόντος λογισμικού να ικανοποιεί ήδη δηλωμένες και υπονοούμενες
ανάγκες υπό καθορισμένες συνθήκες» και ως «το βαθμό στον οποίο ένα
προϊόν λογισμικού πληροί τις καθιερωμένες απαιτήσεις». Ωστόσο, η ποιότητα
εξαρτάται από το βαθμό στον οποίο αυτές οι καθιερωμένες απαιτήσεις
αντιπροσωπεύουν με ακρίβεια τις ανάγκες των ενδιαφερόμενων μελών,
τα ''θέλω'' και τις προσδοκίες τους. Και οι δύο ορισμοί περικλείουν
την προϋπόθεση της συμμόρφωσης με τις απαιτήσεις. Κανένας δεν αναφέρεται
σε τύπους απαιτήσεων, όπως λειτουργικότητα, εμπιστευτικότητα, απόδοση,
αξιοπιστία ή κάποιο άλλο χαρακτηριστικό.

Αξιοσημείωτο είναι, όμως, το γεγονός ότι αυτοί οι ορισμοί τονίζουν
ότι η ποιότητα εξαρτάται από τις απαιτήσεις.

Αυτοί οι ορισμοί, ακόμη, απεικονίζουν έναν άλλο λόγο για την διασφάλιση
της ποιότητας λογισμικού σε όλη την έκταση αυτού του Οδηγού: μια
συχνή ασάφεια της ποιότητας λογισμικού σε σχέση με τις απαιτήσεις
ποιότητας λογισμικού («the - ilities» είναι ένας κοινός τρόπος
στενογραφίας). Οι απαιτήσεις ποιότητας λογισμικού είναι πράγματι γνωρίσματα
ή περιορισμοί των λειτουργικών απαιτήσεων, δηλαδή του τι κάνει το
σύστημα. Οι απαιτήσεις λογισμικού μπορούν ακόμη να προσδιορίσουν τη
χρήση πόρων, τα πρωτόκολλα επικοινωνίας ή πολλά άλλα χαρακτηριστικά.
Αυτό το γνωστικό πεδίο επιδιώκει σαφήνεια μέσω της χρήσης ποιότητας
λογισμικού με την ευρύτερη έννοια των προαναφερθέντων ορισμών και
μέσω της χρήσης απαιτήσεων ποιότητας λογισμικού ως περιορισμούς
σε λειτουργικές απαιτήσεις.

Η ποιότητα λογισμικού επιτυγχάνεται με την συμμόρφωση σε όλες τις
απαιτήσεις ανεξαρτήτως του τι χαρακτηριστικό προσδιορίζεται ή πώς
οι απαιτήσεις ομαδοποιούνται ή ονομάζονται.

Επίσης, η ποιότητα λογισμικού λαμβάνεται υπ' όψιν σε αρκετά από τα
γνωστικά πεδία του οδηγού, καθώς είναι μια βασική παράμετρος για ένα
εγχείρημα τεχνολογίας λογισμικού. Για όλα τα προϊόντα τεχνολογίας,
ο πρωταρχικός στόχος είναι να παραδοθεί η μέγιστη αξία στα ενδιαφερόμενα
μέλη και παράλληλα να εξισορροπηθούν οι περιορισμοί του κόστους ανάπτυξης
και του χρονοπρογραμματισμού. Αυτό μερικές φορές χαρακτηρίζεται ως
«καταλληλότητα στη χρήση». Η αξία για τα ενδιαφερόμενα μέλη μεταφράζεται
σε απαιτήσεις.

Για προϊόντα λογισμικού, τα ενδιαφερόμενα μέλη θα μπορούσαν να εκλάβουν
ως αξία το κόστος, δηλαδή τι πληρώνουν για το προϊόν, το χρόνο παράδοσης,
δηλαδή το πόσο γρήγορα παραλαμβάνουν το προϊόν και την ποιότητα του
λογισμικού.

Η πτυχή της ποιότητας της διαδικασίας λογισμικού, η οποία έχει υπονοηθεί από
τα παραπάνω, πρέπει να καταστεί σαφής. Η ποιότητα μιας διαδικασίας λογισμικού
μπορεί να παρατηρηθεί σε χαρακτηριστικά διαδικασίας όπως η αποδοτικότητα, η
αποτελεσματικότητα, η χρηστικότητα, και η δυνατότητα εκμάθησης. Ατέλειες στη
διαδικασία είναι πιθανό να εμφανιστούν και ως ατέλειες στο τελικό προϊόν.

Τέλος, τα κινήματα Agile και DevOps στοχεύουν στη βελτίωση της διαδικασίας λογισμικού
και της ποιότητας του προϊόντος μέσω της συμμόρφωσης, προωθώντας γρήγορους κύκλους
επαναληπτικής ανατροφοδότησης και εξαλείφοντας τα οργανωσιακά σιλό συστεγάζοντας 
τους χρήστες και τους μηχανικούς λογισμικού. Άλλες πρακτικές, όπως προγραμματισμός σε ζεύγη 
και αυτοματοποίηση της ανάπτυξης, του ελέγχου, και των λειτουργικών υπηρεσιών προσδίδουν
επίσης αξία, βελτιώνοντας την αποδοτικότητα, και εντοπίζοντας έγκαιρα ατέλειες.

Αυτό το γνωστικό πεδίο αναφέρει ορισμούς και παρέχει μια επισκόπηση
των πρακτικών, των εργαλείων και των τεχνικών για τον προσδιορισμό
της ποιότητας λογισμικού και για την εκτίμηση της κατάστασης της ποιότητας
λογισμικού κατά τη διάρκεια της ανάπτυξης, συντήρησης και επέκτασης, τόσο από
την πλευρά του τελικού προϊόντος, όσο και από την πλευρά της διαδικασίας λογισμικού.

## Κατανομή των θεμάτων για την ποιότητα λογισμικού

{id="fig-softqual-tree"}
![Σχήμα 12.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Ποιότητα λογισμικού.](images/12-SoftQual.png)

Η κατανομή των θεμάτων για τα γνωστικά πεδία της ποιότητας λογισμικού απεικονίζεται στο [Σχήμα 12.1](#fig-softqual-tree).

## Βασικές αρχές της ποιότητας λογισμικού


Η επίτευξη συμφωνίας στο τι σημαίνει ποιότητα για όλα τα ενδιαφερόμενα
μέλη και η σαφής ενημέρωση αναφορικά με αυτήν στους μηχανικούς λογισμικού
προϋποθέτουν να έχουν επίσημα προσδιοριστεί και συζητηθεί οι πολλές
πτυχές της ποιότητας.

Οι κύριες προκλήσεις που πρέπει να αντιμετωπίσει ένας μηχανικός λογισμικού
για να διασφαλίσει την ποιότητα περιλαμβάνουν:

* Δυσκολίες στον σαφή καθορισμό των απαιτήσεων
* Διατήρηση αποδοτικής επικοινωνίας με τον πελάτη/χρήστη
* Αποκλίσεις από τις προδιαγραφές
* Σφάλματα στην αρχιτεκτονική και το σχεδιασμό
* Σφάλματα στον κώδικα
* Μη συμμόρφωση με τις τρέχουσες διαδικασίες
* Ανεπαρκείς αξιολογήσεις και έλεγχοι προϊόντων
* Σφάλματα στην τεκμηρίωση

Η ποιότητα λογισμικού ορίζεται ως "συμμόρφωση στις καθορισμένες απαιτήσεις,
η δυνατότητα ενός προϊόντος λογισμικού να ικανοποιεί τις ανάγκες που έχουν
δηλωθεί και υπονοηθεί κάτω από συγκεκριμένες συνθήκες" [6]. Ορίζεται επιπρόσθετα
"από το βαθμό στον οποίο ένα προϊόν λογισμικού ικανοποιεί τις καθορισμένες
απαιτήσεις - όμως, η ποιότητα εξαρτάται από το βαθμό στον οποίο αυτές οι 
καθορισμένες απαιτήσεις αναπαριστούν εύστοχα τις ανάγκες, τα θέλω και τις
προσδοκιές των ενδιαφερόμενων μελών" [6]. Η ποιότητα συχνά σημαίνει έλλειψη 
ελαττωμάτων. Η λέξη *ελάττωμα* είναι πολυσήμαντη, καθώς οι μηχανικοί, όπως και άλλοι, 
τη χρησιμοποιούν για να αναφερθούν σε κάθε είδος ανομοιομορφίας. Αλλά, οι διαφορετικές
κουλτούρες και προδιαγραφές της μηχανικής, συχνά αντιλαμβάνονται την έννοια "ελάττωμα"
καθώς και άλλους όρους, με κάποια συγκεκριμένη σημασία. Για να αποφευχθεί αυτή η σύγχυση,
οι μηχανικοί λογισμικού θα πρέπει να χρησιμοποιούν τη σημασία που παρέχεται από τις
προδιαγραφές τους [14]:

* *Σφάλμα*: "Μια ανθρώπινη ενέργεια που οδηγεί σε ένα λανθασμένο αποτέλεσμα."
Ονομάζεται επίσης και *ανθρώπινο σφάλμα*.

* *Ελάττωμα*: Μια "ατέλεια ή ανεπάρκεια σε ένα προϊόν εργασίας το οποίο δεν 
ανταποκρίνεται στις απαιτήσεις ή στις προδιαγραφές, και πρέπει είτε να διορθωθεί
είτε να αντικατασταθεί." Ελάττωμα παρεμβάλλεται όταν το άτομο που αναπτύσσει το 
λογισμικό σφάλλει. Ελλοχεύει στο λογισμικό μέχρις ότου (και αν) ανακαλυφθεί.

* *Αποτυχία*: Ο "τερματισμός της ικανότητας ενός συστήματος να εκτελέσει μια απαιτούμενη
λειτουργία ή η αδυναμία του να αποδόσει κάτω από τα προκαθορισμένα όρια - μια εμφανής
απόκλιση απο τις προδιαγραφές του συστήματος, όπου ένα σύστημα ή τμήμα αυτού δεν εκτελεί
απαραίτητη λειτουργικότητα εντός των προκαθορισμένων ορίων." Η αποτυχία προκαλείται
όταν το λογισμικό εκτελεί κάτι ελαττωματικό.

Ένας μηχανικός λογισμικού θα πρέπει να κατανοεί τις έννοιες, τα χαρακτηριστικά,
τις αξίες της ποιότητας και την εφαρμογή τους στο λογισμικό που βρίσκεται
υπό ανάπτυξη ή συντήρηση. Η σημαντική έννοια είναι ότι οι απαιτήσεις
λογισμικού προσδιορίζουν τα απαιτούμενα γνωρίσματα ποιότητας του λογισμικού.
Οι απαιτήσεις λογισμικού επηρεάζουν τις μεθόδους μέτρησης και τα κριτήρια
αποδοχής για την αξιολόγηση του βαθμού στον οποίο το λογισμικό και
η σχετική τεκμηρίωση επιτυγχάνουν τα επιθυμητά επίπεδα ποιότητας.

Μια άλλη σημαντική έννοια είναι ότι η ποιότητα λογισμικού θα έπρεπε να σχεδιάζεται
από τα πρώτα στάδια και να αξιολογείται σε αρκετά ορόσημα στη διάρκεια του κύκλου
ζωής του λογισμικού. Τέλος, το πως να προσαρμοστούν οι δραστηριότητες διασφάλισης ποιότητας 
λογισμικού (SQA) για να φιλοξενήσουν την ευέλικτη ανάπτυξη λογισμικού, παρουσιάζεται εκτενώς
στο πρότυπο 730:2014 του Ινστιτούτου Ηλεκτρολόγων και Ηλεκτρικών Μηχανικών (πρότυπο IEEE) [6].

### *Κουλτούρα και δεοντολογία της τεχνολογίας λογισμικού* [1*, c1s1.6; c2] [5*]

Η οργανωσιακή κουλτούρα επηρεάζει το πως οι μηχανικοί λογισμικού έχουν
επιρροή στην ποιότητα λογισμικού. Όπως εξηγεί και ο Iberle [19], οι πρακτικές
μηχανικής λογισμικού διαφέρουν, και εξαρτώνται από το επιχειρηματικό μοντέλο (π.χ.
εξατομίκευσης, μαζικής αγοράς, εμπορικό, υλικολογισμικό) και τον κλάδο στον οποίο
οι μηχανικοί λογισμικού εργάζονται.

Από τους μηχανικούς λογισμικού αναμένεται να μοιράζονται μια δέσμευση
προς την ποιότητα του λογισμικού ως μέρος της κουλτούρας τους. Μια
υγιής κουλτούρα τεχνολογίας λογισμικού περιλαμβάνει πολλά χαρακτηριστικά,
συμπεριλαμβανομένης της κατανόησης ότι το αντιστάθμισμα μεταξύ κόστους,
χρονοδιαγράμματος και ποιότητας είναι βασικό στοιχείο της τεχνολογίας
οποιουδήποτε προϊόντος.
Μια βασική αρχή της τεχνολογίας λογισμικού θεωρεί πως οι μηχανικοί
αναφέρουν με ακρίβεια τις πληροφορίες, τις συνθήκες και τα αποτελέσματα
που σχετίζονται με την ποιότητα.

Η ηθική παίζει επίσης πολύ σημαντικό ρόλο στην ποιότητα του λογισμικού,
την κουλτούρα και τη στάση των μηχανικών λογισμικού. Η IEEE Computer
Society και η ACM έχουν αναπτύξει έναν κώδικα ηθικής και επαγγελματικής
πρακτικής (βλ.
παράγραφο [Κώδικας δεοντολογίας και επαγγελματικής συμπεριφοράς](#code-ethics)
στο γνωστικό πεδίο Επαγγελματικές πρακτικές της τεχνολογίας λογισμικού).

### *Αξία και κόστη ποιότητας* [1*, c2s2.2]

Ένας πολύ σημαντικός παράγοντας που οδηγεί την αντίσταση της υλοποίησης της SQA
είναι το αντιληπτό υψηλό κόστος. Όμως, και η μη υλοποίηση μιας βασικής SQA
μπορεί να είναι δαπανηρή. Οι μηχανικοί λογισμικού θα πρέπει να ενημερώνουν τη διοίκηση
για τα ρίσκα που αναλμβανούν όταν δεν εστιάζουν στην ποιότητα. Αυτό μπορεί να
γίνει εξηγώντας τις έννοιες του κόστους ποιότητας λογισμικού στη διοίκηση. Το κόστος
ποιότητας λογισμικού (CoSQ) ορίζεται ως το άθροισμα των παρακάτω δαπανών του έργου:

* Κόστος δραστηριοτήτων προγραμματισμού και κατασκευής (π.χ. προγραμματισμός, σχεδίαση,
ανάπτυξη)
* Κόστος δραστηριοτήτων πρόληψης (βελτίωση διαδικασίας, εργαλεία, εκπαίδευση)
* Κόστος δραστηριοτήτων αξιολόγησης για τον εντοπισμό ελαττωμάτων (π.χ. αξιολογήσεις, 
έλεγχοι, δοκιμές)
* Κόστος ανακατασκευής λόγω μη συμμόρφωσης (κόστος εσωτερικής και κόστος εξωτερικής αποτυχίας)

Το CoSQ μπορεί να χωριστεί σε δύο υψηλού επιπέδου κατηγορίες: *κόστος συμμόρφωσης* και
*κόστος μη συμμόρφωσης*. Το κόστος συμμόρφωσης είναι το σύνολο όλων των επενδύσεων στον
εντοπισμό σφαλμάτων και ελαττωμάτων, καθώς επίσης και των προληπτικών δραστηριοτήτων. Οι δαπάνες
αξιολόγησης προκύπτουν από δραστηριότητες του έργου που έχουν ως σκοπό τον εντοπισμό
σφαλμάτων και ελαττωμάτων. Αυτές περιλαμβάνουν τις δοκιμές (με λεπτομέρεια στο γνωστικό πεδίο
Δοκιμές Λογισμικού), αξιολογήσεις και έλεγχοι (με λεπτομέρεια στη συνέχεια αυτού του γνωστικού
πεδίου). Οι δαπάνες αξιολόγησης επεκτείνονται και στους υπεργολάβους προμηθευτές λογισμικού, 
αν αυτοί υπάρχουν. Τα κόστη πρόληψης περιλαμβάνουν επενδύσεις σε προσπάθειες βελτίωσης της 
διαδικασίας λογισμικού (SPI), υποδομές ποιότητας, εργαλεία ποιότητας, υποδείγματα
προϊόντος εργασίας, και εκπαίδευση. Αυτές οι δαπάνες δεν αναφέρονται απαραίτητα σε ένα έργο -
συνήθως αφορούν τον οργανισμό γενικότερα.

Το κόστος μη συμμόρφωσης είναι το σύνολο όλων των δαπανών αντιμετώπισης των σφαλμάτων και
ελαττωμάτων που έχουν εντοπιστεί. Το κόστος πριν από την παράδοση είναι εκείνο που προκύπτει 
για την αποκατάσταση σφαλμάτων και ελαττωμάτων που διαπιστώνονται κατά τη διάρκεια των 
δραστηριοτήτων αξιολόγησης, και ανακαλύπτονται πριν από την παράδοση του προϊόντος λογισμικού 
στον πελάτη. Το κόστος μετά την παράδοση περιλαμβάνει τα έξοδα που πραγματοποιούνται για την 
αντιμετώπιση βλαβών λογισμικού που ανακαλύπτονται μετά την παράδοση στον πελάτη. Τα εξωτερικά 
κόστη περιλαμβάνουν τη διόρθωση που απαιτείται για την επισκευή και τη δοκιμή μιας 
ανανεωμένης έκδοσης. Ωστόσο, ο οικονομικός αντίκτυπος στον πελάτη που αντιμετωπίζει μια 
αποτυχία είναι εξίσου σημαντικός. Για παράδειγμα, πρέπει να αναγνωρίζεται και να 
υπολογίζεται η χαμένη παραγωγικότητα του πελάτη, τα δεδομένα που χάθηκαν και η πιθανή ζημία
της υπόληψής του στην αγορά. Πέρα από τον αντίκτυπο στον πελάτη, το λογισμικό χαμηλής 
ποιότητας μπορεί επίσης να επηρεάσει την κοινωνία και το περιβάλλον. Οι μηχανικοί λογισμικού
θα πρέπει να αναζητούν το βέλτιστο CoSQ - το ελάχιστο συνολικό κόστος για ένα συγκεκριμένο 
επίπεδο ποιότητας.


### *Προδιαγραφές, μοντέλα και πιστοποίησεις*

Η ορθή χρήση των προδιαγραφών λογισμικού της μηχανικής λογισμικού, καθώς και η αξιολόγηση
και βελτίωση της διαδικασίας λογισμικού βελτιώνουν την ποιότητα του. Μία από τις πιο
σημαντικές προδιαγραφές μηχανικής λογισμικού είναι το πρότυπο ISO/IEC/IEEE 12207:2017, το οποίο
περιγράφει τις διεργασίες του κύκλου ζωής λογισμικού. Πρωτίστως, οι μηχανικοί λογισμικού
πρέπει να γνωρίζουν τις σημαντικότερες προδιαγραφές μηχανικής λογισμικού που εφαρμόζονται
στον κλάδο που απασχολούνται. Όπως έχει συζητηθεί από τον Iberle [19], οι πρακτικές που 
χρησιμοποιούν οι μηχανικοί λογισμικού διαφέρουν σημαντικά από κλάδο σε κλάδο, ανάλογα με το
επιχειρηματικό μοντέλο και την κουλτούρα του οργανισμού στον οποίο εργάζονται. Για παράδειγμα,
οι προδιαγραφές του προτύπου IEEE 1228:1994 για προγραμματισμό ασφάλειας λογισμικού και του προτύπου
IEEE 1633:2016 για την προτεινόμενη πρακτική αξιοπιστίας λογισμικού, στοχεύουν κλάδους στους οποίους 
η ασφάλεια και η αξιοπιστία είναι σημαντικά.

Τα πρότυπα PDCA διαφέρουν από τις προδιαγραφές, καθώς συχνά προτείνουν "βέλτιστες πρακτικές" 
για τους μηχανικούς λογισμικού από μια συγκεκριμένη σκοπιά. (Βλ. γνωστικό πεδίο διεργασίας 
μηχανικής λογισμικού για περισσότερες πληροφορίες πάνω στο πρότυπο PDCA για το λογισμικό.) 

Μοντέλα "βέλτιστων πρακτικών" άλλων κλάδων όπως οι στόχοι ελέγχου για τις τεχνολογίες
πληροφοριών και συναφών τεχνολογιών(COBIT-Control Objectives for Information and Related Technologies) 
για τη διακυβέρνηση της τεχνολογίας της πληροφορίας, ο οδηγός γνώσης διοίκησης έργων 
(PMBOK®-Project Management Body of Knowledge) για τη διαχείριση έργων, ο οδηγός γνώσης επιχειρηματικής
αναλυτικής (BABOK®-Business Analysis Body of Knowledge), η ενσωμάτωση μοντέλου ωριμότητας ικανοτήτων 
(CMMI-Capability Maturity Model Integration), και το πλαίσιο αρχιτεκτονικής του ανοικτού ομίλου 
(TOGAF-The Open Group Architecture Framework) προτείνουν πρακτικές σχετικές με το λογισμικό που
μπορούν να βελτιώσουν την ποιότητα των προϊόντων και διαδικασιών λογισμικού.

Οργανισμοί λογισμικού μπορούν επίσης να αναλογιστούν όλα τα πιθανά οφέλη από την απόκτηση
αδειών ή πιστοποιήσεων (π.χ. ISO 9001 για την ποιότητα, ISO 27001 για την ασφάλεια, ISO 
20000 για τις διεργασίες). Ακόμη, οι μηχανικοί λογισμικού μπορούν επίσης να αποκτήσουν 
πιστοποιήσεις στο πλαίσιο σκραμ και κλιμακούμενης ευελιξίας (SAFe®-Scrum and Scaled Agile 
Framework®) για ευέλικτες διεργασίες. Η χρήση των μοντέλων και των πιστοποίησεων αυτών έχουν 
δείξει πως αυξάνουν την εμπιστοσύνη των ενδιαφερόμενων μελών στο γεγονός ότι οι γνώσεις και 
οι ικανότητες των μηχανικών λογισμικού παραμένουν ενημερωμένες και έχουν διεθνή αναγνώριση.

### *Eπίπεδα αξιοπιστίας και ακεραιότητας του λογισμικού* [1*, c4s4.8.2, c7s7.3.3] [11]

Συστήματα υψηλής πολυπλοκότητας λογισμικού και σύστηματα κρίσιμα για την ασφάλεια είναι αυτά
όπου μια αποτυχία του συστήματος θα μπορούσε να βλάψει ανθρώπινες ζωές, άλλα έμβια όντα,
φυσικές δομές, και το περιβάλλον. Το λογισμικό τέτοιων συστημάτων θεωρείται κρίσιμο για 
την ασφάλεια και απαιτούν τη χρήση συστηματικών μεθόδων και εργαλείων για να διασφαλιστεί το
υψηλό ποιοτικό επίπεδο. Ένας αυξανόμενος αριθμός από κλάδους χρησιμοποιεί έναν αυξημένο
αριθμό από λογισμικό κρίσιμο για την ασφάλεια, συμπεριλαμβανομένων των συστημάτων μεταφοράς,
χημικών και πυρηνικών εργοστασίων, και ιατρικών συσκευών. Αποτυχία του λογισμικού σε τέτοια
συστήματα μπορεί να έχει καταστροφικές συνέπειες. Οι μηχανικοί ακολουθούν προδιαγραφές του
κλάδου, όπως πιστοποίηση ευαισθησίας λογισμικού σε συστήματα αερομεταφοράς και εξοπλισμού 
DO-178C [8], σιδηροδρομικές εφαρμογές EN 50128 [18], και ανερχόμενες διεργασίες, εργαλεία
και τχενικές για την ασφαλέστερη ανάπτυξη λογισμικού κρίσιμού για την ασφάλεια. Αυτές οι
προδιαγραφές, τα εργαλεία και οι τεχνικές μειώνουν τον κίνδυνο ενσωμάτωσης σφαλμάτων στο
λογισμικό και συνεπώς βελτιώνουν τη διαθεσιμότητα, αξιοπιστία και συντηρησιμότητα του
λογισμικού. Οι μηχανικοί λογισμικού και οι προϊστάμενοί τους πρέπει να αντιληφθούν τους
κινδύνους και τα ζητήματα που μπορεί να προκύψουν, και οφείλουν να αναπτύξουν τις απαραίτητες
δεξιότητες για να προβλέψουν και να αποτρέψουν τυχών ατυχήματα πριν αυτά συμβούν [15].

Το λογισμικό κρίσιμο για την ασφάλεια μπορεί να καταταχθεί σε δύο κατηγορίες: *άμεσο* και
*έμμεσο*. Το άμεσο λογισμικό ενσωματώνεται σε ένα σύστημα κρίσιμο για την ασφάλεια, όπως
ο υπολογιστής ελέγχου πτήσης ενός αεροσκάφους. Το έμμεσο λογισμικό περιλαμβάνει εφαρμογές
λογισμικού που χρησιμοποιούνται για την ανάπτυξη λογισμικού κρίσιμου για την ασφάλεια. Το
έμμεσο λογισμικό συμπεριλαμβάνεται σε περιβάλλοντα μηχανικής λογισμικού και δοκιμών λογισμικού.

Τρεις συμπληρωματικές τεχνικές για τη μείωση κινδύνου αποτυχιών είναι η αποφυγή, η ανίχνευση
και αφαίρεση, και ο περιορισμός της ζημιάς. Αυτές οι τεχνικές επηρεάζουν τις λειτουργικές 
απαιτήσεις, τις απαιτήσεις απόδοσης και τις διαδικασίες ανάπτυξης. Αύξηση του κινδύνου 
συνεπάγεται αυξημένη SQA και πιο σχολαστικές τεχνικές αξιολόγησης όπως επιθεωρήσεις [16].
Υψηλότερα επίπεδα κινδύνου επιβάλλουν πιο ενδελεχείς επιθεωρήσεις των απαιτήσεων, της
σχεδίασης, και του κώδικα, ή τη χρήση αυστηρότερων τεχνικών επαλήθευσης. Μια άλλη τεχνική
για τη διαχείριση και τον έλεγχο του κινδύνου λογισμικού είναι η δημιουργία περιπτώσεων
εγγύησης. Η *περίπτωση εγγύησης* είναι ένα εμπεριστατωμένο, ελεγχόμενο τεχνούργημα που 
δημιουργήθηκε για να υποστηρίξει τον ισχυρισμό πως οι απαιτήσεις ικανοποιούνται. Περιλαμβάνει
τις ακόλουθες σχέσεις: μία ή περισσότερες απαιτήσεις σχετικά με την ιδιοκτησία, επιχειρήματα
που συνδέουν λογικά τις αποδείξεις και όποιες υποθέσεις των ισχυρισμών, και τις αποδείξεις
και τις υποθέσεις που υποστηρίζουν αυτά τα επιχειρήματα [9].

#### *Αξιοπιστία* [7, c10]

Σε περιπτώσεις όπου η αποτυχία του συστήματος μπορεί να έχει σοβαρές επιπτώσεις, η συνολική 
αξιοπιστία (π.χ. αξιοπιστία υλικού, λογισμικού, ανθρώπου ή λειτουργιών) είναι η κύρια 
απάιτηση ποιότητας, πέραν της βασικής λειτουργικότητας του λογισμικού, για τους ακόλουθους
λόγους: Οι αποτυχίες συστήματος επηρεάζουν πολλούς ανθρώπους - οι χρήστες συνήθως απορρίπτουν
τα συστήματα που είναι αναξιόπιστα και επικίνδυνα - οι δαπάνες από μία αποτυχία του συστήματος
ενδέχονται να είναι τεράστιες - και τα αναξιόπιστα συστήματα μπορεί να οδηγήσουν σε απώλεια
πληροφοριών. Πολλές προδιαγραφές αντιμετωπίζουν διαφορετικές όψεις της αξιοπιστίας, όπως
η εμπιστοσύνη και η διαθεσιμότητα. Η αξιοπιστία συστήματος και λογισμικού ανασυντάσσουν 
διάφορα ποιοτικά χαρακτηριστικά: διαθεσιμότητα, εμπιστοσύνη, συντηρησιμότητα και 
υποστηριξιμότητα, εκτίμηση κινδύνου, και ασφάλεια. Στην ανάπτυξη αξιόπιστου λογισμικού,
οι μηχανικοί πρέπει να εφαρμόζουν τεχνικές και εργαλεία, για τη μείωση του κινδύνου ενσωμάτωσης
σφαλμάτων σε ενδιάμεσα παραδοτέα ή στο τελικό προϊόν λογισμικού. Μπορούν να χρησιμοποιήσουν
στατικές, δυναμικές, ή αυστηρές μεθόδους για επιβεβαίωση και επικύρωση (V&V), και διεργασίες
δοκιμών, καθώς επίσης και άλλες εξειδικευμένες τεχνικές, μεθόδους, και εργαλεία για τον
εντοπισμό ελαττωμάτων που επηρεάζουν την αξιοπιστία, όσο το δυνατόν νωρίτερα στον κύκλο
ζωής του λογισμικού [7*, c10.5]. Επιπρόσθετα, ενδέχεται να χρειαστεί η ενσωμάτωση 
συγκεκριμένων μηχανισμών εντός του λογισμικού για την προστασία από εξωτερικές επιθέσεις 
και την ανοχή σφαλμάτων κατά τη λειτουργία.

#### *Επίπεδα Ακεραιότητας του Λογισμικού* [1*, c4s4.8.2, c7s7.3.3] [11]

Ο καθορισμός επιπέδων ακεραιότητας είναι μια μέθοδος διαχείρισης κινδύνου. Ένα *επίπεδο 
ακεραιότητας* είναι "μια τιμή που αναπαριστά μοναδικά χαρακτηριστικά του έργου (π.χ.
πολυπλοκότητα, κρισιμότητα, κίνδυνος, επίπεδο ασφάλειας, επιθυμητή απόδοση, και αξιοπιστία) 
που καθορίζουν τη σημαντικότητα του συστήματος, του λογισμικού, ή του υλικού του χρήστη" [11].
Τα χαρακτηριστικά που καθορίζουν το επίπεδο ακεραιότητας του λογισμικού διαφέρουν ανάλογα με 
την επιθυμητή εφαρμογή και χρήση του συστήματος. Το λογισμικό είναι μέρος του συστήματος,
και το επίπεδο ακεραιότητάς του καθορίζεται ως μέλος αυτού.

Τα επίπεδα ακεραιότητας λογισμικού που έχουν ανατεθεί μπορεί να αλλάξουν όσο εξελλίσεται
το λογισμικό. Τα χαρακτηριστικά της σχεδίασης, του κώδικα, της διαδικασίας και της τεχνολογίας
που εφαρμόζονται στο σύστημα ή το λογισμικό μπορούν να ανεβάσουν ή να μειώσουν τα επίπεδα 
ακεραιότητας που έχουν ανατεθεί. Τα καθορισμένα επίπεδα ακεραιότητας λογισμικού για ένα έργο
προκύπτουν από τις συμφωνίες ανάμεσα στον αγοραστή, τον προμηθευτή, τον προγραμματιστή, και
από ανεξάρτητες αρχές διασφάλισης [11].

Οι μηχανικοί λογισμικού θα πρέπει να γνωρίζουν ότι σε ορισμένους κρίσιμους για την ασφάλεια 
κλάδους, όπως η αεροναυπηγική, οι σιδηρόδρομοι, η πυρηνική ενέργεια, οι ιατρικές συσκευές και 
πολλοί άλλοι, οι ειδικές για τον κλάδο οδηγίες μπορούν να απαιτούν ένα ορισμένο επίπεδο 
ανεξαρτησίας για τις δραστηριότητες ποιότητας του λογισμικού και να ορίζουν τις κατ'ελάχιστες 
τεχνικές V&V που πρέπει να χρησιμοποιούνται ανά επίπεδο ακεραιότητας (παράδειγμα τέτοιων 
τεχνικών είναι: ανάλυση ευχρηστίας, ανάλυση αλγορίθμων, ανάλυση οριακών τιμών, ανάλυση ροής 
δεδομένων, επανεξέταση με περίπατο [11][26]).

#### Διεργασίες διαχείρισης ποιότητας λογισμικού


"Η διαχείριση της ποιότητας λογισμικού (SQM) ασχολείται με τον συντονισμό 
των δραστηριοτήτων που κατευθύνουν και ελέγχουν έναν οργανισμό όσον αφορά
την ποιότητα λογισμικού" [6]. Ο σκοπός της διεργασίας διαχείρισης ποιότητας 
είναι να διαβεβαιώσει ότι τα προϊόντα, οι υπηρεσίες, και οι υλοποιήσεις 
της διεργασίας διαχείρισης ποιότητας πληρούν τους στόχους του οργανισμού και 
ποιότητας έργου, και επιτυγχάνουν τη ικανοποίηση των πελατών.

Οι μηχανικοί λογισμικού μπορούν να μάθουν για τη διεργασία διαχείρισης ποιότητας
λογισμικού σε πολλά πρότυπα, μοντέλα, και πιστοποιήσεις που είναι διαθέσιμα και 
χρησιμοποιούνται ευρέως στον κλάδο.

Μια σημαντική έννοια της διαχείρισης ποιότητας λογισμικού είναι ο σχεδιασμός
και η συντήρηση ενός Συστήματος Διαχείρισης Ποιότητας (QMS). Όπως προτείνεται 
από το πρότυπο ISO 9001, ένα σύστημα διαχείρισης ποιότητας ορίζει τις διεργασίες, 
τους ιδιοκτήτες των διεργασιών, τις απαιτήσεις των διεργασιών, μετρήσεις για 
τις διεργασίες και τις εκροές τους, και κανάλια ανατροφοδότησης σε όλοκληρο 
τον κύκλο ζωής λογισμικού. Ένα σύστημα διαχείρισης ποιότητας αποτελείται από 
πολλές βασικές δραστηριότητες: Διασφάλιση Ποιότητας Λογισμικού (SQA), 
Επαλήθευση και Επικύρωση (V&V), αξιολογήσεις και έλεγχοι, διαχείριση παραμετροποίησης 
λογισμικού (SCM), και απαιτεί πολιτικές, διαδικασίες, και διεργασίες για να 
εξασφαλίσει ότι όλοι οι εμπλεκόμενοι καταλαβαίνουν τι αναμένεται σε όρους 
διεργασίας λογισμικού και ποιότητας προϊόντος. Για να είναι ένα σύστημα διαχείρισης 
ποιότητας αποτελεσματικό, η στήριξη από τη διοίκηση είναι επιτακτική ανάγκη. 
Η στήριξη της διοίκησης υπονοεί ότι τα έργα εκπαιδεύονται στην απαίτηση του 
συστήματος διαχείρισης ποιότητας και έχουν αρκετούς πόρους για να επιτύχουν το 
στόχο ποιότητας που έχει καθοριστεί για το έργο αυτό. Η χορηγία της διοίκησης 
θα πρέπει να ζητείται συχνά κατά τη διάρκεια αξιολόγησης έργων λογισμικού για 
να διασφαλιστεί ότι οι δραστηριότητες ποιότητας λογισμικού εκτελούνται και 
οι μη συμμορφώσεις αντιμετωπίζονται. 

Για ένα έργο λογισμικού, οι διεργασίες ποιότητας λογισμικού αποτελούνται από 
καθήκοντα και τεχνικές που υποδεικνύουν πως τα σχέδια λογισμικού (για παράδειγμα, 
σχέδια διαχείρισης λογισμικού, ανάπτυξης, διοίκησης ποιότητας ή διαχείρισης
παραμετροποίησης) υλοποιούνται και πόσο καλά τα ενδιάμεσα και τα τελικά προϊόντα 
πληρούν τις καθορισμένες απαιτήσεις. Αποτελέσματα από τα καθήκοντα αυτά συγκεντρώνονται 
σε αναφορές για τη διοίκηση. Η διοίκηση της διεργασίας διαχείρισης ποιότητας λογισμικού 
έχει το καθήκον να διασφαλίσει πως τα αποτελέσματα των αναφορών είναι ακριβή 
και διενεργούνται.

Η διαχείριση κινδύνου μπορεί επίσης να έχει σημαντικό ρόλο στην παράδοση 
ποιοτικού λογισμικού. Η ενσωμάτωση πειθαρχημένης ανάλυσης κινδύνου και 
τεχνικών διοίκησης στις διεργασίες κύκλου ζωής λογισμικού μπορούν να 
βελτιώσουν την ποιότητα προϊόντος. (Βλέπε το γνωστικό πεδίο Διαχείρισης 
Μηχανικής Λογισμικού για περισσότερο σχετικό υλικό στη διαχείριση κινδύνου.)


### *Βελτίωση ποιότητας λογισμικού* [1*, s9.9 and c9] [2] [3]

Η Βελτίωση Ποιότητας Λογισμικού (SQI) πραγματοποιείται χρησιμοποιώντας 
πολλές διαφορετικές προσεγγίσεις μέσα στον κλάδο του λογισμικού, συμπεριλαμβανομένων 
της βελτίωσης διεργασίας λογισμικού (SPI), των Έξι Σίγμα, Lean, και Kaizen
για να αναφέρουμε μερικές. Για παράδειγμα, οι δραστηριότητες βελτίωσης διεργασίας 
λογισμικού επιδιώκουν να βελτιώσουν την αποτελεσματικότητα, την αποδοτικότητα, 
και άλλα χαρακτηριστικά διεργασιών για τη βελτίωση της ποιότητας του λογισμικού.
Για παράδειγμα, παρόλο που η βελτίωση διεργασίας λογισμικού μπορεί να συμπεριληφθεί 
σε οποιαδήποτε από τις τρεις πρώτες κατηγορίες, πολλοί οργανισμοί οργανώνουν τη 
βελτίωση διεργασίας λογισμικού σε μια ξεχωριστή κατηγορία που μπορεί να εκτείνεται 
σε πολλά έργα.

Η ποιότητα των προϊόντων λογισμικού μπορεί να βελτιωθεί μέσα από αρχές 
Lean ή μέσω μιας επαναληπτικής διεργασίας συνεχούς βελτίωσης,
η οποία απαιτεί έλεγχο διαχείρισης, συντονισμό και ανατροφοδότηση
από πολλές ταυτόχρονες διεργασίες: (1) τις διεργασίες του κύκλου ζωής
του λογισμικού, (2) τη διεργασία εντοπισμού, αφαίρεσης και πρόληψης
σφαλμάτων, (3) τη διεργασία βελτίωσης ποιότητας. 

Η θεωρία και οι έννοιες που κρύβονται πίσω από τη βελτίωση ποιότητας,
όπως η δόμηση του λογισμικού με ποιότητα μέσω της πρόληψης και του
έγκαιρου εντοπισμού σφαλμάτων, της συνεχούς βελτίωσης και της επικέντρωσης
στα ενδιαφερόμενα μέρη, σχετίζονται με την τεχνολογία λογισμικού.
Αυτές οι έννοιες βασίζονται στη εργασία των ειδικών ποιότητας που
έχουν δηλώσει ότι η ποιότητα ενός προϊόντος συνδέεται άμεσα με την
ποιότητα της διεργασίας που χρησιμοποιήθηκε για να δημιουργηθεί. Προσεγγίσεις
όπως ο κύκλος βελτίωσης ονόματι Σχεδιασμός-Εκτέλεση-Έλεγχος-Δράση(Plan-Do-Check-Act)
(PDCA), η εξελικτική παράδοση, το μοντέλο Kaizen και η Εξάπλωση της
Λειτουργίας Ποιότητας (Quality Function Deployment — QFD) προσφέρουν
τεχνικές για τον καθορισμό των στόχων ποιότητας και τον προσδιορισμό
της επίτευξης τους.

Τελικά, από τη στιγμή που η μηχανική λογισμικού είναι μια περίπλοκη 
διαδικασία, δεν μπορεί να περιοριστεί σε ένα εγχειρίδιο διεργασιών. 
Για να συμπληρωθεί το κίνημα βελτίωσης διεργασιών και εργαλειών ο 
Humphrey πρότεινε την προσωπική διεργασία λογισμικού (PSP) για τους 
μηχανικούς λογισμικού, προκειμένου επίσης να αξιολογούν διαρκώς τις 
ικανότητες και τις γνώσεις τους, και να τις βελτιώνουν συνεχώς.

### *Διαχείριση σχεδίου ποιότητας*

Ο σχεδιασμός ποιότητας λογισμικού περιλαμβάνει τον καθορισμό των προτύπων 
και των μοντέλων ποιότητας που θα χρησιμοποιηθούν, τον ορισμό των συγκεκριμένων 
στόχων ποιότητας, την εκτίμηση για την απαραίτητη προσπάθεια επίτευξης κάθε στόχου, 
και την απόφαση του οροσήμου στο οποίο θα λάβει χώρα η δραστηριότητα ποιότητας 
λογισμικού. Σε μερικές περιπτώσεις, ο σχεδιασμός ποιότητας λογισμικού περιλαμβάνει 
επίσης και τον ορισμό των διεργασιών ποιότητας λογισμικού που θα χρησιμοποιηθούν.

Αρχικά, η οργάνωση λογισμικού πρέπει να δεσμευτεί στην ποιότητα με την καθιέρωση 
του δικού της Συστήματος Διαχείρισης Ποιότητας (Quality Management System — QMS) 
το οποίο περιλαμβάνει πολιτικές διαχείρισης ποιότητας, στόχους, και διεργασίες. 
Αυτό απαιτεί την ανάθεση της ευθύνης και της αρμοδιότητας για την εφαρμογή του 
συστήματος διαχείρισης ποιότητας και την ανεξαρτησία τους από τις τρέχουσες ομάδες 
διαχείρισης έργων.

Μια εγκεκριμένη οργανωσιακή πολιτική, σχετική με την ποιότητα του λογισμικού, βοηθά στην 
καθοδήγηση των αποφάσεων για την ανάπτυξη έργων και προϊόντων, καθώς και στη συμπεριφορά 
του προσωπικού. Οι μηχανικοί λογισμικού θα πρέπει να προωθούν τη χρήση γραφικά 
αναπαρισταμένων διεργασιών και διαδικασιών που εφαρμόζουν την πολιτική ποιότητας και 
εξηγούν τους ρόλους, τις δραστηριότητες που πρέπει να εκτελεστούν και τα αναμενόμενα 
αποτελέσματα των βασικών δραστηριοτήτων μηχανικής λογισμικού. Κατά συνέπεια, για να 
χρησιμοποιηθεί ένα σύστημα διαχείρισης ποιότητας στη βελτίωση, οι διαδικασίες του θα 
πρέπει να  τεκμηριώνονται με γνώμονα τον χρήστη του και να προσδιορίζουν τα σημεία όπου 
θα επαληθεύονται οι έλεγχοι ποιότητας. Τέλος, οι διαδικασίες εξηγούν λεπτομερώς τα 
βήματα που γίνονται για την εκτέλεση μιας συγκεκριμένης δραστηριότητας.

### *Μέτρηση διαχείρισης ποιότητας*

Αφού τεθεί σε εφαρμογή το σύστημα διαχείρισης ποιότητας, το πρότυπο ISO/IEC Technical 
Specification TS 33061:2021 [22] ορίζει ένα μοντέλο αξιολόγησης διαδικασιών για τις 
διαδικασίες του κύκλου ζωής του λογισμικού, χρησιμοποιώντας πέντε επίπεδα ικανοτήτων 
διαδικασίας (από το επίπεδο 0: ελλιπής έως το επίπεδο 5: βελτιστοποίηση της διαδικασίας). 
Επιπλέον, οι μηχανικοί λογισμικού μπορούν να αξιολογήσουν την ωριμότητα των δραστηριοτήτων 
του συστήματος διαχείρισης ποιότητας στα έργα λογισμικού τους χρησιμοποιώντας την 
καθοδήγηση του προτύπου IEEE 730:2014 [6]. Η χορηγία της διοίκησης υποστηρίζει τις 
αξιολογήσεις των διεργασιών και των προϊόντων, και τα ευρήματα που προκύπτουν τροφοδοτούν 
ένα πρόγραμμα βελτίωσης που αναπτύσσεται και προσδιορίζει λεπτομερείς δράσεις και έργα 
βελτίωσης που πρέπει να αντιμετωπιστούν σε ένα εφικτό χρονικό πλαίσιο. Σε τακτά χρονικά 
διαστήματα, οι μηχανικοί λογισμικού συγκεντρώνουν και αναλύουν τα αποτελέσματα της 
αξιολόγησης της διασφάλισης ποιότητας. Αυτό μπορεί να επιτευχθεί με την εξέταση των 
μέτρων ποιότητας και του χαρακτηρισμού ελαττωμάτων που παράγονται από τα έργα.

#### *Μέτρηση ποιότητας λογισμικού* [1*, c10] [7, c24s24.5]

Οι μετρήσεις της ποιότητας λογισμικού χρησιμοποιούνται για να υποστηρίξουν
τη λήψη αποφάσεων. Με την αυξανόμενη πολυπλοκότητα του λογισμικού, τα ζητήματα 
ποιότητας πάνε πέρα από το εάν δουλεύει το λογισμικό στο πόσο καλά επιτυγχάνει
μετρήσιμους ποιοτικούς στόχους. Η ποσοτικοποίηση κάποιου χαρακτηριστικού του λογισμικού 
μπορεί να βοηθήσει τους μηχανικούς να αξιολογήσουν την ποιότητά του ή την ποιότητα 
της διεργασίας. (Η μέτρηση της διεργασίας περιγράφεται λεπτομερώς στο γνωστικό 
πεδίο Διεργασίες).

Οι αποφάσεις που υποστηρίζονται από μέτρηση ποιότητας λογισμικού περιλαμβάνουν
τον προσδιορισμό των επιπέδων ποιότητας του λογισμικού, κυρίως επειδή
τα μοντέλα προϊόντων λογισμικού περιλαμβάνουν μετρήσεις για να προσδιορίσουν
το βαθμό στον οποίο το προϊόν λογισμικού επιτυγχάνει ποιοτικούς στόχους.
Επίσης, περιλαμβάνουν ζητήματα διοίκησης σχετικά με την προσπάθεια,
το κόστος και τον χρονοπρογραμματισμό, καθώς και τον προσδιορισμό του πότε
να σταματήσει ο έλεγχος και να κυκλοφορήσει ένα προϊόν (βλ. Μετρήσεις 
Σχετικές με τον Έλεγχο, στο γνωστικό πεδίο Έλεγχος λογισμικού).
Τέλος, περιλαμβάνουν τον προσδιορισμό της αποτελεσματικότητας των
προσπαθειών βελτίωσης των διεργασιών.

Το κόστος ποιότητας λογισμικού (CoSQ) είναι ένα θέμα που τίθεται συχνά στην
επιλογή του τρόπου με τον οποίο μια ομάδα ανάπτυξης ή συντήρησης θα
πρέπει να είναι οργανωμένη. Συχνά, χρησιμοποιούνται μοντέλα κόστους
γενικής χρήσης, τα οποία βασίζονται στο πότε ένα σφάλμα εντοπίζεται
και πόση προσπάθεια απαιτείται για την επιδιόρθωση του σφάλματος σε
σχέση με την προσπάθεια που απαιτείται για τον εντοπισμό του σφάλματος
νωρίτερα στη διεργασία της ανάπτυξης.
Τα δεδομένα που συλλέγονται εσωτερικά από τη μέτρηση της ποιότητας
λογισμικού μπορεί να δώσουν μια καλύτερη εικόνα του κόστους μέσα στο
έργο ή τον οργανισμό.

Καθώς τα δεδομένα μέτρησης της ποιότητας λογισμικού μπορεί να είναι
χρήσιμα για το ίδιο, όπως ο αριθμός των ελαττωματικών απαιτήσεων ή
το ποσοστό των ελαττωματικών απαιτήσεων, μαθηματικές και γραφικές
τεχνικές μπορούν να εφαρμοσθούν για να συμβάλλουν στην ερμηνεία των
μετρικών (βλ. το γνωστικό πεδίο Μαθηματικά Θεμέλια Μηχανικής/Engineering 
Mathematical Foundations).
Αυτές οι τεχνικές περιλαμβάνουν:

  * περιγραφικά στατιστικά στοιχεία, όπως είναι η ανάλυση κατά Παρέτο,
  τα διαγράμματα κίνησης, τα διαγράμματα διασποράς, η κανονική κατανομή,
  * στατιστικούς ελέγχους, όπως είναι ο διωνυμικός έλεγχος,  ο έλεγχος
  του «Χ εις το τετράγωνο»,
  * ανάλυση τάσεων, όπως είναι τα διαγράμματα ελέγχου, βλ. *Εργαλειοθήκη Ποιότητας*
  στην περαιτέρω ανάγνωση, και
  * πρόβλεψη, όπως είναι τα μοντέλα αξιοπιστίας.

Οι περιγραφικές τεχνικές και οι έλεγχοι που βασίζονται σε στατιστικά
στοιχεία συχνά παρέχουν ένα στιγμιότυπο από τις πιο προβληματικές
περιοχές του υπό εξέταση προϊόντος λογισμικού. Τα διαγράμματα και
οι γραφικές παραστάσεις που προκύπτουν είναι οπτικοποιημένα βοηθήματα,
τα οποία οι υπεύθυνοι λήψης αποφάσεων μπορούν να χρησιμοποιήσουν για
να συγκεντρώσουν τους πόρους και να διεξάγουν βελτιώσεις διεργασιών,
όπου αυτές είναι πιο αναγκαίες. Τα αποτελέσματα από την ανάλυση των
τάσεων μπορεί να υποδείξουν ότι πληρείται ένα χρονοδιάγραμμα, όπως
στον έλεγχο, ή ότι για συγκεκριμένες κατηγορίες λαθών μπορεί να γίνει
πιο πιθανό να συμβούν εκτός κι αν κάποια διορθωτική ενέργεια λάβει
χώρα στην ανάπτυξη. Οι τεχνικές πρόβλεψης συμβάλλουν στην εκτίμηση
της προσπάθειας και του χρονοδιαγράμματος και στην πρόβλεψη αποτυχιών.
Περισσότερη συζήτηση γύρω από τη μέτρηση γενικά εμφανίζεται στο γνωστικό
πεδίο Διεργασίες τεχνολογίας λογισμικού και της Διοίκησης τεχνολογίας
λογισμικού.
Πιο συγκεκριμένες πληροφορίες στη μέτρηση ελέγχου παρουσιάζεται στο
γνωστικό πεδίο Έλεγχος λογισμικού.

Η μέτρηση της ποιότητας λογισμικού περιλαμβάνει τις μετρήσεις περιστατικών
σφαλμάτων και την εφαρμογή στατιστικών μεθόδων με σκοπό την κατανόηση
των τύπων των σφαλμάτων που συμβαίνουν πιο συχνά. Τρεις ευρέως χρησιμοποιούμενες 
μετρήσεις ποιότητας λογισμικού είναι η πυκνότητα σφαλμάτων (αριθμός σφαλμάτων ανά 
μονάδα μεγέθους εγγράφων/λογισμικού), η πυκνότητα ελαττωμάτων (αριθμός ελαττωμάτων 
που βρέθηκαν διαιρεμένος με το μέγεθος του λογισμικού) και ο ρυθμός αποτυχίας 
(μέσος χρόνος μέχρι την αποτυχία). Τα μοντέλα αξιοπιστίας κατασκευάζονται από δεδομένα 
αποτυχίας που συλλέγονται κατά τη διάρκεια δοκιμών λογισμικού ή από λογισμικό σε 
λειτουργία και, συνεπώς, μπορούν να χρησιμοποιηθούν για την εκτίμηση της πιθανότητας 
μελλοντικών αποτυχιών και να βοηθήσουν στη λήψη αποφάσεων σχετικά με το πότε πρέπει 
να σταματήσει ο έλεγχος.

Οι πληροφορίες μπορεί να χρησιμοποιηθούν από τη βελτίωση των διεργασιών του λογισμικού 
για τον προσδιορισμό μεθόδων πρόληψης, μείωσης ή εξάλειψης από την επανεμφάνισή
τους. Συμβάλλουν, επίσης, στην κατανόηση των τάσεων, του πόσο καλά
λειτουργούν οι τεχνικές ανίχνευσης και περιορισμού και πόσο καλά οι
διεργασίες ανάπτυξης και συντήρησης προχωρούν. Από αυτές τις μεθόδους
μέτρησης, μπορούν να αναπτυχθούν προφίλ σφαλμάτων για ένα συγκεκριμένο
κλάδο εφαρμογών. Συνεπώς, για το επόμενο έργο λογισμικού μέσα στον
οργανισμό, τα προφίλ μπορούν να χρησιμοποιηθούν για την καθοδήγηση
των διεργασιών διαχείρισης ποιότητας λογισμικού, δηλαδή να αναλώσουν την 
περισσότερη προσπάθεια εκεί όπου τα προβλήματα είναι πιο πιθανό να συμβούν. 
Ομοίως, πρότυπα συγκριτικής αξιολόγησης ή ελαττώματα τυπικά για εκείνο τον κλάδο,
μπορούν να συμβάλλουν στον προσδιορισμό του πότε το προϊόν είναι έτοιμο
προς παράδοση.
Συζήτηση για τη χρήση δεδομένων μέτρησης για τη βελτίωση των διεργασιών
ανάπτυξης και συντήρησης εμφανίζεται στα γνωστικά πεδία Διοίκησης
τεχνολογίας λογισμικού και Διεργασίες τεχνολογίας λογισμικού.


### *Εκτέλεση διορθωτικών και προληπτικών ενεργειών*

Είναι σημαντικό, όταν οι στόχοι της διαχείρισης ποιότητας δεν επιτυγχάνονται, 
να τεκμηριώνονται και να υποβάλλονται διορθωτικές ενέργειες, προκειμένου να βελτιωθεί 
το σύστημα διαχείρισης ποιότητας και να αποτραπεί η επανεμφάνιση του προβλήματος 
σε μελλοντικά έργα λογισμικού. Αυτό απαιτεί οι συμμετέχοντες στο έργο να έχουν 
έναν τρόπο αναφοράς των προβλημάτων της διαδικασίας και των εργαλείων μηχανικής
λογισμικού σε έναν ανεξάρτητο οργανισμό που θα τεκμηριώνει και θα παρακολουθεί 
την πρόοδο των διορθωτικών ενεργειών και θα ενημερώνει τα αρμόδια ενδιαφερόμενα μέρη.

#### *Χαρακτηρισμός ελαττωμάτων* [1*, c1s3]

Για να βοηθήσουν στην εξάλειψη της αιτίας ή των αιτιών μιας υπάρχουσας μη συμμόρφωσης 
ή μιας ανεπιθύμητης κατάστασης για την αποφυγή επανάληψης, οι μηχανικοί λογισμικού 
μπορούν να χρησιμοποιήσουν τεχνικές ελέγχου ποιότητας λογισμικού (SQC) για να βρουν 
σφάλματα, ελαττώματα και αποτυχίες στις διαδικασίες και τα προϊόντα τους. Κατά τον 
εντοπισμό σφαλμάτων, ελαττωμάτων και αποτυχιών, ο μηχανικός λογισμικού ενδιαφέρεται 
για τον αριθμό και τους τύπους των προβλημάτων. Οι αριθμοί από μόνοι τους, χωρίς 
κατηγοριοποίηση, ενδέχεται να μην επαρκούν για να βοηθήσουν στον εντοπισμό των υποκείμενων 
αιτιών και, συνεπώς, στην αποτροπή τους στο μέλλον. Ως εκ τούτου, οι μηχανικοί 
λογισμικού θα πρέπει να καθιερώσουν μια ουσιαστική ταξινόμηση ελαττωμάτων για να 
περιγράψουν και να κατηγοριοποιήσουν τέτοιες ανωμαλίες. Μια πιθανή ενέργεια που 
προκύπτει από τις αξιολογήσεις ομοτίμων(peer reviews) και τα ευρήματα ελέγχου είναι η 
έγκαιρη αφαίρεση αυτών των σφαλμάτων και ατελειών από το υπό εξέταση προϊόν εργασίας.

Άλλες δραστηριότητες διαχείρισης ποιότητας λογισμικού προσπαθούν να εξαλείψουν 
τις αιτίες τους (π.χ. ανάλυση αιτιών (RCA)). Οι δραστηριότητες ανάλυσης αιτιών 
περιλαμβάνουν την ανάλυση και τη σύνοψη των ευρημάτων για την εξεύρεση των 
βαθύτερων αιτιών και τη χρήση τεχνικών μέτρησης για τη βελτίωση των διαδικασιών, 
τεχνικών και εργαλείων μηχανικής λογισμικού. (Η βελτίωση των διαδικασιών συζητείται 
κυρίως στο γνωστικό πεδίο Διαδικασία μηχανικής λογισμικού. Η ανάλυση αιτιών 
συζητείται περαιτέρω στο γνωστικό πεδίο Θεμέλια μαθηματικής μηχανικής).

Τα δεδομένα των σφαλμάτων και των ατελειών που εντοπίζονται κατά τη 
διάρκεια της διασφάλισης ποιότητας λογισμικού και των τεχνικών ελέγχου μπορεί 
να χαθούν εάν δεν καταγραφούν. Για ορισμένες τεχνικές (π.χ. αξιολογήσεις ομοτίμων 
και επιθεωρήσεις), οι μηχανικοί λογισμικού είναι παρόντες για να καταγράφουν 
τα δεδομένα αυτά και να αντιμετωπίζουν τα ζητήματα και να λαμβάνουν αποφάσεις. 
Επιπλέον, όταν χρησιμοποιούνται αυτοματοποιημένα εργαλεία (βλ. Θέμα 4, Εργαλεία 
ποιότητας λογισμικού), η εκροή του εργαλείου μπορεί να παρέχει αναφορές για τις 
τάσεις των ελαττωμάτων που μπορούν να παρέχονται στη διοίκηση του οργανισμού.

## Διεργασίες διαχείρισης ποιότητας λογισμικού {#softqualmngpr}


Η διαχείριση της ποιότητας λογισμικού (Software Quality Management)
(SQM) είναι το σύνολο όλων των διεργασιών που εξασφαλίζουν ότι τα
προϊόντα, οι υπηρεσίες και οι πραγμάτωση των διεργασιών του κύκλου
ζωής του λογισμικού επιτυγχάνουν τους οργανωσιακούς στόχους της ποιότητας
λογισμικού και την ικανοποίηση των ενδιαφερόμενων μερών.
Η SQM ορίζει διεργασίες, ιδιοκτήτες των διεργασιών, απαιτήσεις για
τις διεργασίες, μετρήσεις των διεργασιών και τα αποτελέσματά τους
και τα κανάλια ανατροφοδότησης μέσα από ολόκληρο τον κύκλο ζωής του
λογισμικού.

Η SQM περιλαμβάνει τέσσερις υποκατηγορίες: τον σχεδιασμό της ποιότητας
λογισμικού, τη διασφάλιση της ποιότητας λογισμικού (Software Quality
Assurance — SQA), τον έλεγχο της ποιότητας λογισμικού (Software
Quality Control — SQC), και τη βελτίωση διεργασιών λογισμικού (Software
Process Improvement — SPI). Ο σχεδιασμός της ποιότητας λογισμικού
περιλαμβάνει τον καθορισμό των προτύπων ποιότητας που πρόκειται να
χρησιμοποιηθούν, τον καθορισμό συγκεκριμένων ποιοτικών στόχων και
την εκτίμηση της προσπάθειας και του χρονοδιαγράμματος των δραστηριοτήτων
ποιότητας του λογισμικού. Σε μερικές περιπτώσεις, ο σχεδιασμός της
ποιότητας λογισμικού περιλαμβάνει επίσης τον καθορισμό των διεργασιών
της ποιότητας λογισμικού που θα χρησιμοποιηθούν. Οι δραστηριότητες
SQA καθορίζουν και αξιολογούν την επάρκεια των διεργασιών λογισμικού
στο να παρέχουν στοιχεία που εδραιώνουν την εμπιστοσύνη ότι οι διεργασίες
λογισμικού είναι κατάλληλες και παράγουν προϊόντα λογισμικού κατάλληλης
ποιότητας για τους επιθυμητούς στόχους. Οι δραστηριότητες SQC εξετάζουν
συγκεκριμένα αντικείμενα του έργου (έγγραφα και εκτελέσιμα) για να
προσδιορίσουν εάν συμμορφώνονται με πρότυπα που καθορίστηκαν για το
έργο συμπεριλαμβανομένων των απαιτήσεων, περιορισμών, σχεδίων, συμβάσεων
και προγραμμάτων.
Ο SQC αξιολογεί τα ενδιάμεσα προϊόντα καθώς και τα τελικά.

Η τέταρτη κατηγορία SQM που ασχολείται με βελτίωση έχει πολλές ονομασίες
στη βιομηχανία του λογισμικού, συμπεριλαμβανομένων των SPI, βελτιώσεις
ποιότητας λογισμικού και διορθωτική και προληπτική δράση λογισμικού.
Οι δραστηριότητες σε αυτή την κατηγορία αποσκοπούν στη βελτίωση της
αποτελεσματικότητας, της αποδοτικότητας και άλλων χαρακτηριστικών
με απώτερο στόχο τη βελτίωση της ποιότητας λογισμικού. Παρά το γεγονός
ότι η SPI θα μπορούσε να συμπεριληφθεί σε οποιαδήποτε από τις τρεις
πρώτες κατηγορίες, ένας αυξανόμενος αριθμός από οργανισμούς κατατάσσουν
την SPI σε μια ξεχωριστή κατηγορία, η οποία μπορεί να επεκταθεί
σε πολλά έργα (βλ.
στο γνωστικό πεδίο [Διεργασίες τεχνολογίας λογισμικού](#softengpr)).

Οι διεργασίες ποιότητας λογισμικού αποτελούνται από εργασίες και τεχνικές
που υποδεικνύουν πώς τα σχέδια λογισμικού, όπως τα σχέδια διοίκησης
και ανάπτυξης του λογισμικού, διαχείρισης ποιότητας λογισμικού ή διαχείρισης
σχηματισμών  λογισμικού, υλοποιούνται και πόσο καλά τα ενδιάμεσα και
τελικά προϊόντα καλύπτουν τις καθορισμένες τους απαιτήσεις. Τα αποτελέσματα
από αυτές τις εργασίες συγκεντρώνονται σε αναφορές για τη διαχείριση
προτού πραγματοποιηθεί μια διορθωτική ενέργεια.
Η διαχείριση μιας διεργασίας SQM είναι επιφορτισμένη με την ευθύνη
της διασφάλισης ότι τα αποτελέσματα αυτών των εκθέσεων είναι ακριβή.

Η διαχείριση του κινδύνου μπορεί επίσης να παίξει ένα πολύ σημαντικό
ρόλο στην παράδοση ποιοτικού λογισμικού. Η ενσωμάτωση πειθαρχημένων
τεχνικών ανάλυσης και διαχείρισης κινδύνου στις διεργασίες του κύκλου
ζωής του λογισμικού μπορεί να βοηθήσει τη βελτίωση της ποιότητας του
προϊόντος (βλ.
στο γνωστικό πεδίο Διοίκηση τεχνολογίας λογισμικού softengmng, για σχετικό υλικό
με τη [Διαχείριση κινδύνου](#risk-mng)).

### Διασφάλιση ποιότητας λογισμικού

Για να διορθώσουμε μια ευρέως διαδεδομένη λανθασμένη αντίληψη, η διασφάλιση
ποιότητας λογισμικού δεν είναι ο έλεγχος. Η διασφάλιση ποιότητας λογισμικού
(SQA) είναι ένα σύνολο από δραστηριότητες που καθορίζουν και αξιολογούν
την επάρκεια των διεργασιών λογισμικού ώστε να παρέχουν στοιχεία που
εδραιώνουν εμπιστοσύνη ότι οι διεργασίες λογισμικού είναι κατάλληλες
και παράγουν προϊόντα λογισμικού κατάλληλης ποιότητας για τους προβλεπόμενους
σκοπούς. Ένα βασικό χαρακτηριστικό της SQA είναι η αντικειμενικότητα
της λειτουργίας SQA σε σχέση με το έργο. Η λειτουργία SQA μπορεί επίσης
να είναι οργανωσιακά ανεξάρτητη από το έργο, δηλαδή από τεχνικές,
διοικητικές και οικονομικές πιέσεις του έργου.
Η SQA έχει δύο όψεις: η διασφάλιση προϊόντος και η διασφάλιση διεργασίας,
οι οποίες αναλύονται περαιτέρω στη παράγραφο [Επιθεωρήσεις και έλεγχοι](#reviews-audits).

Το σχέδιο ποιότητας λογισμικού, το οποίο σε μερικούς τομείς της βιομηχανίας
αναφέρεται ως το σχέδιο διασφάλισης ποιότητας λογισμικού, καθορίζει
τις δραστηριότητες και τις εργασίες που υλοποιούνται για να εξασφαλίσουν
ότι το λογισμικό που αναπτύχθηκε για το συγκεκριμένο προϊόν πληροί
τις καθορισμένες απαιτήσεις του έργου και τις ανάγκες των χρηστών
μέσα στο πλαίσιο των περιορισμών του κόστους και του χρονοδιαγράμματος
και είναι ανάλογο με τον κίνδυνο του έργου.
Η σχέδιο SQA πρώτα εξασφαλίζει ότι οι στόχοι ποιότητας είναι σαφώς
καθορισμένοι και κατανοητοί.

Οι δραστηριότητες και οι εργασίες  ποιότητας του σχεδίου SQA καθορίζονται
με τα αντίστοιχα κόστη τους, τις απαιτήσεις πόρων, τους στόχους και
το χρονοδιάγραμμα σε σχέση με σχετικούς στόχους των σχεδίων διοίκησης
τεχνολογίας λογισμικού, ανάπτυξης λογισμικού και συντήρησης λογισμικού.
Το σχέδιο SQA πρέπει να είναι συνεπές με το σχέδιο διαχείρισης σχηματισμών
του λογισμικού (βλ. στο γνωστικό πεδίο [Διαχείριση σχηματισμών λογισμικού](#softconfigmng)).
Το σχέδιο SQA εντοπίζει έγγραφα, πρότυπα, πρακτικές και συμβάσεις
που διέπουν το έργο καθώς και το πώς αυτά τα αντικείμενα ελέγχονται
και παρακολουθούνται, με σκοπό την εξασφάλιση της επάρκειας και της
συμμόρφωσης. Το σχέδιο SQA επίσης εντοπίζει μέτρα, στατιστικές τεχνικές,
διαδικασίες για αναφορές προβλημάτων και διορθωτικές ενέργειες σχετικά
με αυτά, πόρους όπως εργαλεία, τεχνικές και μεθοδολογίες καθώς και
ασφάλεια για τα φυσικά μέσα, κατάρτιση και αναφορές και τεκμηρίωση
της SQA. Επιπλέον, το σχέδιο SQA καλύπτει τις δραστηριότητες διασφάλισης
ποιότητας λογισμικού για οποιοδήποτε άλλο τύπο δραστηριότητας που
περιγράφεται στα σχέδια λογισμικού, όπως  η προμήθεια του λογισμικού
για το έργο, εγκατάσταση εμπορικού λογισμικού «από το ράφι» (Commercial
Off-the-Shelf Software — COTS) και παροχή υπηρεσιών μετά την παράδοση
του λογισμικού.
Μπορεί ακόμη να περιλαμβάνει κριτήρια αποδοχής καθώς και αναφορές
και δραστηριότητες διαχείρισης που είναι κρίσιμες για την ποιότητα
του λογισμικού.

### Επαλήθευση και επικύρωση {#v-v}


Ο σκοπός της επαλήθευσης και επικύρωσης είναι να βοηθήσει τον οργανισμό
ανάπτυξης να δομήσει την ποιότητα στο σύστημα κατά τη διάρκεια του
κύκλου ζωής του. Οι διεργασίες επαλήθευσης και επικύρωσης παρέχουν
μια αντικειμενική εκτίμηση των προϊόντων και διεργασιών κατά τη διάρκεια
του κύκλου ζωής. Αυτή η εκτίμηση υποδεικνύει εάν οι απαιτήσεις είναι
ορθές, πλήρεις, ακριβείς, συνεπείς και ελέγξιμες.
Οι διεργασίες επαλήθευσης και επικύρωσης καθορίζουν εάν τα προϊόντα
ανάπτυξης μιας δεδομένης δραστηριότητας συμμορφώνονται με τις απαιτήσεις
αυτής της δραστηριότητας και εάν το προϊόν ικανοποιεί το προβλεπόμενο
σκοπό χρήσης του και τις ανάγκες του χρήστη.

Η επαλήθευση είναι μια προσπάθεια να εξασφαλίσουμε ότι το προϊόν είναι
δομημένο ορθά, με την έννοια του ότι τα παραγόμενα προϊόντα μιας δραστηριότητας
πληρούν τις προδιαγραφές που τους ανατέθηκαν σε προηγούμενες δραστηριότητες.
Η επικύρωση είναι μια προσπάθεια να διασφαλίσουμε ότι το σωστό προϊόν
είναι δομημένο με την έννοια του ότι το προϊόν πληροί το συγκεκριμένο
σκοπό για τον οποίο δημιουργήθηκε. Τόσο η διεργασία επαλήθευσης όσο
και η διεργασία επικύρωσης ξεκινούν νωρίς στη φάση ανάπτυξης ή συντήρησης.
Παρέχουν μια εξέταση των βασικών χαρακτηριστικών του προϊόντος σε
σχέση τόσο με τον άμεσο προκάτοχο του προϊόντος όσο και με τις προδιαγραφές
που πρέπει να πληρούνται.
Ο σκοπός της διαμόρφωσης σχεδίου επαλήθευσης και επικύρωσης είναι
να διασφαλίσει ότι κάθε πόρος, ρόλος και ευθύνη είναι σαφώς κατανεμημένα.
Τα τελικά αρχεία του σχεδίου επαλήθευσης και επικύρωσης περιγράφουν
τους διάφορους πόρους, τους ρόλους  τους και τις δραστηριότητές τους,
καθώς και τις τεχνικές και τα εργαλεία που πρόκειται να χρησιμοποιηθούν.
Η κατανόηση των διάφορων σκοπών κάθε δραστηριότητας επαλήθευσης και
επικύρωσης συμβάλλει στον προσεκτικό σχεδιασμό των τεχνικών και των
πόρων που χρειάζονται για να εκπληρώσουν τους σκοπούς τους.
Το σχέδιο επίσης ασχολείται με τη διαχείριση, την επικοινωνία, τις
πολιτικές και τις διεργασίες των δραστηριοτήτων επαλήθευσης και επικύρωσης
και την αλληλεπίδρασή τους, καθώς και τις απαιτήσεις αναφορών σφαλμάτων
και τεκμηρίωσης.

### Επιθεωρήσεις και έλεγχοι {#reviews-audits}

Οι διεργασίες επιθεωρήσεων και ελέγχων ορίζονται σε αδρές γραμμές
ως η στατική, με την έννοια ότι κανένα πρόγραμμα ή μοντέλο λογισμικού
δεν εκτελείται, εξέταση των αντικειμένων της τεχνολογίας λογισμικού,
λαμβάνοντας υπόψη τα πρότυπα που έχουν οριστεί από τον οργανισμό ή
το έργο για τα αντικείμενα αυτά.  Μπορούμε να διακρίνουμε διαφορετικούς
τύπους επιθεωρήσεων και ελέγχων ανάλογα με τον σκοπό τους, τα επίπεδα
ανεξαρτησίας, τα εργαλεία και τις τεχνικές, τους ρόλους αλλά και από
το αντικείμενο της δραστηριότητας. Οι έλεγχοι διασφάλισης του προϊόντος
και της διεργασίας διεξάγονται τυπικά από προσωπικό διασφάλισης ποιότητας
λογισμικού (SQA), το οποίο είναι ανεξάρτητο από ομάδες ανάπτυξης.
Οι διοικητικές επιθεωρήσεις διεξάγονται από το προσωπικό της οργανωσιακής
διοίκησης ή της διοίκησης του έργου.
Το τεχνικό προσωπικό διεξάγει τεχνικές επιθεωρήσεις.

  * Οι διοικητικές επιθεωρήσεις εξετάζουν τα πραγματικά αποτελέσματα
  του έργου σε σχέση με τα σχέδια.
  * Οι τεχνικές επιθεωρήσεις, συμπεριλαμβανομένων ελέγχων συμμόρφωσης,
  περιήγησης, ελέγχων «με το χέρι», εξετάζουν τα προϊόντα εργασίας της
  τεχνολογίας.
  * Έλεγχοι διασφάλισης διεργασιών.
  Οι δραστηριότητες διασφάλισης των διεργασιών SQA εξασφαλίζουν ότι
  οι διεργασίες που χρησιμοποιούνται για να αναπτύξουν, να εγκαταστήσουν,
  να λειτουργήσουν και να συντηρήσουν το λογισμικό συμμορφώνονται με
  τις συμβάσεις, με κάθε νόμο, κανόνα και κανονισμό που επιβλήθηκε και
  εξασφαλίζουν ότι είναι επαρκείς, αποδοτικές και αποτελεσματικές για
  το προβλεπόμενο σκοπό.
  * Έλεγχοι διασφάλισης προϊόντος. Οι δραστηριότητες διασφάλισης προϊόντος
  SQA εξασφαλίζουν την παροχή στοιχείων ότι τα προϊόντα λογισμικού και
  η σχετική τεκμηρίωση αναγνωρίζονται στις συμβάσεις και συμμορφώνονται
  με αυτές.
  Επίσης, διασφαλίζουν ότι η μη συμμόρφωση εντοπίζεται και αντιμετωπίζεται.

#### Διοικητικές επιθεωρήσεις

Ο σκοπός μιας διοικητικής επιθεώρησης είναι να παρακολουθήσει την
πρόοδο, να προσδιορίσει την κατάσταση των σχεδίων και των χρονοδιαγραμμάτων
και να εκτιμήσει την αποτελεσματικότητα των διεργασιών, εργαλείων
και τεχνικών διοίκησης. Οι διοικητικές επιθεωρήσεις συγκρίνουν τα
πραγματικά αποτελέσματα με τα σχέδια ώστε να καθορίζουν την κατάσταση
των έργων ή των προσπαθειών συντήρησης. Οι βασικές παράμετροι των
διοικητικών επιθεωρήσεων είναι το κόστος, το χρονοδιάγραμμα, το πεδίο
εφαρμογής και η ποιότητα του έργου.
Οι διοικητικές επιθεωρήσεις αξιολογούν τις αποφάσεις σχετικά με διορθωτικές
ενέργειες, αλλαγές στην κατανομή των πόρων ή αλλαγές στο πεδίο εφαρμογής
του έργου.

Εισροές σε διοικητικές επιθεωρήσεις μπορεί να περιλαμβάνουν αναφορές
ελέγχου, αναφορές προόδου, αναφορές επαλήθευσης και επικύρωσης και
σχέδια διαφόρων τύπων,  συμπεριλαμβανομένων μεταξύ άλλων της διαχείριση
κινδύνου, της διοίκησης έργου, της διαχείρισης σχηματισμών λογισμικού,
της ασφάλειας λογισμικού και της αξιολόγησης κινδύνου. (βλ.
στα γνωστικά πεδία [Διοίκησης τεχνολογίας λογισμικού](#softengmng) και [Διαχείρισης
σχηματισμών λογισμικού](#softconfigmng), για σχετικό υλικό).

#### Τεχνικές επιθεωρήσεις {#techn-reviews}

Ο σκοπός μιας τεχνικής επιθεώρησης είναι να αξιολογήσει ένα προϊόν
λογισμικού μέσω μιας ομάδας καταρτισμένου προσωπικού ώστε να προσδιορίσει
την καταλληλότητα του για την προβλεπόμενη χρήση του καθώς και να
αναγνωρίσει αποκλίσεις από προδιαγραφές και πρότυπα.
Παρέχει στη διοίκηση στοιχεία που επιβεβαιώνουν την τεχνική κατάσταση
του έργου.

Παρά το γεγονός ότι κάθε προϊόν εργασίας μπορεί να επιθεωρηθεί, οι
τεχνικές επιθεωρήσεις εκτελούνται στα βασικά προϊόντα εργασίας τεχνολογίας
λογισμικού των απαιτήσεων λογισμικού και του σχεδιασμού λογισμικού.

Ο σκοπός, οι ρόλοι, οι δραστηριότητες και κυρίως το επίπεδο της επισημότητας
ξεχωρίζουν διαφορετικούς τύπους τεχνικών επιθεωρήσεων μεταξύ τους.
Οι έλεγχοι συμμόρφωσης είναι οι πιο επίσημες, η περιήγηση λιγότερο
και οι επιθεωρήσεις ανά ζεύγη ή «με το χέρι» είναι οι λιγότερο επίσημες.

Παραδείγματα συγκεκριμένων ρόλων περιλαμβάνουν έναν λήπτη αποφάσεων,
δηλαδή τον καθοδηγητή λογισμικού, έναν αρχηγό επιθεωρήσεων, έναν καταγραφέα
και ελεγκτές, δηλαδή μέλη του τεχνικού προσωπικού που εξετάζουν τα
προϊόντα εργασίας. Οι επιθεωρήσεις επίσης διακρίνονται με βάση το
εάν οι συναντήσεις, πρόσωπο με πρόσωπο ή με ηλεκτρονικά μέσα, συμπεριλαμβάνονται
στη διεργασία. Σε ορισμένες μεθόδους επιθεώρησης καθένας από τους
ελεγκτές εξετάζει μόνος του προϊόντα εργασίας και στέλνει τα αποτελέσματα
σε ένα συντονιστή. Σε άλλες μεθόδους οι ελεγκτές συνεργάζονται σε
συνεδριάσεις.
Μια τεχνική επιθεώρηση μπορεί να απαιτεί οι υποχρεωτικές εισροές να
είναι στη θέση τους προκειμένου να προχωρήσει σε:

  * Δήλωση των στόχων,
  * συγκεκριμένο προϊόν λογισμικού,
  * συγκεκριμένο σχέδιο διοίκησης έργου,
  * λίστα θεμάτων συνδεδεμένη με αυτό το προϊόν και
  * διαδικασία τεχνικής επιθεώρησης.

Η ομάδα ακολουθεί την τεκμηριωμένη διεργασία επιθεώρησης.
Η τεχνική επιθεώρηση ολοκληρώνεται όταν όλες οι δραστηριότητες που
περιλαμβάνονται στην εξέταση έχουν ολοκληρωθεί.

Οι τεχνικές επιθεωρήσεις πηγαίου κώδικα μπορεί να περιλαμβάνουν μια
μεγάλη ποικιλία θεμάτων όπως η ανάλυση αλγορίθμων, η αξιοποίηση κρίσιμων
υπολογιστικών πόρων, η συμμόρφωση με πρότυπα κωδικοποίησης, δομή και
οργάνωση του κώδικα για ελεγξιμότητα καθώς και για ζητήματα κρίσιμης
ασφάλειας.

Να σημειώσουμε ότι οι τεχνικές αξιολογήσεις πηγαίου κώδικα ή σχεδιαστικών
μοντέλων όπως η UML (γνωστή και ως η Ενοποιημένη Γλώσσα Μοντελοποίησης)
ονομάζονται επίσης στατική ανάλυση (βλ.
ενότητα [Πρακτικές θεωρήσεις](#pract-consider-qual)).

#### Έλεγχοι συμμόρφωσης

«Ο σκοπός ενός ελέγχου συμμόρφωσης είναι να εντοπίσει και να αναγνωρίσει
ανωμαλίες σε ένα προϊόν λογισμικού».
Ορισμένοι σημαντικοί παράγοντες διαφοροποίησης των ελέγχων συμμόρφωσης,
που τις ξεχωρίζουν από άλλων τύπων τεχνικές επιθεωρήσεις είναι οι
ακόλουθοι:

  * Κανόνες. Οι έλεγχοι συμμόρφωσης είναι βασισμένοι στην εξέταση ενός
  προϊόντος εργασίας σε σχέση με ένα σύνολο κριτηρίων καθορισμένο από
  τον οργανισμό.
  Σύνολα κανόνων μπορούν να διαμορφωθούν για διαφορετικών τύπων προϊόντα
  εργασίας, όπως κανόνες για απαιτήσεις, περιγραφές αρχιτεκτονικής,
  πηγαίος κώδικας.
  * Δειγματοληψία.
  Σε αντίθεση με την προσπάθεια να εξετάσουμε κάθε λέξη και αριθμό σε
  ένα αρχείο, η διαδικασία έλεγχου συμμόρφωσης επιτρέπει στους ελεγκτές
  να αξιολογήσουν κάθε ορισμένο υποσύνολο (δείγμα) των αρχείων που βρίσκονται
  υπό επιθεώρηση.
  * Ομότιμο άτομο. Άτομα που κατέχουν θέσεις διοίκησης πάνω από τα μέλη
  της ομάδας έλεγχου συμμόρφωσης δεν συμμετέχουν στον έλεγχο συμμόρφωσης.
  Αυτή είναι μια βασική διαφορά μεταξύ της διοικητικής επιθεώρησης και
  της επιθεώρησης από ομότιμο άτομο.
  * Καθοδήγηση.
  Ένας αμερόληπτος μεσολαβητής που είναι εκπαιδευμένος σε τεχνικές έλεγχου
  συμμόρφωσης καθοδηγεί τις συναντήσεις έλεγχου συμμόρφωσης.
  * Συνάντηση.
  Η διαδικασία έλεγχου συμμόρφωσης περιλαμβάνει συναντήσεις, πρόσωπο
  με πρόσωπο ή με ηλεκτρονικά μέσα, που διεξάγονται από έναν μεσολαβητή
  σύμφωνα με μια επίσημη διαδικασία στην οποία τα μέλη της ομάδας έλεγχου
  συμμόρφωσης εκθέτουν τις ανωμαλίες που εντόπισαν και άλλα θέματα.

Οι έλεγχοι συμμόρφωσης λογισμικού περιλαμβάνουν πάντα τον συγγραφέα
ενός ενδιάμεσου ή τελικού προϊόντος, ενώ κάτι τέτοιο μπορεί να μην
ισχύει σε άλλες επιθεωρήσεις. Οι έλεγχοι συμμόρφωσης επίσης περιλαμβάνουν
έναν αρχηγό του έλεγχου συμμόρφωσης, έναν καταγραφέα, έναν  αναγνώστη
και μερικούς (δύο με πέντε) ελεγκτές. Τα μέλη μιας ομάδας έλεγχου
συμμόρφωσης μπορεί να κατέχουν διαφορετική εξειδίκευση, όπως εξειδίκευση
σχετικά με τον τομέα, σχετικά με τις μεθόδους σχεδιασμού λογισμικού
ή σχετικά με γλώσσες προγραμματισμού. Οι έλεγχοι συμμόρφωσης διεξάγονται
συνήθως σε ένα σχετικά μικρό μέρος του προϊόντος κάθε φορά (δείγματα).
Κάθε μέλος της ομάδας εξετάζει το προϊόν λογισμικού και άλλες εισροές
αξιολόγησης πριν από τη συνάντηση έλεγχου συμμόρφωσης, ίσως εφαρμόζοντας
μια αναλυτική τεχνική (βλ. παράγραφο [Έλεγχος](#testing-vv)) σε ένα μικρό τμήμα του
προϊόντος ή σε ολόκληρο το προϊόν, εστιάζοντας σε μια μόνο πτυχή,
όπως τις διεπαφές. Κατά τη διάρκεια του έλεγχου συμμόρφωσης, ο μεσολαβητής
επιβεβαιώνει ότι όλοι έχουν προετοιμαστεί για τον έλεγχο συμμόρφωσης
και διεξάγει τη συνεδρίαση. Ο καταγραφέας της επιθεώρησης καταγράφει
ανωμαλίες που εντοπίστηκαν. Ένα σύνολο κανόνων, με κριτήρια και ερωτήσεις
σχετικά με τα θέματα ενδιαφέροντος, είναι ένα εργαλείο που χρησιμοποιείται
συχνά σε έλεγχους συμμόρφωσης. Η λίστα που προκύπτει συχνά ταξινομεί
τις ανωμαλίες (βλ. παράγραφο [Χαρακτηρισμός σφαλμάτων](#charact-defect)) και επιθεωρείται
από την ομάδα ως προς την πληρότητα και την ακρίβειά της.
Η τελική απόφαση του έλεγχου συμμόρφωσης αντιστοιχεί σε μία από τις
ακόλουθες επιλογές:

1.
Αποδοχή με καθόλου ή, το πολύ, ήσσονος σημασίας επανεπεξεργασία.
2.
Αποδοχή με επαλήθευση επανεπεξεργασίας.
3.
Επανάληψη έλεγχου συμμόρφωσης.

#### Περιηγήσεις

 
Ο σκοπός μιας συστηματικής περιήγησης είναι να αξιολογήσει το προϊόν
λογισμικού.
Μια περιήγηση μπορεί να διεξαχθεί με απώτερο σκοπό τη μόρφωση ενός
κοινού σχετικά με ένα προϊόν λογισμικού.

Οι περιηγήσεις διαχωρίζονται από τους έλεγχους συμμόρφωσης. Η βασική
διαφορά μεταξύ αυτών είναι ότι ο συγγραφέας παρουσιάζει το προϊόν
εργασίας στους υπόλοιπους συμμετέχοντες της συνάντησης, πρόσωπο με
πρόσωπο ή με ηλεκτρικά μέσα. Σε αντίθεση με τους έλεγχους συμμόρφωσης,
οι συμμετέχοντες της συνάντησης μπορεί να μην έχουν αναγκαστικά δει
το προϊόν πριν την πραγματοποίηση της συνάντησης. Οι συναντήσεις μπορεί
να διεξαχθούν λιγότερο επίσημα. Ο συγγραφές αναλαμβάνει να εξηγήσει
και να παρουσιάσει το υλικό στους συμμετέχοντες και επιζητά ανατροφοδότηση.
Όπως στους έλεγχους συμμόρφωσης, οι περιηγήσεις μπορεί να διεξαχθούν
πάνω σε οποιουδήποτε τύπου προϊόν εργασίας συμπεριλαμβανομένων του
σχεδίου του έργου, των απαιτήσεων, του σχεδιασμού, του πηγαίου κώδικα
και αναφορών ελέγχου.

#### Έλεγχοι διασφάλισης διεργασίας και προϊόντος

Ο σκοπός του ελέγχου λογισμικού είναι να παρέχει μια ανεξάρτητη αξιολόγηση
της συμμόρφωσης των προϊόντων και διεργασιών λογισμικού με τους ισχύοντες
κανονισμούς, πρότυπα, κατευθυντήριες γραμμές, σχέδια και διαδικασίες.

Οι έλεγχοι διασφάλισης διεργασίας προσδιορίζουν την επάρκεια των σχεδίων,
των χρονοδιαγραμμάτων και των απαιτήσεων για την επίτευξη των στόχων.
Ο έλεγχος είναι μια επίσημα οργανωμένη δραστηριότητα με συμμετέχοντες
που κατέχουν συγκεκριμένους ρόλους, όπως ο διευθύνων ελεγκτής, ένας
άλλος ελεγκτής, ένας καταγραφέας ή ένας μυητή, και συμπεριλαμβανομένου
ενός εκπροσώπου του υπό έλεγχο οργανισμού.
Οι έλεγχοι εντοπίζουν περιπτώσεις μη συμμόρφωσης και παράγουν μια
αναφορά με την οποία απαιτούν από την ομάδα να αναλάβει διορθωτικές
ενέργειες.

Ενώ μπορεί να υπάρχουν πολλά επίσημα ονόματα για τις επιθεωρήσεις
και τους ελέγχους, το σημαντικό σημείο είναι ότι μπορεί να συμβούν
σε οποιοδήποτε προϊόν και σε οποιαδήποτε φάση της διεργασίας ανάπτυξης
ή συντήρησης.

## Πρακτικές θεωρήσεις {#pract-consider-qual}

### Απαιτήσεις ποιότητας λογισμικού {#quality-req}

#### Παράγοντες επιρροής

Διάφοροι παράγοντες επηρεάζουν το σχεδιασμό, τη διαχείριση και την
επιλογή δραστηριοτήτων και τεχνικών SQM, ανάμεσα στους οποίους συμπεριλαμβάνονται:

  * Ο τομέας του συστήματος στο οποίο ανήκει το λογισμικό.
  Οι λειτουργίες του συστήματος θα μπορούσαν να είναι κρίσιμης ασφάλειας,
  κρίσιμης αποστολής, κρίσιμης επιχειρηματικότητας, κρίσιμης προστασίας.
  * Το φυσικό περιβάλλον στο οποίο το σύστημα λογισμικού ανήκει.
  * Οι απαιτήσεις συστήματος και λογισμικού σχετικά με την λειτουργικότητα,
  τι κάνει το σύστημα, και την ποιότητα, πόσο καλά εκτελεί το σύστημα
  τις λειτουργίες του.
  * Τα εμπορικά (εξωτερικά) ή πρότυπα (εσωτερικά) συστατικά που πρόκειται
  να χρησιμοποιηθούν στο σύστημα.
  * Τα συγκεκριμένα ισχύοντα πρότυπα τεχνολογίας λογισμικού.
  * Οι μέθοδοι και τα εργαλεία λογισμικού που πρόκειται να χρησιμοποιηθούν
  για την ανάπτυξη και τη συντήρηση καθώς και την αξιολόγηση και τη
  βελτίωση της ποιότητας.
  * Ο προϋπολογισμός, το προσωπικό, η οργάνωση του έργου, τα σχέδια
  και το χρονοδιάγραμμα όλων των διεργασιών.
  * Οι προβλεπόμενοι χρήστες αλλά και οι προβλεπόμενες χρήσεις του
 συστήματος.
  * Το επίπεδο ακεραιότητας του συστήματος.

 
Η πληροφόρηση σχετικά με αυτούς τους παράγοντες επηρεάζει τον τρόπο
με τον οποίο οι διεργασίες SQM οργανώνονται και τεκμηριώνονται, το
πώς συγκεκριμένες δραστηριότητες SQM επιλέγονται, τι πόροι χρειάζονται
και ποιοί από αυτούς τους πόρους επιβάλλουν περιορισμούς στις προσπάθειες.

#### Αξιοπιστία

Σε περιπτώσεις που η αποτυχία του συστήματος μπορεί να έχει σοβαρές
συνέπειες, η συνολική αξιοπιστία υλικού, λογισμικού, ανθρώπινη ή λειτουργική
είναι η βασική απαίτηση ποιότητας πέρα και πάνω από τη βασική λειτουργικότητα.
Αυτό ισχύει για τους ακόλουθους λόγους: οι αποτυχίες συστήματος επηρεάζουν
ένα μεγάλο αριθμό ανθρώπων, οι χρήστες συχνά απορρίπτουν συστήματα
που είναι αναξιόπιστα, μη ασφαλή ή επισφαλή, τα κόστη αποτυχίας του
συστήματος μπορεί να είναι τεράστια και αναξιόπιστα συστήματα μπορεί
να προκαλέσουν απώλεια πληροφορίας. Η αξιοπιστία συστήματος και λογισμικού
περιλαμβάνει χαρακτηριστικά όπως διαθεσιμότητα, ασφάλεια και προστασία.
Κατά τη διαδικασία ανάπτυξης αξιόπιστου λογισμικού, εργαλεία και τεχνικές
μπορούν να εφαρμοσθούν για τη μείωση του κινδύνου διάχυσης λαθών στα
ενδιάμεσα παραδοτέα ή στο τελικό προϊόν λογισμικού. Οι διεργασίες,
οι τεχνικές, οι μέθοδοι και τα εργαλεία που χρησιμοποιούνται για την
επαλήθευση, την επικύρωση και τον έλεγχο εντοπίζουν λάθη που επηρεάζουν
την αξιοπιστία το νωρίτερο δυνατό στον κύκλο ζωής του προϊόντος λογισμικού.
Επιπροσθέτως, ίσως να χρειαστεί να τοποθετηθούν μηχανισμοί στο λογισμικό
για να το προφυλάσσουν από εξωτερικές επιθέσεις και να αντέχουν σφάλματα.

 

#### Επίπεδα ακεραιότητας λογισμικού

Ο προσδιορισμός των επιπέδων ακεραιότητας είναι μια μέθοδος διαχείρισης
κινδύνου.

Τα επίπεδα ακεραιότητας λογισμικού είναι μια σειρά από τιμές που αντιπροσωπεύουν
την πολυπλοκότητα του λογισμικού, την κρισιμότητα, τον κίνδυνο, το
επίπεδο ασφάλειας, το επίπεδο προστασίας, την επιθυμητή απόδοση, την
αξιοπιστία ή άλλα μοναδικά ως προς το έργο χαρακτηριστικά που καθορίζουν
τη σημαντικότητα του λογισμικού για το χρήστη και τον αγοραστή. Τα
χαρακτηριστικά που χρησιμοποιούνται για να προσδιορίσουν το επίπεδο
ακεραιότητας του λογισμικού ποικίλλουν ανάλογα με τη σκοπούμενη εφαρμογή
και τη χρήση του συστήματος.
Το λογισμικό είναι ένα μέρος του συστήματος και το επίπεδο ακεραιότητάς
του προσδιορίζεται ως ένα μέρος του συστήματος.

Τα προκαθορισμένα επίπεδα ακεραιότητας του λογισμικού μπορεί να αλλάξουν
καθώς το λογισμικό εξελίσσεται. Τα σχεδιαστικά χαρακτηριστικά, τα
χαρακτηριστικά κωδικοποίησης, τα διαδικαστικά και τα τεχνολογικά χαρακτηριστικά 
που εφαρμόζονται στο σύστημα ή στο λογισμικό μπορούν να αυξήσουν ή
να μειώσουν τα προκαθορισμένα επίπεδα ακεραιότητας λογισμικού.
Τα επίπεδα ακεραιότητας λογισμικού που καθορίστηκαν για ένα έργο προκύπτουν
από συμφωνίες μεταξύ του αγοραστή, του προμηθευτή, του προγραμματιστή
και ανεξάρτητων αρχών διασφάλισης.

Ένα σύστημα επιπέδου ακεραιότητας λογισμικού είναι ένα εργαλείο που
χρησιμοποιείται για τον προσδιορισμό τον επιπέδων ακεραιότητας λογισμικού.
«Τα επίπεδα ακεραιότητας μπορούν να εφαρμοσθούν κατά τη διάρκεια της
ανάπτυξης ώστε να κατανείμουν επιπρόσθετα εγχειρήματα επαλήθευσης
και επικύρωσης σε υψηλής ακεραιότητας συστατικά».

### Χαρακτηρισμός σφαλμάτων {#charact-defect}

Οι τεχνικές αξιολόγησης της ποιότητας λογισμικού, δηλαδή ο έλεγχος
ποιότητας λογισμικού, εντοπίζουν σφάλματα, βλάβες και αποτυχίες. Ο
χαρακτηρισμός αυτών των τεχνικών οδηγεί στην κατανόηση του προϊόντος,
διευκολύνει διορθώσεις στη διεργασία ή στο προϊόν και πληροφορεί τη
διοίκηση και τα ενδιαφερόμενα μέρη για την κατάσταση της διεργασίας
ή του προϊόντος. Υπάρχουν πολλές ταξινομίες και ενώ έχουν πραγματοποιηθεί
πολλές προσπάθειες για την επίτευξη ομοφωνίας, η βιβλιογραφία υποδεικνύει
ότι σχετικά λίγες χρησιμοποιούνται.
Ο χαρακτηρισμός των σφαλμάτων χρησιμοποιείται επίσης σε ελέγχους και
επιθεωρήσεις, με τον αρχηγό της επιθεώρησης συχνά να παρουσιάζει μια
λίστα από θέματα που παρέχονται από μέλη της ομάδας για συζήτηση σε
κάποια συνάντηση επιθεώρησης.

Καθώς νέες σχεδιαστικές μέθοδοι και γλώσσες εξελίσσονται, παράλληλα
με προόδους στις συνολικές τεχνολογίες λογισμικού,  νέες κατηγορίες
σφαλμάτων εμφανίζονται και απαιτείται μεγάλη προσπάθεια για να ερμηνευτούν
προηγούμενα καθορισμένες κατηγορίες. Κατά τον εντοπισμό σφαλμάτων,
ο μηχανικός λογισμικού ενδιαφέρεται όχι μόνο για τον αριθμό των σφαλμάτων
αλλά και για τον τύπο τους. Η πληροφορία από μόνη της, χωρίς κάποια
κατηγοριοποίηση, μπορεί να μην είναι επαρκής για να αναγνωρίσει τα
βαθύτερα αίτια των σφαλμάτων. Συγκεκριμένοι τύποι προβλημάτων χρειάζεται
να ομαδοποιηθούν ώστε να αναγνωρισθούν τάσεις με το πέρασμα του χρόνου.
Η ουσία είναι να καθιερωθεί μια ταξινομία σφαλμάτων που έχει νόημα
στον οργανισμό και στους μηχανικούς λογισμικού.

Οι δραστηριότητες ελέγχου ποιότητας λογισμικού ανακαλύπτουν πληροφορίες
σε όλα τα στάδια της ανάπτυξης και συντήρησης του λογισμικού. Σε μερικές
περιπτώσεις, η λέξη «σφαλμάτων» (defect) είναι πολυσήμαντη και αναφέρεται
σε διαφορετικούς τύπους ανωμαλιών. Όμως, διαφορετικές κουλτούρες και
πρότυπα μηχανικής λογισμικού μπορεί να χρησιμοποιήσουν κάπως διαφορετικές
έννοιες γι'  αυτούς τους όρους.
Η ποικιλία αυτών των όρων παρακινεί αυτή την παράγραφο να παρέχει
ένα ευρέως χρησιμοποιούμενο σύνολο ορισμών:

  * Υπολογιστικό λάθος: «η διαφορά μεταξύ μιας υπολογισμένης, παρατηρημένης
  και μετρημένης αξίας ή κατάστασης και της πραγματικής, καθορισμένης
  ή θεωρητικά σωστής αξίας η κατάστασης».
  * Λάθος: «Μια ανθρώπινη δράση που παράγει ένα λανθασμένο αποτέλεσμα».
  Ένα ολίσθημα ή ένα λάθος που κάνει ένα άτομο.
  Καλείται επίσης και ως ανθρώπινο σφάλμα.
  * Ελάττωμα: Μια «ατέλεια ή ανεπάρκεια σε ένα προϊόν έργου το οποίο
  δεν πληροί τις απαιτήσεις ή τις προδιαγραφές και χρειάζεται είτε να
  επιδιορθωθεί είτε να αντικατασταθεί».
  Ένα ελάττωμα προκαλείται από ένα άτομο που διαπράττει ένα σφάλμα.
  * Βλάβη: Ένα ελάττωμα στον πηγαίο κώδικα. Ένα «λανθασμένο βήμα,
  διεργασία ή ορισμός δεδομένων σε υπολογιστικό πρόγραμμα». Η κωδικοποίηση
  ενός ανθρώπινου λάθους στον πηγαίο κώδικα.
  Η βλάβη είναι το επίσημο όνομα ενός σφάλματος.
  * Αποτυχία: Ένα «γεγονός στο οποίο ένα σύστημα ή ένα συστατικό του
  συστήματος δεν εκτελεί μια απαιτούμενη λειτουργία μέσα εντός συγκεκριμένων
  ορίων».
  Μια αποτυχία παράγεται όταν ο επεξεργαστής συναντά μια βλάβη υπό συγκεκριμένες
  συνθήκες.

Χρησιμοποιώντας αυτούς τους ορισμούς, τρεις ευρέως χρησιμοποιημένες
μετρήσεις ποιότητας λογισμικού είναι η πυκνότητα των σφαλμάτων (ο
αριθμός των σφαλμάτων ανά μονάδα μεγέθους σε αρχεία), η πυκνότητα
των ατελειών (ο αριθμός των βλαβών για κάθε χίλιες γραμμές κώδικα)
και η συχνότητα αστοχιών (αποτυχίες για κάθε ώρα χρήσης ή για κάθε
ώρα ελέγχου).
Μοντέλα αξιοπιστίας δομούνται από δεδομένα αποτυχιών που συλλέχθηκαν
κατά τη διάρκεια ελέγχων λογισμικού ή από τη λειτουργία λογισμικού
σε χρήση, και ως εκ τούτου μπορούν να χρησιμοποιηθούν για να εκτιμήσουν
την πιθανότητα για μελλοντικές αποτυχίες και να βοηθήσουν σε αποφάσεις
για το πότε να σταματήσουν οι έλεγχοι.

Μια πιθανή δράση που προκύπτει από ευρήματα της SQM είναι η αφαίρεση
των σφαλμάτων από το υπό εξέταση προϊόν, όπως η εύρεση και επιδιόρθωση
σφαλμάτων και η δημιουργία νέας κατασκευής. Άλλες δραστηριότητες επιδιώκουν
να εξαλείψουν τις αιτίες των σφαλμάτων, για παράδειγμα ανάλυση ριζικών
αιτιών  (root cause analysis — RCA). Οι δραστηριότητες RCA
περιλαμβάνουν την ανάλυση και τη σύνοψη των ευρημάτων με σκοπό να
βρεθούν οι ριζικές αιτίες και τη χρήση τεχνικών μέτρησης για τη βελτίωση
του προϊόντος και τη διεργασία καθώς και να εντοπίσουν τα σφάλματα
και την αφαίρεσή τους.
Η βελτίωση της διεργασίας συζητείται κυρίως στο γνωστικό πεδίο Διεργασίες
τεχνολογίας λογισμικού, με την διεργασία SQM να είναι μια πηγή πληροφόρησης.

Δεδομένα σχετικά με ανεπάρκειες και σφάλματα, που εντοπίζονται από
τεχνικές ελέγχου ποιότητας λογισμικού, μπορεί να χαθούν αν δεν καταγραφούν.
Για μερικές τεχνικές, όπως οι τεχνικές επιθεώρησης, έλεγχου, έλεγχου
συμμόρφωσης, οι καταγραφείς είναι παρόντες για να καταγράψουν τέτοιες
πληροφορίες μαζί με θέματα και αποφάσεις.  Όταν χρησιμοποιούνται αυτοματοποιημένα
εργαλεία (βλ. ενότητα [Εργαλεία ποιότητας λογισμικού](#tools-quality)), το αποτέλεσμα
του εργαλείου μπορεί να παρέχει τις πληροφορίες σχετικά με τα σφάλματα.
Οι αναφορές σχετικά με τα σφάλματα παρέχονται στη διοίκηση του οργανισμού.

### Τεχνικές διαχείρισης ποιότητας λογισμικού {#techn-mng-quality}

Οι τεχνικές ελέγχου της ποιότητας λογισμικού μπορούν να κατηγοριοποιηθούν
με πολλούς τρόπους, αλλά μια απλή προσέγγιση χρησιμοποιεί μόνο δύο
κατηγορίες: τις στατικές και τις δυναμικές. Οι δυναμικές τεχνικές
περιλαμβάνουν την εκτέλεση του λογισμικού.
Οι στατικές τεχνικές εμπεριέχουν την ανάλυση των αρχείων και του πηγαίου
κώδικα αλλά όχι την εκτέλεση του λογισμικού.

#### Στατικές τεχνικές {#static-tech}


Οι στατικές τεχνικές εξετάζουν την τεκμηρίωση του λογισμικού, συμπεριλαμβανομένων
των απαιτήσεων, των προδιαγραφών διεπαφής, των σχεδίων και των μοντέλων,
και τον πηγαίο κώδικα του λογισμικού χωρίς να τον εκτελούν. Υπάρχουν
πολλά εργαλεία και τεχνικές για την στατική εξέταση των προϊόντων
εργασίας λογισμικού (βλ. παράγραφο [Τεχνικές επιθεωρήσεις](#techn-reviews)).
Επιπροσθέτως, εργαλεία που αναλύουν τη ροή ελέγχου του πηγαίου κώδικα
και την αναζήτηση νεκρού κώδικα θεωρούνται εργαλεία στατικής ανάλυσης
διότι δεν εμπεριέχουν εκτέλεση του κώδικα του λογισμικού.

Άλλοι, πιο επίσημοι, τύποι αναλυτικών τεχνικών είναι γνωστοί ως οι
επίσημες μέθοδοι. Χρησιμοποιούνται για να επαληθεύσουν τις απαιτήσεις
και τα σχέδια λογισμικού. Έχουν χρησιμοποιηθεί κυρίως για την επαλήθευση
των καίριων σημείων των κρίσιμων συστημάτων, όπως συγκεκριμένες απαιτήσεις
ασφάλειας και προστασίας. (βλ.παράγραφο
[Τυπικές μέθοδοι](#formal-meth) στο γνωστικό πεδίο Μοντέλα και μέθοδοι της τεχνολογίας
λογισμικού).


#### Δυναμικές τεχνικές {#dunamic-tech}

Οι δυναμικές τεχνικές εμπεριέχουν την εκτέλεση κώδικα του λογισμικού.
Διαφορετικά είδη δυναμικών τεχνικών εκτελούνται κατά τη διάρκεια της
ανάπτυξης και της συντήρησης του λογισμικού. Σε γενικότερες γραμμές,
αυτές είναι τεχνικές ελέγχου, αλλά τεχνικές όπως η προσομοίωση και
η ανάλυση μοντέλου μπορούν να θεωρηθούν δυναμικές (βλ. στο γνωστικό
πεδίο [Μοντέλα και μέθοδοι της τεχνολογίας λογισμικού](#modmethdssofteng)). Η ανάγνωση
κώδικα θεωρείται μια στατική τεχνική, αλλά οι έμπειροι μηχανικοί λογισμικού
μπορεί να εκτελέσουν τον κώδικα καθώς τον διαβάζουν. Η ανάγνωση κώδικα
μπορεί να χρησιμοποιήσει δυναμικές τεχνικές.
Αυτή η διαφορά στην κατηγοριοποίηση υποδεικνύει ότι άτομα με διαφορετικούς
ρόλους και εμπειρία στον οργανισμό μπορεί να κατανοήσουν και να εφαρμόσουν
αυτές τις τεχνικές διαφορετικά.
Διαφορετικές ομάδες μπορεί να εκτελέσουν έλεγχο κατά τη διάρκεια της
ανάπτυξης λογισμικού, συμπεριλαμβανομένων ομάδων ανεξαρτήτων από την
ομάδα ανάπτυξης.
Το γνωστικό πεδίο Έλεγχος λογισμικού είναι αφιερωμένο εξ ολοκλήρου
σε αυτό το θέμα.


#### Έλεγχος {#testing-vv}

Δύο τύποι ελέγχων ενδέχεται να εμπίπτουν στην επαλήθευση και επικύρωση
λόγω της ευθύνης τους για την ποιότητα των υλικών που χρησιμοποιήθηκαν
στο έργο:

  * Η αξιολόγηση και οι έλεγχοι των εργαλείων που αναμένεται να χρησιμοποιηθούν
  στο έργο.
  * Οι έλεγχοι συμμόρφωσης (ή η επιθεώρηση των έλεγχων συμμόρφωσης)
  των τμημάτων και των προϊόντων εμπορικού λογισμικού «από το ράφι»
  (Commercial Off-the-Shelf Software — COTS)  που αναμένεται να χρησιμοποιηθούν
  στο έργο.

Μερικές φορές ένας ανεξάρτητος οργανισμός μπορεί να αναλάβει να εκτελέσει
έλεγχο ή να παρακολουθήσει τη διεργασία ελέγχου επαλήθευσης και επικύρωσης
και να κληθεί να αξιολογήσει τον ίδιο τον έλεγχο: επάρκεια σχεδίων,
διαδικασιών και διεργασιών κα επάρκεια και ακρίβεια αποτελεσμάτων.

Το τρίτο μέρος δεν είναι ο προγραμματιστής ούτε σχετίζεται με την
ανάπτυξη του προϊόντος. Αντιθέτως, το τρίτο μέρος είναι μια ανεξάρτητη
υπηρεσία, συνήθως διαπιστευμένη από κάποιο φορέα της εξουσίας. Ο σκοπός
της είναι να ελέγξει ένα προϊόν για συμμόρφωση με ένα συγκεκριμένο
σύνολο απαιτήσεων (βλ.
στο γνωστικό πεδίο [Έλεγχος λογισμικού](#softtesting)).


## Εργαλεία ποιότητας λογισμικού {#tools-quality}


Εργαλεία ποιότητας λογισμικού περιλαμβάνουν εργαλεία στατικής και
δυναμικής ανάλυσης. Τα εργαλεία στατικής ανάλυσης δέχονται ως είσοδο
πηγαίο κώδικα, εκτελούν συντακτική και σημασιολογική ανάλυση χωρίς
να εκτελεσθεί ο κώδικας και παρουσιάζουν τα αποτελέσματα στους χρήστες.
Υπάρχει μια μεγάλη ποικιλία σχετικά με το βάθος, την πληρότητα και
το πεδίο εφαρμογής των εργαλείων στατικής ανάλυσης που μπορούν να
εφαρμοστούν σε τεχνουργήματα συμπεριλαμβανομένων μοντέλων, επιπρόσθετα
στον πηγαίο κώδικα.

Κατηγορίες εργαλείων στατικής ανάλυσης περιλαμβάνουν τα ακόλουθα:

  * Εργαλεία που διευκολύνουν και εν μέρει αυτοματοποιούν τις επιθεωρήσεις
  και τους ελέγχους συμμόρφωσης των αρχείων και του κώδικα. Αυτά τα
  εργαλεία μπορούν να διευθύνουν την εργασία διαφορετικών συμμετεχόντων
  με σκοπό να αυτοματοποιήσουν μερικώς και να ελέγξουν μια διαδικασία
  επιθεώρησης.
  Επιτρέπουν στους χρήστες να εισάγουν σφάλματα που εντοπίστηκαν κατά
  τη διάρκεια επιθεωρήσεων και ελέγχων συμμόρφωσης για αργότερη αφαίρεση.
  * Μερικά εργαλεία βοηθούν τους οργανισμούς να εκτελέσουν ανάλυση ασφάλειας
  κινδύνου του λογισμικού.
  Αυτά τα εργαλεία παρέχουν για παράδειγμα αυτοματοποιημένη υποστήριξη
  για την ανάλυση του τρόπου αποτυχίας και τις επιπτώσεις (Failure
  Mode and Effects Analysis — FMEA) καθώς και η ανάλυση του δέντρου
  βλαβών (Fault Tree Analysis — FTA).
  * Τα εργαλεία που υποστηρίζουν τον εντοπισμό των προβλημάτων λογισμικού
  παρέχουν για την είσοδο ανωμαλιών που ανακαλύφθηκαν κατά τη διάρκεια
  του ελέγχου του λογισμικού και της μετέπειτα ανάλυσης, διάθεσης και
  επίλυσης.
  Μερικά εργαλεία περιλαμβάνουν υποστήριξη για εργασιακή ροή κα για
  τον προσδιορισμό της επίλυσης προβλημάτων.
  * Εργαλεία που αναλύουν δεδομένα που λαμβάνονται από περιβάλλοντα
  τεχνολογίας λογισμικού και ελέγχου λογισμικού και παράγουν οθόνες
  οπτικής απεικόνισης ποσοτικοποιημένων δεδομένων με τη μορφή γραφημάτων,
  διαγραμμάτων και πινάκων. Αυτά τα εργαλεία μερικές φορές περιλαμβάνουν
  και τη λειτουργικότητα να εκτελέσουν στατική ανάλυση σε σύνολα δεδομένων
  με σκοπό τη διάκριση τάσεων και την πραγματοποίηση προβλέψεων.
  Μερικά από αυτά τα εργαλεία παρέχουν ποσοστά σφαλμάτων και έκχυσης
  αφαίρεσης αυτών,  πυκνότητες σφαλμάτων, αποδόσεις, διανομή έκχυσης
  και αφαίρεσης  σφαλμάτων για κάθε μια από τις φάσεις του κύκλου
ζωής.
