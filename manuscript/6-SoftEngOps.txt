{mainmatter}

# Λειτουργίες Μηχανικής Λογισμικού {#softengops}

## Ακρωνύμια

|API    |Application Programming Interface  |
|ATDD   |Acceptance Test Driven Development |
|CD     |Continuous Delivery                |
|CI     |Continuous Integration             |
|CPU    |Central Processing Unit            |
|CONOPS |Concepts of Operations             |
|DBMS   |Database Management System         |
|IaC    |Infrastructure as Code             |
|IaaS   |Infrastructure as a Service        |
|IT     |Information technology             |
|ITIL   |IT Infrastructure Library          |
|KA     |Knowledge Area                     |
|MR     |Modification request               |
|MVP    |Minimum Viable Product             |
|PaaS   |Platform as a Service              |
|PR     |Problem Report                     |
|QA     |Quality Assurance                  |
|SaaS   |Software as a Service              |
|SLAs   |Service-Level Agreements           |
|TDD    |Test Driven Development            |

## Εισαγωγή

Οι λειτουργίες μηχανικής λογισμικού αναφέρονται στο σύνολο των δραστηριοτήτων και 
εργασιών που είναι απαραίτητες για την ανάπτυξη, λειτουργία και υποστήριξη μίας 
εφαρμογής ή ενός συστήματος λογισμικού, διατηρώντας παράλληλα την ακεραιότητα και 
τη σταθερότητά του. Αυτές οι δραστηριότητες περιλαμβάνουν την ανάπτυξη και τη 
διαμόρφωση του λογισμικού στα στοχευμένα επιχειρησιακά περιβάλλοντα και την 
παρακολούθηση και διαχείριση της εφαρμογής όσο αυτή χρησιμοποιείται (μέχρι την 
απόσυρσή της). Μόλις η εφαρμογή είναι λειτουργική, οι λειτουργίες μηχανικής λογισμικού 
πρέπει να διαχειρίζονται τυχόν ελαττώματα που ανακαλύπτονται, τυχόν αλλαγές που 
γίνονται στο περιβάλλον λογισμικού του συστήματος και στον εξοπλισμό υλικού με την 
πάροδο του χρόνου, και τις απαιτήσεις κάθε νέου χρήστη που έρχονται στην επιφάνεια.

Οι λειτουργίες μηχανικής λογισμικού είναι ένα αναπόσπαστο μέρος του συστήματος και των 
διαδικασιών του κύκλου ζωής λογισμικού [3]. Το γνωστικό πεδίο των λειτουργιών μηχανικής 
λογισμικού σχετίζεται με όλες τις άλλες πτυχές της μηχανικής λογισμικού. Επομένως, η 
περιγραφή αυτού συνδέεται με όλους τους άλλους τομείς γνώσης της μηχανικής λογισμικού 
του εγχειριδίου SWEBOK, ιδίως με τον τομέα της κατασκευής λογισμικού, ο οποίος αναφέρεται 
στην προετοιμασία του λογισμικού για εγκατάσταση (deployment), συμπεριλαμβανομένης της 
ενσωμάτωσης, της κατασκευής, της συσκευασίας (packaging) και της δοκιμής.

Οι μηχανικοί λειτουργιών εξειδικευμένου λογισμικού και τεχνολογιών πληροφορικής παραδοσιακά 
παρέχουν και διαχειρίζονται υπηρεσίες λειτουργιών τεχνολογίας πληροφορικής. Βέλτιστες 
πρακτικές για λειτουργίες μηχανικής λογισμικού αρχικά δημοσιεύθηκαν από το IT Infrastructure 
Library (ITIL) και έγιναν γρήγορα αποδεκτές από τον κλάδο. Οι πρακτικές αυτές συνοψίζονται 
και δημοσιεύονται στο Ινστιτούτο Ηλεκτρολόγων και Ηλεκτρονικών Μηχανικών (IEEE) 20000 [1].

Ιστορικά, οι λειτουργίες και τα υπολογιστικά κέντρα βρίσκονταν συχνά σε ανεξάρτητα 
οργανωτικά τμήματα (silos) ξεχωριστά από τις δραστηριότητες ανάπτυξης λογισμικού. 
Οι προοδευτικοί οργανισμοί πλέον τοποθετούν μαζί την ανάπτυξη, την συντήρηση, και 
κάποιες δραστηριότητες λειτουργιών μηχανικής λογισμικού (συχνά παρέχονται ως υπηρεσία). 
Ορισμένα οφέλη από αυτή την προσέγγιση είναι η εξάλειψη των ανεξάρτητων οργανωτικών 
τμημάτων (silos) που διαχώριζαν αυτές τις δραστηριότητες λογισμικού, καθώς και η κοινή 
χρήση των κοινών διαδικασιών και εργαλείων. Η αυξανόμενη δημοτικότητα και αποδοχή των 
πρακτικών DevOps [2*] και των συναφών πρότυπων [4], συμπεριλαμβανομένου ενός διαρκώς 
εξελισσόμενου συνόλου εργαλείων, αντικατοπτρίζουν αυτή την τάση. Οι πρακτικές DevOps 
αποσκοπούν στην αυτοματοποίηση και τη συνεχή εξέλιξη των δραστηριοτήτων μηχανικής λογισμικού
για να διασφαλιστεί τόσο υψηλής ποιότητας λογισμικό, όσο και η ικανοποίηση των χρηστών οι 
οποίοι απαιτούν ταχύτερη ανταπόκριση και μικρότερους χρόνους παράδοσης από τους 
μηχανικούς λογισμικού.

Ο ρόλος του μηχανικού λογισμικού στις λειτουργίες μηχανικής λογισμικού έχει εξελιχθεί 
σημαντικά την τελευταία δεκαετία με την εμφάνιση του DevOps, των υποδομών ως κώδικα (IaC), 
των ευέλικτων υποδομών, τη διαθεσιμότητα των υποδομών ως υπηρεσία (IaaS) και των πλατφορμών 
ως υπηρεσία (PaaS). Καθήκοντα που εκτελούνται παραδοσιακά από μηχανικούς υποδομών πληροφορικής 
αυτοματοποιούνται όλο και περισσότερο και παρέχουν τη διαθεσιμότητα ως υπηρεσία, επιτρέποντας 
στους προγραμματιστές εφαρμογών να εκτελούν λειτουργίες μηχανικής λογισμικού ανεξάρτητα, ως 
μέρος των καθημερινών δραστηριοτήτων τους. Για παράδειγμα, οι προγραμματιστές εφαρμογών σε 
πολλούς οργανισμούς μπορούν πλέον να χρησιμοποιούν άμεσα τις υποδομές και πλατφόρμες ως 
υπηρεσία (IaaS & PaaS)  για την ανάπτυξη εφαρμογών σε περιβάλλοντα παραγωγής και να 
παρακολουθούν διάφορες πτυχές αυτών των εφαρμογών χωρίς να εμπλέκονται άμεσα οι μηχανικοί 
λειτουργιών (operation engineers).

Παρότι πολλοί οργανισμοί εξακολουθούν να χρησιμοποιούν συμβατικές αρχές διαχείρισης των 
διαδικασιών πληροφορικής, το παρόν γνωστικό πεδίο επικεντρώνεται κυρίως στον ρόλο των μηχανικών 
λογισμικού σε λειτουργίες στα αναδυόμενα πλαίσια των DevOps, IaC και ευέλικτων πρακτικών 
υποδομής. Για το σκοπό αυτό, εντοπίζουμε δύο κύριους ρόλους μηχανικών λογισμικού που 
σχετίζονται με τις λειτουργίες: Μηχανικός λειτουργιών, ο οποίος είναι υπεύθυνος για την 
ανάπτυξη υπηρεσιών λειτουργίας που γίνονται διαθέσιμες ως υπηρεσία και προσβάσιμες μέσω μιας 
διεπαφής (API), και μηχανικός λογισμικού, ο οποίος μπορεί να χρησιμοποιήσει τις προκύπτουσες 
υπηρεσίες λειτουργίας (διαθέσιμες ως υπηρεσία) για την ανεξάρτητη ανάπτυξη και διαχείριση 
εφαρμογών χωρίς να εμπλέκονται άμεσα οι ειδικοί λειτουργιών πληροφορικής.

## Κατανομή των θεμάτων για τις λειτουργίες μηχανικής λογισμικού

{id="fig-softengops-tree"}

![Σχήμα 1.1 Κατανομή των θεμάτων στο γνωστικό πεδίο των λειτουργιών μηχανικής λογισμικού.](images/1-softengops.png)

Η κατανομή των θεμάτων για το γνωστικό πεδίο των λειτουργιών μηχανικής λογισμικού 
απεικονίζεται στο Σχήμα 1 [Σχήμα 1.1](#fig-softengops-tree).

## Βασικές αρχές λειτουργιών μηχανικής λογισμικού

### Ορισμός Λειτουργιών Μηχανικής Λογισμικού

Στο παρόν εγχειρίδιο, ο όρος λειτουργίες μηχανικής λογισμικού αναφέρεται στις γνώσεις, δεξιότητες, 
διαδικασίες και εργαλεία που χρησιμοποιούνται από τους μηχανικούς λογισμικού ή τον οργανισμό τους 
για να διασφαλίσουν ότι ένα προϊόν λογισμικού, συμπεριλαμβανομένων των υποδομών πληροφορικής, 
λογισμικού συστήματος και λογισμικού εφαρμογών, λειτουργεί σωστά κατά τη διάρκεια ανάπτυξης και 
συντήρησης, καθώς και σε πραγματικές συνθήκες λειτουργίας.

Στο IEEE 12207 [3], ένας χειριστής (operator) ορίζεται ως "άτομο ή οργανισμός που εκτελεί τις 
λειτουργίες ενός συστήματος". Το εγχειρίδιο SWEBOK τροποποιεί τον ορισμό αυτό για τον όρο μηχανικός 
λειτουργιών, ο οποίος αναφέρεται σε έναν μηχανικό λογισμικού που εκτελεί διαδικασίες λειτουργιών 
της μηχανικής λογισμικού. Σε αυτόν τον ρόλο, ένας μηχανικός λειτουργιών συνεργάζεται στενά με τους 
μηχανικούς λογισμικού για να αναπτύξει και να προσφέρει υπηρεσίες λειτουργιών, όπως οι ακόλουθες:
    * Παροχή, ανάπτυξη, διαμόρφωση και υποστήριξη δοχείων (containers) και εικονικών εξυπηρετητών
    * Σχεδιασμός και προσφορά κατά παραγγελία (on-demand) υπηρεσιών [(π.χ. περιβάλλον κατά παραγγελία, 
    έκδοση (versioning), συνεχής ολοκλήρωση (CI) και δοκιμές, ανάπτυξη και επιτήρηση)] για χρήση από 
    μηχανικούς λογισμικού,
    * Παρακολούθηση και επίλυση συμβάντων λογισμικού συστήματος και εφαρμογών με την εκτέλεση 
    διαγνωστικών ελέγχων, την τεκμηρίωση των προβλημάτων και επιλύσεων (resolutions), την ιεράρχηση των 
    προβλημάτων και αξιολόγηση του αντίκτυπου αυτών,
    * Εκτέλεση, αυτοματοποίηση και εφαρμογή κατάλληλων διαδικασιών για την ασφάλεια, την προστασία των 
    δεδομένων και τις διαδικασίες αποτυχίας,
    * Επίβλεψη της χωρητικότητας, του αποθηκευτικού σχεδιασμού και των συστημάτων διαχείρισης βάσεων 
    δεδομένων (DBMS),
    * Παροχή τεκμηρίωσης και τεχνικών προδιαγραφών στο προσωπικό πληροφορικής για το σχεδιασμό και την 
    υλοποίηση νέων ή αναβαθμισμένων υποδομών πληροφορικής και λογισμικού συστήματος.

Το IEEE 20000 [1] περιγράφει την ανάγκη για ανάπτυξη και ενίσχυση των επαγγελματικών ικανοτήτων των 
μηχανικών λειτουργιών. Για την επίτευξη αυτού του στόχου, οι οργανισμοί λογισμικού θα πρέπει να 
αντιμετωπίσουν τα ακόλουθα:
    * Πρόσληψη προσωπικού: Επικύρωση των εργασιακών προσόντων/ικανοτήτων των υποψηφίων, 
    συμπεριλαμβανομένων των επαγγελματικών τους πιστοποιήσεων. Τον προσδιορισμό των δυνατών τους σημείων, 
    των αδυναμιών, των δυνατοτήτων τους σε σχέση με την περιγραφή εργασίας του μηχανικού λειτουργιών, τη 
    γνώση σε βασικές τεχνολογίες και γλώσσες προγραμματισμού, και συνολικά το επίπεδο εμπειρίας,
    * Προγραμματισμός πόρων: Για τη στελέχωση νέων ή διευρυμένων υπηρεσιών μηχανικής λειτουργιών, 
    προγραμματίστε τόσο τη χρήση νέων τεχνολογιών, όσο και την ανάθεση προσωπικού διαχείρισης υπηρεσιών 
    σε ομάδες ανάπτυξης έργων, αναπτύξτε προγραμματισμό διαδοχής και άλλα κενά στελέχωσης που δημιουργούνται 
    από την αποχώρηση προσωπικού (turnover),
    * Κατάρτιση και ανάπτυξη πόρων: Προσδιορίστε τις απαιτήσεις κατάρτισης και ανάπτυξης, και να 
    δημιουργήσετε ένα πρόγραμμα κατάρτισης και ανάπτυξης που να τις καλύπτει- επίσης, να παρέχει έγκαιρη και 
    αποτελεσματική παροχή λειτουργικών υπηρεσιών. Οι μηχανικοί λειτουργιών πρέπει να εκπαιδεύονται στις 
    σχετικές πτυχές της διαχείρισης υπηρεσιών (π.χ., μέσω εκπαιδευτικών μαθημάτων, αυτοεκπαίδευσης, 
    καθοδήγησης και εκπαίδευσης on-the-job), καθώς και να αναπτύξουν δεξιότητες ομαδικότητας και ηγεσίας. Το 
    αρχείο κατάρτισης θα πρέπει να τηρείται για κάθε άτομο, με περιγραφές των εκπαιδεύσεων που παρέχονται.

### Διαδικασίες λειτουργιών μηχανικής λογισμικού

Το IEEE 20000 [1] είναι το πρότυπο αναφοράς που παρουσιάζει μια επισκόπηση των διαδικασιών. Καθορίζει τις 
απαιτήσεις για τον σχεδιασμό, τη μετάβαση, την παράδοση και τη βελτίωση των υπηρεσιών λειτουργιών. Το IEEE 
20000 περιγράφει πέντε κύριες ομάδες διαδικασιών λειτουργιών: διαδικασίες παροχής υπηρεσιών, διαδικασίες έκδοσης, 
διαδικασίες ελέγχου, διαδικασίες επίλυσης και διαδικασίες σχέσεων. Αυτές οι διαδικασίες λειτουργιών 
κατηγοριοποιούνται περαιτέρω ως τεχνικές διαδικασίες στο IEEE 12207 [3]. Οι διαδικασίες λειτουργιών, από την οπτική 
γωνία ενός μηχανικού λογισμικού, περιλαμβάνουν τις δραστηριότητες και τις εργασίες που είναι απαραίτητες για την 
ανάπτυξη, διαμόρφωση, λειτουργία και υποστήριξη ενός υφιστάμενου συστήματος ή προϊόντος λογισμικού, διατηρώντας την 
ακεραιότητά του. Το IEEE 12207 περιγράφει τέσσερις κύριες δραστηριότητες διαδικασιών λειτουργιών: 1) προετοιμασία για 
τη λειτουργία: αυτή απαιτεί τον καθορισμό μιας στρατηγικής λειτουργίας- 2) εκτέλεση της λειτουργίας: η οποία 
αποτελείται από τη λειτουργία και την παρακολούθηση- 3) διαχείριση των αποτελεσμάτων της λειτουργίας: όπου οι όποιες 
ανωμαλίες καταγράφονται και αντιμετωπίζονται- και τέλος 4) υποστήριξη του πελάτη: που σημαίνει να παρέχεται βοήθεια 
και διαβούλευση σε κάθε χρήστη των υπηρεσιών λειτουργιών.

Τέλος, το IEEE 2675 [4] εισάγει έναν αριθμό δραστηριοτήτων λειτουργιών μηχανικής λογισμικού χρησιμοποιώντας ένα 
ευέλικτο και «ελάχιστο βιώσιμο προϊόν» (MVP). Αυτό το πρότυπο αναγνωρίζει την επιρροή των DevOps ως σύνολο αρχών 
και πρακτικών που επιτρέπουν την καλύτερη επικοινωνία και συνεργασία μεταξύ των σχετικών ενδιαφερόμενων μερών με 
σκοπό την εξειδίκευση, ανάπτυξη, συνεχή βελτίωση και λειτουργία προϊόντων λειτουργικού λογισμικού, συστημάτων και 
υπηρεσιών. Αυτές οι διαδικασίες και δραστηριότητες αποτελούν ευθύνη των μηχανικών λειτουργιών.

Για τους σκοπούς του εγχειριδίου SWEBOK, οι δραστηριότητες μηχανικών λειτουργιών μπορούν να ομαδοποιηθούν σε τρεις 
κύριες λειτουργικές διαδικασίες (βλ. Σχήμα 2) όπου καθεμία περιέχει έναν αριθμό λειτουργικών δραστηριοτήτων, οι οποίες 
περιγράφονται στις επόμενες ενότητες του παρόντος κεφαλαίου:
    * Λειτουργικός σχεδιασμός (ενότητα 2)
    * Παράδοση λειτουργιών (ενότητα 3)
    * Έλεγχος λειτουργιών (ενότητα 4)

![Σχήμα 1.2 Διαδικασίες και Δραστηριότητες Λειτουργιών Μηχανικής Λογισμικού.](images/2-softengops.png)    

Κάθε διαδικασία λειτουργιών μηχανικής λογισμικού περιλαμβάνει δραστηριότητες που εκτελούνται κατά τη διάρκεια των 
διαδικασιών που προηγούνται και έπονται της παράδοσης ενός έργου λογισμικού. Οι δραστηριότητες σχεδιασμού λειτουργιών 
μηχανικής λογισμικού πραγματοποιούνται κατά τη διάρκεια του σταδίου πριν από την παράδοση. Αυτές οι δραστηριότητες 
καλύπτονται στο παρόν κεφάλαιο.

### Εγκατάσταση λογισμικού

Πριν μία εφαρμογή ή ενημέρωση λογισμικού μπορέσει να διατεθεί στους χρήστες (δηλ. να κυκλοφορήσει στη φάση παραγωγής), 
ο μηχανικός λειτουργιών πρέπει να εγκαταστήσει το λογισμικό ως μέρος της ανάπτυξής του (deployment). Για την 
εγκατάσταση του λογισμικού, ο μηχανικός ενδέχεται να χρειαστεί να απεγκαταστήσει προηγούμενες εκδόσεις, να διαμορφώσει 
το λογισμικό για τον τελικό προορισμό του, να δημιουργήσει τους απαραίτητους καταλόγους, αρχεία μητρώου και μεταβλητές 
περιβάλλοντος στον προορισμό-στόχο. Αυτό γίνεται συχνά με τη χρήση μιας γλώσσας σεναρίου (scripting language). Η 
εγκατάσταση του λογισμικού στην κατάλληλη τοποθεσία γίνεται συνήθως ηλεκτρονικά, αλλά στην περίπτωση των ενσωματωμένων 
συστημάτων, μπορεί να απαιτείται η χρήση ενός φυσικού ενδιάμεσου. Μόλις το λογισμικό εγκατασταθεί, πραγματοποιείται 
ένα βήμα επαλήθευσης για να διασφαλιστεί ότι η λειτουργία ήταν επιτυχής.

### Scripting και αυτοματοποίηση

Στα πλαίσια των λειτουργιών μηχανικής λογισμικού, επαναλαμβανόμενες εργασίες αυτοματοποιούνται για τη μείωση 
καθυστερήσεων, τη βελτίωση της ποιότητας και τη διασφάλιση συνεπούς και σταθερού λειτουργικού περιβάλλοντος .Αυτό 
συνήθως επιτυγχάνεται με τη χρήση γλωσσών σεναρίων (scripting languages), οι οποίες είναι βασικές γλώσσες προγραμματισμού. 
Η αυτοματοποίηση λειτουργιών επιτρέπει ταχύτερη αντίδραση σε περίπτωση αποτυχίας και, ως εκ τούτου, οδηγεί σε λιγότερο 
χρόνο διακοπής λειτουργίας και λιγότερα σοβαρά περιστατικά, καθώς οι ειδοποιήσεις αποστέλλονται αμέσως. Αυτοματοποίηση 
τέτοιων εργασιών είναι επίσης ένας καλός τρόπος για να διασφαλιστεί η τυποποίηση των λειτουργιών σε έναν οργανισμό. 
Αποτελεί επίσης τη βάση για την ανάπτυξη των λειτουργιών που διατίθενται ως υπηρεσία. Ανατρέξτε στην ενότητα 6 για 
περαιτέρω συζήτηση αναφορικά με τα εργαλεία λειτουργίας.